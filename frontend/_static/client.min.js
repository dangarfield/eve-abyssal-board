'use strict';

let nanoid = (size = 21) =>
  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += '-';
    } else {
      id += '_';
    }
    return id
  }, '');

const getAbyssModuleTypesFlatIds = () => {
  const types = getAbyssModuleTypes();
  return types.flatMap((item) => item.categories.map((category) => category.typeID))
};

const UNIT_STR = {
  1: 'm',
  2: 'kg',
  3: 'sec',
  4: 'A',
  5: 'K',
  6: 'mol',
  7: 'cd',
  8: 'm2',
  9: 'm3',
  10: 'm/sec',
  11: 'm/sec',
  12: 'm-1',
  13: 'kg/m3',
  14: 'm3/kg',
  15: 'A/m2',
  16: 'A/m',
  17: 'mol/m3',
  18: 'cd/m2',
  19: 'kg/kg = 1',
  101: 's',
  102: 'mm',
  103: 'None',
  104: 'x',
  105: '%',
  106: 'tf',
  107: 'MW',
  108: '%',
  109: '%',
  111: '%',
  112: 'rad/sec',
  113: 'HP',
  114: 'GJ',
  115: 'groupID',
  116: 'typeID',
  118: 'Ore units',
  119: 'attributeID',
  120: 'points',
  121: '%',
  122: 'None',
  123: 'sec',
  124: '%',
  125: 'N',
  126: 'ly',
  127: '%',
  128: 'Mbit/sec',
  129: 'None',
  133: 'ISK',
  134: 'm3/hour',
  135: 'AU',
  136: 'Slot',
  138: 'units',
  139: '+',
  140: 'Level',
  141: 'hardpoints',
  143: 'None'
};
const getUnitStringForUnitId = (unitId) => {
  return UNIT_STR[unitId] || ''
};
const getAbyssModuleTypes = () => {
  return [
    {
      group: 'Microwarpdrives',
      categories: [
        {
          categoryName: '5MN',
          typeID: 47740
        },
        {
          categoryName: '50MN',
          typeID: 47408
        },
        {
          categoryName: '500MN',
          typeID: 47745
        },
        {
          categoryName: '50000MN',
          typeID: 56306
        }
      ]
    },
    {
      group: 'Afterburners',
      categories: [
        {
          categoryName: '1MN',
          typeID: 47749
        },
        {
          categoryName: '10MN',
          typeID: 47753
        },
        {
          categoryName: '100MN',
          typeID: 47757
        },
        {
          categoryName: '10000MN',
          typeID: 56305
        }
      ]
    },
    {
      group: 'Shield Extenders',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47800
        },
        {
          categoryName: 'Medium',
          typeID: 47804
        },
        {
          categoryName: 'Large',
          typeID: 47808
        }
      ]
    },
    {
      group: 'Armor Plates',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47812
        },
        {
          categoryName: 'Medium',
          typeID: 47817
        },
        {
          categoryName: 'Large',
          typeID: 47820
        }
      ]
    },
    {
      group: 'Shield Boosters',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47781
        },
        {
          categoryName: 'Medium',
          typeID: 47785
        },
        {
          categoryName: 'Large',
          typeID: 47789
        },
        {
          categoryName: 'X-Large',
          typeID: 47793
        },
        {
          categoryName: 'Capital',
          typeID: 56309
        }
      ]
    },
    {
      group: 'Armor Repairers',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47769
        },
        {
          categoryName: 'Medium',
          typeID: 47773
        },
        {
          categoryName: 'Large',
          typeID: 47777
        },
        {
          categoryName: 'Capital',
          typeID: 56307
        }
      ]
    },
    {
      group: 'Ancil. Shield Boosters',
      categories: [
        {
          categoryName: 'Medium',
          typeID: 47836
        },
        {
          categoryName: 'Large',
          typeID: 47838
        },
        {
          categoryName: 'X-Large',
          typeID: 47840
        },
        {
          categoryName: 'Capital',
          typeID: 56310
        }
      ]
    },
    {
      group: 'Ancil. Armor Repairers',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47842
        },
        {
          categoryName: 'Medium',
          typeID: 47844
        },
        {
          categoryName: 'Large',
          typeID: 47846
        },
        {
          categoryName: 'Capital',
          typeID: 56308
        }
      ]
    },
    {
      group: 'Energy Neutralizers',
      categories: [
        {
          categoryName: 'Small',
          typeID: 47824
        },
        {
          categoryName: 'Medium',
          typeID: 47828
        },
        {
          categoryName: 'Heavy',
          typeID: 47832
        },
        {
          categoryName: 'Capital',
          typeID: 56312
        }
      ]
    },
    {
      group: 'Energy Nosferatus',
      categories: [
        {
          categoryName: 'Small',
          typeID: 48419
        },
        {
          categoryName: 'Medium',
          typeID: 48423
        },
        {
          categoryName: 'Heavy',
          typeID: 48427
        },
        {
          categoryName: 'Capital',
          typeID: 56311
        }
      ]
    },
    {
      group: 'Cap Batteries',
      categories: [
        {
          categoryName: 'Small',
          typeID: 48431
        },
        {
          categoryName: 'Medium',
          typeID: 48435
        },
        {
          categoryName: 'Large',
          typeID: 48439
        }
      ]
    },
    {
      group: 'Stasis Webifiers',
      categories: [
        {
          categoryName: 'Stasis Webifiers',
          typeID: 47702
        }
      ]
    },
    {
      group: 'Warp Scramblers',
      categories: [
        {
          categoryName: 'Warp Scramblers',
          typeID: 47732
        },
        {
          categoryName: 'Heavy Warp Scramblers',
          typeID: 56303
        }
      ]
    },
    {
      group: 'Warp Disruptors',
      categories: [
        {
          categoryName: 'Warp Disruptors',
          typeID: 47736
        },
        {
          categoryName: 'Heavy Warp Disruptors',
          typeID: 56304
        }
      ]
    },
    {
      group: 'Damage Modules',
      categories: [
        {
          categoryName: 'Gyrostabilizer',
          typeID: 49730
        },
        {
          categoryName: 'Mag. Field Stab.',
          typeID: 49722
        },
        {
          categoryName: 'Heat Sink',
          typeID: 49726
        },
        {
          categoryName: 'Ballistic Control',
          typeID: 49738
        },
        {
          categoryName: 'Entropic Sink',
          typeID: 49734
        },
        {
          categoryName: 'Drone Amp.',
          typeID: 60482
        }
      ]
    },
    {
      group: 'Damage Control',
      categories: [
        {
          categoryName: 'Standard',
          typeID: 52227
        },
        {
          categoryName: 'Assault',
          typeID: 52230
        }
      ]
    },
    {
      group: 'Fighter Support Unit',
      categories: [
        {
          categoryName: 'Fighter Support Unit',
          typeID: 60483
        }
      ]
    },
    {
      group: 'Siege Module',
      categories: [
        {
          categoryName: 'Siege Module',
          typeID: 56313
        }
      ]
    },
    {
      group: 'Drones',
      categories: [
        {
          categoryName: 'Light',
          typeID: 60478
        },
        {
          categoryName: 'Medium',
          typeID: 60479
        },
        {
          categoryName: 'Heavy',
          typeID: 60480
        },
        {
          categoryName: 'Sentry',
          typeID: 60481
        }
      ]
    }
  ]
};

const loadData = () => {
  const dataString = window.localStorage.getItem('abyssal-board');
  if (dataString) {
    const data = JSON.parse(dataString);
    // delete data['admin-token']
    // clearData('admin-token')
    return data
  }
  return {}
};
const saveData = (key, value) => {
  const existingData = loadData();
  const newData = { ...existingData, [key]: value };
  const newDataString = JSON.stringify(newData);
  window.localStorage.setItem('abyssal-board', newDataString);
};
const clearData = (key) => {
  const existingData = loadData();
  delete existingData[key];
  const newDataString = JSON.stringify(existingData);
  window.localStorage.setItem('abyssal-board', newDataString);
};

const listingPriceStringToInt = (inputValue) => {
  const digitsString = inputValue.match(/[\d.]+/g);
  let value = parseFloat(digitsString ? digitsString.join('') : '');

  const inputValueLower = inputValue.toLowerCase();
  if (inputValueLower.includes('k')) value = value * 1000;
  if (inputValueLower.includes('m')) value = value * 1000000;
  if (inputValueLower.includes('b')) value = value * 1000000000;
  if (inputValueLower.includes('t')) value = value * 1000000000000;
  console.log('listingPriceStringToInt', inputValue, value);
  return value
};
const formatToISKString = (number) => {
  const suffixes = ['', 'k', 'm', 'b', 't'];
  let absNumber = Math.abs(number);
  let suffixIndex = 0;
  while (absNumber >= 1000 && suffixIndex < suffixes.length - 1) {
    absNumber /= 1000;
    suffixIndex++;
  }
  const formattedNumber = Number.isInteger(absNumber) ? absNumber : absNumber.toFixed(1);
  const suffix = suffixes[suffixIndex];
  return number >= 0 ? formattedNumber + suffix + ' ISK' : '-' + formattedNumber + suffix + ' ISK'
};
const formatForUnit = (value, unitID, addSign) => {
  const unit = getUnitStringForUnitId(unitID);
  let outputValue = '';
  switch (unit) {
    case 'GJ': outputValue = value.toFixed(1); break
    case 's': outputValue = (value / 1000).toFixed(2); break
    case 'x': outputValue = value.toFixed(3); break
    case 'm': outputValue = Math.floor(value).toFixed(0); break
    // case '%': outputValue = (100 * (1 - value)).toFixed(2); break // Lots of mess here, should really use unit codes
    case '%': outputValue = (value / 100).toFixed(2); break
    default: outputValue = value.toFixed(2); break
  }
  const signValue = addSign && value > 0 ? '+' : '';
  outputValue = outputValue.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  return `${signValue}${outputValue}${unit !== '' ? ` ${unit}` : ''}`
};
const formatMilliseconds = (milliseconds) => {
  const seconds = Math.floor(milliseconds / 1000);
  const minutes = Math.floor(seconds / 60);

  const formattedSeconds = seconds % 60;
  const formattedMinutes = minutes > 0 ? `${minutes}m ` : '';
  const formattedTime = formattedMinutes + `${formattedSeconds}s`;
  return formattedTime
};
const triggerRefreshTime = (elementSelector, typeMessage, expireTime, lastModified) => {
  const refreshTime = () => {
    const timeDiff = expireTime - new Date();
    const ele = document.querySelector(elementSelector);
    // console.log('timeDiff', timeDiff)
    if (ele === undefined) {
      clearInterval(refreshTimeInterval);
    } else if (timeDiff < 0) {
      ele.innerHTML = '<span class="text-primary">New data available on EVE API - Refresh the page to load it</span>';
      clearInterval(refreshTimeInterval);
    } else {
      try {
        ele.innerHTML = `${typeMessage} correct and cached by EVE API as of ${lastModified.toLocaleTimeString()}. Next update available in <span class="text-primary">${(formatMilliseconds(timeDiff))}</span>`;
      } catch (error) {
        // It's gone, oh well...
      }
    }
  };
  const refreshTimeInterval = setInterval(refreshTime, 1000);
  refreshTime();
};

const showModalAlert = async (title, contentHtml, footerConfig) => {
  return new Promise((resolve, reject) => {
    const id = `modal-${nanoid(10)}`;
    const html = `<div class="modal fade" id="${id}" tabindex="-1" role="dialog">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title fs-5">${title}</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
          <div class="modal-body">
            ${contentHtml}
          </div>
          <div class="modal-footer">
            ${footerConfig ? footerConfig.map((f, i) => `<button type="button" class="btn ${f.style} modal-footer-btn-${i}">${f.buttonText}</button>`).join('') : ''}
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>`;
    document.body.insertAdjacentHTML('beforeend', html);
    if (footerConfig) {
      for (let i = 0; i < footerConfig.length; i++) {
        document.querySelector(`.modal .modal-footer-btn-${i}`).addEventListener('click', () => {
          footerConfig[i].cb();
        });
      }
    }

    const modalEle = document.getElementById(id);
    const modal = new window.bootstrap.Modal(modalEle, {});
    modal.show();
    modalEle.addEventListener('hidden.bs.modal', event => {
      console.log('destroy');
      modal.dispose();
      modalEle.remove();
      resolve();
    });
  })
};
const deepCopy = (obj) => {
  return JSON.parse(JSON.stringify(obj))
};

const cloneSimpleList = (originalList) => {
  return originalList.map(obj => ({ ...obj }))
};

var __defProp$1 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp$1(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp$1(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __publicField$1 = (obj, key, value) => {
  __defNormalProp$1(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var base64url$3 = { exports: {} };
var base64url$2 = {};
var padString$1 = {};
Object.defineProperty(padString$1, "__esModule", { value: true });
function padString(input) {
  var segmentLength = 4;
  var stringLength = input.length;
  var diff = stringLength % segmentLength;
  if (!diff) {
    return input;
  }
  var position = stringLength;
  var padLength = segmentLength - diff;
  var paddedStringLength = stringLength + padLength;
  var buffer = Buffer.alloc(paddedStringLength);
  buffer.write(input);
  while (padLength--) {
    buffer.write("=", position++);
  }
  return buffer.toString();
}
padString$1.default = padString;
Object.defineProperty(base64url$2, "__esModule", { value: true });
var pad_string_1 = padString$1;
function encode$1(input, encoding) {
  if (encoding === void 0) {
    encoding = "utf8";
  }
  if (Buffer.isBuffer(input)) {
    return fromBase64(input.toString("base64"));
  }
  return fromBase64(Buffer.from(input, encoding).toString("base64"));
}
function decode$1(base64url2, encoding) {
  if (encoding === void 0) {
    encoding = "utf8";
  }
  return Buffer.from(toBase64(base64url2), "base64").toString(encoding);
}
function toBase64(base64url2) {
  base64url2 = base64url2.toString();
  return pad_string_1.default(base64url2).replace(/\-/g, "+").replace(/_/g, "/");
}
function fromBase64(base64) {
  return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function toBuffer(base64url2) {
  return Buffer.from(toBase64(base64url2), "base64");
}
var base64url$1 = encode$1;
base64url$1.encode = encode$1;
base64url$1.decode = decode$1;
base64url$1.toBase64 = toBase64;
base64url$1.fromBase64 = fromBase64;
base64url$1.toBuffer = toBuffer;
base64url$2.default = base64url$1;
(function(module) {
  module.exports = base64url$2.default;
  module.exports.default = module.exports;
})(base64url$3);
var base64url = base64url$3.exports;
var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
for (var i$1 = 0; i$1 < chars.length; i$1++) {
  lookup[chars.charCodeAt(i$1)] = i$1;
}
var encode = function(arraybuffer) {
  var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
  for (i = 0; i < len; i += 3) {
    base64 += chars[bytes[i] >> 2];
    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
    base64 += chars[bytes[i + 2] & 63];
  }
  if (len % 3 === 2) {
    base64 = base64.substring(0, base64.length - 1) + "=";
  } else if (len % 3 === 1) {
    base64 = base64.substring(0, base64.length - 2) + "==";
  }
  return base64;
};
async function getRandomString(length) {
  const numBytes = Math.floor(length / 2);
  const array = new Uint8Array(numBytes);
  window.crypto.getRandomValues(array);
  return [...array].map((x) => x.toString(16).padStart(2, "0")).join("");
}
async function createHash(payload) {
  const data = new TextEncoder().encode(payload);
  const digest = await window.crypto.subtle.digest("SHA-256", data);
  return base64url.fromBase64(encode(digest));
}
const encoder = new TextEncoder();
const decoder = new TextDecoder();
function concat(...buffers) {
  const size = buffers.reduce((acc, { length }) => acc + length, 0);
  const buf = new Uint8Array(size);
  let i = 0;
  buffers.forEach((buffer) => {
    buf.set(buffer, i);
    i += buffer.length;
  });
  return buf;
}
const decodeBase64 = (encoded) => {
  return new Uint8Array(atob(encoded).split("").map((c) => c.charCodeAt(0)));
};
const decode = (input) => {
  let encoded = input;
  if (encoded instanceof Uint8Array) {
    encoded = decoder.decode(encoded);
  }
  encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
  try {
    return decodeBase64(encoded);
  } catch (_a) {
    throw new TypeError("The input to be decoded is not correctly encoded.");
  }
};
class JOSEError extends Error {
  constructor(message) {
    var _a;
    super(message);
    this.code = "ERR_JOSE_GENERIC";
    this.name = this.constructor.name;
    (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);
  }
  static get code() {
    return "ERR_JOSE_GENERIC";
  }
}
class JWTClaimValidationFailed extends JOSEError {
  constructor(message, claim = "unspecified", reason = "unspecified") {
    super(message);
    this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
    this.claim = claim;
    this.reason = reason;
  }
  static get code() {
    return "ERR_JWT_CLAIM_VALIDATION_FAILED";
  }
}
class JWTExpired extends JOSEError {
  constructor(message, claim = "unspecified", reason = "unspecified") {
    super(message);
    this.code = "ERR_JWT_EXPIRED";
    this.claim = claim;
    this.reason = reason;
  }
  static get code() {
    return "ERR_JWT_EXPIRED";
  }
}
class JOSEAlgNotAllowed extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
  }
  static get code() {
    return "ERR_JOSE_ALG_NOT_ALLOWED";
  }
}
class JOSENotSupported extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = "ERR_JOSE_NOT_SUPPORTED";
  }
  static get code() {
    return "ERR_JOSE_NOT_SUPPORTED";
  }
}
class JWSInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = "ERR_JWS_INVALID";
  }
  static get code() {
    return "ERR_JWS_INVALID";
  }
}
class JWTInvalid extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = "ERR_JWT_INVALID";
  }
  static get code() {
    return "ERR_JWT_INVALID";
  }
}
class JWSSignatureVerificationFailed extends JOSEError {
  constructor() {
    super(...arguments);
    this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
    this.message = "signature verification failed";
  }
  static get code() {
    return "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
}
var crypto$1 = crypto;
function isCryptoKey(key) {
  try {
    return key != null && typeof key.extractable === "boolean" && typeof key.algorithm.name === "string" && typeof key.type === "string";
  } catch (_a) {
    return false;
  }
}
function isCloudflareWorkers() {
  return typeof WebSocketPair === "function";
}
function isNodeJs() {
  try {
    return process.versions.node !== void 0;
  } catch (_a) {
    return false;
  }
}
function unusable(name, prop = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);
}
function isAlgorithm(algorithm, name) {
  return algorithm.name === name;
}
function getHashLength(hash) {
  return parseInt(hash.name.substr(4), 10);
}
function getNamedCurve(alg) {
  switch (alg) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
function checkUsage(key, usages) {
  if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
    let msg = "CryptoKey does not support this operation, its usages must include ";
    if (usages.length > 2) {
      const last = usages.pop();
      msg += `one of ${usages.join(", ")}, or ${last}.`;
    } else if (usages.length === 2) {
      msg += `one of ${usages[0]} or ${usages[1]}.`;
    } else {
      msg += `${usages[0]}.`;
    }
    throw new TypeError(msg);
  }
}
function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!isAlgorithm(key.algorithm, "HMAC"))
        throw unusable("HMAC");
      const expected = parseInt(alg.substr(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5"))
        throw unusable("RSASSA-PKCS1-v1_5");
      const expected = parseInt(alg.substr(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!isAlgorithm(key.algorithm, "RSA-PSS"))
        throw unusable("RSA-PSS");
      const expected = parseInt(alg.substr(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case (isNodeJs() && "EdDSA"): {
      if (key.algorithm.name !== "NODE-ED25519" && key.algorithm.name !== "NODE-ED448")
        throw unusable("NODE-ED25519 or NODE-ED448");
      break;
    }
    case (isCloudflareWorkers() && "EdDSA"): {
      if (!isAlgorithm(key.algorithm, "NODE-ED25519"))
        throw unusable("NODE-ED25519");
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!isAlgorithm(key.algorithm, "ECDSA"))
        throw unusable("ECDSA");
      const expected = getNamedCurve(alg);
      const actual = key.algorithm.namedCurve;
      if (actual !== expected)
        throw unusable(expected, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
var invalidKeyInput = (actual, ...types2) => {
  let msg = "Key must be ";
  if (types2.length > 2) {
    const last = types2.pop();
    msg += `one of type ${types2.join(", ")}, or ${last}.`;
  } else if (types2.length === 2) {
    msg += `one of type ${types2[0]} or ${types2[1]}.`;
  } else {
    msg += `of type ${types2[0]}.`;
  }
  if (actual == null) {
    msg += ` Received ${actual}`;
  } else if (typeof actual === "function" && actual.name) {
    msg += ` Received function ${actual.name}`;
  } else if (typeof actual === "object" && actual != null) {
    if (actual.constructor && actual.constructor.name) {
      msg += ` Received an instance of ${actual.constructor.name}`;
    }
  }
  return msg;
};
var isKeyLike = (key) => {
  return isCryptoKey(key);
};
const types = ["CryptoKey"];
const isDisjoint = (...headers) => {
  const sources = headers.filter(Boolean);
  if (sources.length === 0 || sources.length === 1) {
    return true;
  }
  let acc;
  for (const header of sources) {
    const parameters = Object.keys(header);
    if (!acc || acc.size === 0) {
      acc = new Set(parameters);
      continue;
    }
    for (const parameter of parameters) {
      if (acc.has(parameter)) {
        return false;
      }
      acc.add(parameter);
    }
  }
  return true;
};
var isDisjoint$1 = isDisjoint;
function isObjectLike(value) {
  return typeof value === "object" && value !== null;
}
function isObject(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
    return false;
  }
  if (Object.getPrototypeOf(input) === null) {
    return true;
  }
  let proto = input;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(input) === proto;
}
var checkKeyLength = (alg, key) => {
  if (alg.startsWith("RS") || alg.startsWith("PS")) {
    const { modulusLength } = key.algorithm;
    if (typeof modulusLength !== "number" || modulusLength < 2048) {
      throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
    }
  }
};
function subtleMapping(jwk) {
  let algorithm;
  let keyUsages;
  switch (jwk.kty) {
    case "oct": {
      switch (jwk.alg) {
        case "HS256":
        case "HS384":
        case "HS512":
          algorithm = { name: "HMAC", hash: `SHA-${jwk.alg.substr(-3)}` };
          keyUsages = ["sign", "verify"];
          break;
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
        case "A128GCMKW":
        case "A192GCMKW":
        case "A256GCMKW":
          algorithm = { name: "AES-GCM" };
          keyUsages = ["encrypt", "decrypt"];
          break;
        case "A128KW":
        case "A192KW":
        case "A256KW":
          algorithm = { name: "AES-KW" };
          keyUsages = ["wrapKey", "unwrapKey"];
          break;
        case "PBES2-HS256+A128KW":
        case "PBES2-HS384+A192KW":
        case "PBES2-HS512+A256KW":
          algorithm = { name: "PBKDF2" };
          keyUsages = ["deriveBits"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "RSA": {
      switch (jwk.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = { name: "RSA-PSS", hash: `SHA-${jwk.alg.substr(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${jwk.alg.substr(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(jwk.alg.substr(-3), 10) || 1}`
          };
          keyUsages = jwk.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (jwk.alg) {
        case "ES256":
          algorithm = { name: "ECDSA", namedCurve: "P-256" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES384":
          algorithm = { name: "ECDSA", namedCurve: "P-384" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES512":
          algorithm = { name: "ECDSA", namedCurve: "P-521" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = { name: "ECDH", namedCurve: jwk.crv };
          keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case ((isCloudflareWorkers() || isNodeJs()) && "OKP"):
      if (jwk.alg !== "EdDSA") {
        throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      switch (jwk.crv) {
        case "Ed25519":
          algorithm = { name: "NODE-ED25519", namedCurve: "NODE-ED25519" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case (isNodeJs() && "Ed448"):
          algorithm = { name: "NODE-ED448", namedCurve: "NODE-ED448" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "crv" (Subtype of Key Pair) Parameter value');
      }
      break;
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return { algorithm, keyUsages };
}
const parse = async (jwk) => {
  var _a, _b;
  const { algorithm, keyUsages } = subtleMapping(jwk);
  const rest = [
    algorithm,
    (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,
    (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages
  ];
  if (algorithm.name === "PBKDF2") {
    return crypto$1.subtle.importKey("raw", decode(jwk.k), ...rest);
  }
  const keyData = __spreadValues({}, jwk);
  delete keyData.alg;
  return crypto$1.subtle.importKey("jwk", keyData, ...rest);
};
var asKeyObject = parse;
async function importJWK(jwk, alg, octAsKeyObject) {
  if (!isObject(jwk)) {
    throw new TypeError("JWK must be an object");
  }
  alg || (alg = jwk.alg);
  if (typeof alg !== "string" || !alg) {
    throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
  }
  switch (jwk.kty) {
    case "oct":
      if (typeof jwk.k !== "string" || !jwk.k) {
        throw new TypeError('missing "k" (Key Value) Parameter value');
      }
      octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;
      if (octAsKeyObject) {
        return asKeyObject(__spreadProps(__spreadValues({}, jwk), { alg, ext: false }));
      }
      return decode(jwk.k);
    case "RSA":
      if (jwk.oth !== void 0) {
        throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
      }
    case "EC":
    case "OKP":
      return asKeyObject(__spreadProps(__spreadValues({}, jwk), { alg }));
    default:
      throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}
const symmetricTypeCheck = (key) => {
  if (key instanceof Uint8Array)
    return;
  if (!isKeyLike(key)) {
    throw new TypeError(invalidKeyInput(key, ...types, "Uint8Array"));
  }
  if (key.type !== "secret") {
    throw new TypeError(`${types.join(" or ")} instances for symmetric algorithms must be of type "secret"`);
  }
};
const asymmetricTypeCheck = (key, usage) => {
  if (!isKeyLike(key)) {
    throw new TypeError(invalidKeyInput(key, ...types));
  }
  if (key.type === "secret") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithms must not be of type "secret"`);
  }
  if (usage === "sign" && key.type === "public") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm signing must be of type "private"`);
  }
  if (usage === "decrypt" && key.type === "public") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm decryption must be of type "private"`);
  }
  if (key.algorithm && usage === "verify" && key.type === "private") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm verifying must be of type "public"`);
  }
  if (key.algorithm && usage === "encrypt" && key.type === "private") {
    throw new TypeError(`${types.join(" or ")} instances for asymmetric algorithm encryption must be of type "public"`);
  }
};
const checkKeyType = (alg, key, usage) => {
  const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
  if (symmetric) {
    symmetricTypeCheck(key);
  } else {
    asymmetricTypeCheck(key, usage);
  }
};
var checkKeyType$1 = checkKeyType;
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== void 0 && protectedHeader.crit === void 0) {
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  }
  if (!protectedHeader || protectedHeader.crit === void 0) {
    return new Set();
  }
  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  }
  let recognized;
  if (recognizedOption !== void 0) {
    recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
  } else {
    recognized = recognizedDefault;
  }
  for (const parameter of protectedHeader.crit) {
    if (!recognized.has(parameter)) {
      throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    }
    if (joseHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    } else if (recognized.get(parameter) && protectedHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
  }
  return new Set(protectedHeader.crit);
}
const validateAlgorithms = (option, algorithms) => {
  if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== "string"))) {
    throw new TypeError(`"${option}" option must be an array of strings`);
  }
  if (!algorithms) {
    return void 0;
  }
  return new Set(algorithms);
};
var validateAlgorithms$1 = validateAlgorithms;
function subtleDsa(alg, namedCurve) {
  const length = parseInt(alg.substr(-3), 10);
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      return { hash: `SHA-${length}`, name: "HMAC" };
    case "PS256":
    case "PS384":
    case "PS512":
      return { hash: `SHA-${length}`, name: "RSA-PSS", saltLength: length >> 3 };
    case "RS256":
    case "RS384":
    case "RS512":
      return { hash: `SHA-${length}`, name: "RSASSA-PKCS1-v1_5" };
    case "ES256":
    case "ES384":
    case "ES512":
      return { hash: `SHA-${length}`, name: "ECDSA", namedCurve };
    case ((isCloudflareWorkers() || isNodeJs()) && "EdDSA"):
      return { name: namedCurve, namedCurve };
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
function getCryptoKey(alg, key, usage) {
  if (isCryptoKey(key)) {
    checkSigCryptoKey(key, alg, usage);
    return key;
  }
  if (key instanceof Uint8Array) {
    if (!alg.startsWith("HS")) {
      throw new TypeError(invalidKeyInput(key, ...types));
    }
    return crypto$1.subtle.importKey("raw", key, { hash: `SHA-${alg.substr(-3)}`, name: "HMAC" }, false, [usage]);
  }
  throw new TypeError(invalidKeyInput(key, ...types, "Uint8Array"));
}
const verify = async (alg, key, signature, data) => {
  const cryptoKey = await getCryptoKey(alg, key, "verify");
  checkKeyLength(alg, cryptoKey);
  const algorithm = subtleDsa(alg, cryptoKey.algorithm.namedCurve);
  try {
    return await crypto$1.subtle.verify(algorithm, cryptoKey, signature, data);
  } catch (_a) {
    return false;
  }
};
var verify$1 = verify;
async function flattenedVerify(jws, key, options) {
  var _a;
  if (!isObject(jws)) {
    throw new JWSInvalid("Flattened JWS must be an object");
  }
  if (jws.protected === void 0 && jws.header === void 0) {
    throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  }
  if (jws.protected !== void 0 && typeof jws.protected !== "string") {
    throw new JWSInvalid("JWS Protected Header incorrect type");
  }
  if (jws.payload === void 0) {
    throw new JWSInvalid("JWS Payload missing");
  }
  if (typeof jws.signature !== "string") {
    throw new JWSInvalid("JWS Signature missing or incorrect type");
  }
  if (jws.header !== void 0 && !isObject(jws.header)) {
    throw new JWSInvalid("JWS Unprotected Header incorrect type");
  }
  let parsedProt = {};
  if (jws.protected) {
    const protectedHeader = decode(jws.protected);
    try {
      parsedProt = JSON.parse(decoder.decode(protectedHeader));
    } catch (_b) {
      throw new JWSInvalid("JWS Protected Header is invalid");
    }
  }
  if (!isDisjoint$1(parsedProt, jws.header)) {
    throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  }
  const joseHeader = __spreadValues(__spreadValues({}, parsedProt), jws.header);
  const extensions = validateCrit(JWSInvalid, new Map([["b64", true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
  let b64 = true;
  if (extensions.has("b64")) {
    b64 = parsedProt.b64;
    if (typeof b64 !== "boolean") {
      throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
  }
  const { alg } = joseHeader;
  if (typeof alg !== "string" || !alg) {
    throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  }
  const algorithms = options && validateAlgorithms$1("algorithms", options.algorithms);
  if (algorithms && !algorithms.has(alg)) {
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  }
  if (b64) {
    if (typeof jws.payload !== "string") {
      throw new JWSInvalid("JWS Payload must be a string");
    }
  } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
    throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
  }
  let resolvedKey = false;
  if (typeof key === "function") {
    key = await key(parsedProt, jws);
    resolvedKey = true;
  }
  checkKeyType$1(alg, key, "verify");
  const data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ""), encoder.encode("."), typeof jws.payload === "string" ? encoder.encode(jws.payload) : jws.payload);
  const signature = decode(jws.signature);
  const verified = await verify$1(alg, key, signature, data);
  if (!verified) {
    throw new JWSSignatureVerificationFailed();
  }
  let payload;
  if (b64) {
    payload = decode(jws.payload);
  } else if (typeof jws.payload === "string") {
    payload = encoder.encode(jws.payload);
  } else {
    payload = jws.payload;
  }
  const result = { payload };
  if (jws.protected !== void 0) {
    result.protectedHeader = parsedProt;
  }
  if (jws.header !== void 0) {
    result.unprotectedHeader = jws.header;
  }
  if (resolvedKey) {
    return __spreadProps(__spreadValues({}, result), { key });
  }
  return result;
}
async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array) {
    jws = decoder.decode(jws);
  }
  if (typeof jws !== "string") {
    throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
  }
  const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split(".");
  if (length !== 3) {
    throw new JWSInvalid("Invalid Compact JWS");
  }
  const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);
  const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return __spreadProps(__spreadValues({}, result), { key: verified.key });
  }
  return result;
}
var epoch = (date) => Math.floor(date.getTime() / 1e3);
const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
var secs = (str) => {
  const matched = REGEX.exec(str);
  if (!matched) {
    throw new TypeError("Invalid time period format");
  }
  const value = parseFloat(matched[1]);
  const unit = matched[2].toLowerCase();
  switch (unit) {
    case "sec":
    case "secs":
    case "second":
    case "seconds":
    case "s":
      return Math.round(value);
    case "minute":
    case "minutes":
    case "min":
    case "mins":
    case "m":
      return Math.round(value * minute);
    case "hour":
    case "hours":
    case "hr":
    case "hrs":
    case "h":
      return Math.round(value * hour);
    case "day":
    case "days":
    case "d":
      return Math.round(value * day);
    case "week":
    case "weeks":
    case "w":
      return Math.round(value * week);
    default:
      return Math.round(value * year);
  }
};
const normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, "");
const checkAudiencePresence = (audPayload, audOption) => {
  if (typeof audPayload === "string") {
    return audOption.includes(audPayload);
  }
  if (Array.isArray(audPayload)) {
    return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
  }
  return false;
};
var jwtPayload = (protectedHeader, encodedPayload, options = {}) => {
  const { typ } = options;
  if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
    throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', "typ", "check_failed");
  }
  let payload;
  try {
    payload = JSON.parse(decoder.decode(encodedPayload));
  } catch (_a) {
  }
  if (!isObject(payload)) {
    throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
  }
  const { issuer } = options;
  if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
    throw new JWTClaimValidationFailed('unexpected "iss" claim value', "iss", "check_failed");
  }
  const { subject } = options;
  if (subject && payload.sub !== subject) {
    throw new JWTClaimValidationFailed('unexpected "sub" claim value', "sub", "check_failed");
  }
  const { audience } = options;
  if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [audience] : audience)) {
    throw new JWTClaimValidationFailed('unexpected "aud" claim value', "aud", "check_failed");
  }
  let tolerance;
  switch (typeof options.clockTolerance) {
    case "string":
      tolerance = secs(options.clockTolerance);
      break;
    case "number":
      tolerance = options.clockTolerance;
      break;
    case "undefined":
      tolerance = 0;
      break;
    default:
      throw new TypeError("Invalid clockTolerance option type");
  }
  const { currentDate } = options;
  const now = epoch(currentDate || new Date());
  if (payload.iat !== void 0 || options.maxTokenAge) {
    if (typeof payload.iat !== "number") {
      throw new JWTClaimValidationFailed('"iat" claim must be a number', "iat", "invalid");
    }
    if (payload.exp === void 0 && payload.iat > now + tolerance) {
      throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
    }
  }
  if (payload.nbf !== void 0) {
    if (typeof payload.nbf !== "number") {
      throw new JWTClaimValidationFailed('"nbf" claim must be a number', "nbf", "invalid");
    }
    if (payload.nbf > now + tolerance) {
      throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', "nbf", "check_failed");
    }
  }
  if (payload.exp !== void 0) {
    if (typeof payload.exp !== "number") {
      throw new JWTClaimValidationFailed('"exp" claim must be a number', "exp", "invalid");
    }
    if (payload.exp <= now - tolerance) {
      throw new JWTExpired('"exp" claim timestamp check failed', "exp", "check_failed");
    }
  }
  if (options.maxTokenAge) {
    const age = now - payload.iat;
    const max = typeof options.maxTokenAge === "number" ? options.maxTokenAge : secs(options.maxTokenAge);
    if (age - tolerance > max) {
      throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', "iat", "check_failed");
    }
    if (age < 0 - tolerance) {
      throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', "iat", "check_failed");
    }
  }
  return payload;
};
async function jwtVerify(jwt, key, options) {
  var _a;
  const verified = await compactVerify(jwt, key, options);
  if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes("b64")) && verified.protectedHeader.b64 === false) {
    throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
  }
  const payload = jwtPayload(verified.protectedHeader, verified.payload, options);
  const result = { payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return __spreadProps(__spreadValues({}, result), { key: verified.key });
  }
  return result;
}
function createSSO(config, fetch2 = window.fetch) {
  return new EveSSOAuth(config, fetch2);
}
const BASE_URI = "https://login.eveonline.com/";
const AUTHORIZE_PATH = "/v2/oauth/authorize";
const TOKEN_PATH = "/v2/oauth/token";
const REVOKE_PATH = "/v2/oauth/revoke";
const JWKS_URL = "https://login.eveonline.com/oauth/jwks";
class EveSSOAuth {
  constructor(config, fetchParam = window.fetch) {
    __publicField$1(this, "config");
    __publicField$1(this, "publicKey");
    __publicField$1(this, "fetch");
    this.fetch = fetchParam.bind(window);
    this.config = config;
  }
  async generateState() {
    return await getRandomString(8);
  }
  async generateCodeVerifier() {
    return await getRandomString(64);
  }
  async generateCodeChallenge(codeVerifier) {
    return await createHash(codeVerifier);
  }
  async _getJWKKeyData() {
    try {
      const response = await fetch(JWKS_URL);
      return await response.json();
    } catch (error) {
      console.log("There was an error retreiving JWK data", error);
    }
  }
  async getPublicKey() {
    if (this.publicKey === void 0) {
      try {
        const jwks = await this._getJWKKeyData();
        if (jwks !== null) {
          const key = jwks.keys.find((x) => x.alg === "RS256");
          this.publicKey = await importJWK(key);
          return this.publicKey;
        } else {
          throw new Error("There was a problem obtaining public key");
        }
      } catch (error) {
        console.log("There was an error retreiving the public key:", error);
      }
    }
    return this.publicKey;
  }
  async getUri(scope = []) {
    const state = await this.generateState();
    const codeVerifier = await this.generateCodeVerifier();
    const codeChallenge = await this.generateCodeChallenge(codeVerifier);
    const url = new URL(AUTHORIZE_PATH, BASE_URI);
    url.searchParams.append("response_type", "code");
    url.searchParams.append("redirect_uri", this.config.redirectUri);
    url.searchParams.append("client_id", this.config.clientId);
    url.searchParams.append("code_challenge", codeChallenge);
    url.searchParams.append("code_challenge_method", "S256");
    url.searchParams.append("scope", scope.join(" "));
    url.searchParams.append("state", state);
    return {
      uri: url.toString(),
      state,
      codeVerifier
    };
  }
  async verifyToken(token) {
    const publicKey = await this.getPublicKey();
    const { payload } = await jwtVerify(token.access_token, publicKey, {
      issuer: "login.eveonline.com"
    });
    token.payload = payload;
    return token;
  }
  async _fetchToken(url, init) {
    return await this.fetch(url, init);
  }
  async getAccessToken(code, codeVerifier) {
    try {
      const form = new URLSearchParams();
      form.append("grant_type", "authorization_code");
      form.append("code", code);
      form.append("client_id", this.config.clientId);
      form.append("code_verifier", codeVerifier);
      const url = new URL(TOKEN_PATH, BASE_URI).toString();
      const response = await this._fetchToken(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Host: "login.eveonline.com"
        },
        body: form
      });
      const token = await this.verifyToken(await response.json());
      return token;
    } catch (error) {
      console.log("There was an error retreiving the token:", error);
      throw error;
    }
  }
  async refreshToken(refreshToken, scopes) {
    try {
      const form = new URLSearchParams();
      form.append("grant_type", "refresh_token");
      form.append("refresh_token", refreshToken);
      form.append("client_id", this.config.clientId);
      if (scopes !== void 0)
        form.append("scope", scopes.join(" "));
      const url = new URL(TOKEN_PATH, BASE_URI).toString();
      const response = await this._fetchToken(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Host: "login.eveonline.com"
        },
        body: form
      });
      const token = await this.verifyToken(await response.json());
      return token;
    } catch (error) {
      console.log("There was an error retreiving the token:", error);
      throw error;
    }
  }
  async revokeRefreshToken(refreshToken) {
    try {
      const form = new URLSearchParams();
      form.append("token_type_hint", "refresh_token");
      form.append("token", refreshToken);
      form.append("client_id", this.config.clientId);
      const url = new URL(REVOKE_PATH, BASE_URI).toString();
      const headers = new Headers();
      headers.set("Content-Type", "application/x-www-form-urlencoded");
      headers.set("Host", "login.eveonline.com");
      await this._fetchToken(url, {
        method: "POST",
        headers,
        body: form
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}

const SELLER_SCOPES = 'publicData esi-assets.read_assets.v1'.split(' ');

const ssoConfig = window.location.href.includes('localhost')
  ? {
      clientId: 'dc6490d2eafc421a8cc35cf0394d60d1',
      redirectUri: 'http://localhost:8888/login/return/'
    }
  : {
      clientId: '63adc68f3b214e63a79b2b612e4c4a10',
      redirectUri: 'https://abyssalboard.netlify.app/login/return/'
    };

// console.log('ssoConfig', ssoConfig)
const sso = createSSO(ssoConfig);

const triggerLoginFlow = async (useScopes) => {
  console.log('triggerLoginFlow useScopes', useScopes);
  saveData('returnUrl', window.location.href);
  clearData('codeVerifier');

  let ssoUri;
  if (useScopes) {
    ssoUri = await sso.getUri(SELLER_SCOPES);
  } else {
    ssoUri = await sso.getUri();
  }
  saveData('codeVerifier', ssoUri.codeVerifier);
  console.log('ssoUri', ssoUri);
  window.location.assign(ssoUri.uri);
};
const triggerLoginReturnFlow = async () => {
  const urlParams = new URLSearchParams(window.location.search);
  const code = urlParams.get('code');
  const state = urlParams.get('state');

  console.log('triggerLoginReturnFlow', code, state);
  if (code && state) {
    const data = loadData();
    console.log('code', code, 'state', state, 'codeVerifier', data.codeVerifier);
    const token = await sso.getAccessToken(code, data.codeVerifier);
    token.character_id = token.payload.sub.replace('CHARACTER:EVE:', '');
    console.log('token', token);
    saveData('selectedCharacter', token.character_id);
    saveData(`token-${token.character_id}`, token);
    clearData('codeVerifier');
    clearData('returnUrl');
    window.location.assign(data.returnUrl);
  } else {
    // TODO - More robust version of handling failures
    clearData('codeVerifier');
    clearData('returnUrl');
    window.alert('login failed');
  }
};

const getCurrentUserDetails = () => {
  const data = loadData();
  //   console.log('data', data)
  const characterId = data.selectedCharacter;
  if (characterId === undefined) return false
  const tokenData = data[`token-${characterId}`];
  const characterName = tokenData.payload.name;
  return { characterId, characterName }
};
const getCurrentUserAccessToken = () => {
  const data = loadData();
  const characterId = data.selectedCharacter;
  const accessToken = data[`token-${characterId}`].access_token;
  const jwt = data[`token-${characterId}`].payload;
  // console.log('getCurrentUserAccessToken', characterId)
  return { characterId, accessToken, jwt }
};
const refreshTokenAndGetNewUserAccessToken = async () => {
  const data = loadData();
  console.log('refreshTokenAndGetNewUserAccessToken');
  const characterId = data.selectedCharacter;
  const refreshToken = data[`token-${characterId}`].refresh_token;
  const newToken = await sso.refreshToken(refreshToken);
  newToken.character_id = newToken.payload.sub.replace('CHARACTER:EVE:', '');
  console.log('newToken', newToken);
  saveData(`token-${characterId}`, newToken);
  // TODO alert('refresh')
};
const switchUser = (characterId) => {
  console.log('switchUser', characterId);
  const data = loadData();
  if (data.selectedCharacter !== characterId) {
    saveData('selectedCharacter', characterId);
    window.location.reload();
  }
};

const areListsEqual = (list1, list2) => {
  const sortedList1 = list1.slice().sort().join(',');
  const sortedList2 = list2.slice().sort().join(',');
  return sortedList1 === sortedList2
};

const doesCurrentCharacterHaveSellerScope = () => {
  const data = loadData();
  const characterId = data.selectedCharacter;
  if (characterId === undefined) return false
  const scopes = data[`token-${characterId}`].payload.scp;
  if (scopes && areListsEqual(scopes, SELLER_SCOPES)) {
    return true
  } else {
    return false
  }
};
const isLoginPasswordSet = () => {
  // clearData('admin-token')
  const data = loadData();
  return data['admin-password'] !== undefined
};
const fetchWithRetry = async (url, fetchOptions, maxRetries = 3) => {
  let retries = 0;
  let response = null;
  while (retries < maxRetries) {
    try {
      const req = await window.fetch(url, fetchOptions);
      response = await req.json();
      if (response.error) {
        console.log('response.error', response.error);
        window.location.assign('/error');
        throw new Error(response.error)
      } else if (response.expired) {
        console.log('Token expired');
        await refreshTokenAndGetNewUserAccessToken();
        // TODO - load token
        const { accessToken } = getCurrentUserAccessToken();
        fetchOptions.headers.Authorization = `Bearer ${accessToken}`;
      } else {
        return response
      }
    } catch (error) {
      console.error('Error during fetch:', error);
    }
    retries++;
  }
  window.location.assign('/error');
  throw new Error('Max retries exceeded')
};

const initNav = () => {
//   console.log('initNav')
  const data = loadData();
  const { characterId, characterName } = getCurrentUserDetails();
  if (characterId !== undefined) {
    console.log('nav', characterId, characterName);

    const availableCharacters = Object.keys(data)
      .filter(key => key.startsWith('token-'))
      .map(key => { return { characterId: data[key].character_id, characterName: data[key].payload.name } });
    //   console.log('availableCharacters', availableCharacters)

    let html = '';
    html += `<a class="nav-link dropdown-toggle login-dropdown" href="#" role="button" data-bs-toggle="dropdown"
        aria-expanded="false">
        <img src="https://image.eveonline.com/Character/${characterId}_32.jpg" height="32px"
            class="avatar mr-0" id="current_character_avatar">
        <span class="align-middle">${characterName}</span>
    </a>
    <ul class="dropdown-menu dropdown-menu-end">`;
    for (const availableCharacter of availableCharacters) {
      html += `
        <li>
            <button class="dropdown-item switch-user" type="button" character-id="${availableCharacter.characterId}">
                <img src="https://image.eveonline.com/Character/${availableCharacter.characterId}_32.jpg" height="32px"
                    class="avatar mr-0" id="current_character_avatar">
                <span class="align-middle">${availableCharacter.characterName}</span>
            </button>
        </li>`;
    }
    html += `
        <li>
            <button class="dropdown-item login" type="button">
                <span class="align-middle" id="current_character_name">Add character</span><br/>
                <img src="https://web.ccpgamescdn.com/eveonlineassets/developers/eve-sso-login-white-small.png"
                    alt="EVE SSO Login Buttons Small Black">
            </button>
        </li>
    </ul>`;

    document.querySelector('.nav-dropdown-holder').innerHTML = html;

    // eslint-disable-next-line no-new
    new window.bootstrap.Dropdown(document.querySelector('.dropdown-toggle.login-dropdown'));

    for (const switchUserBtn of [...document.querySelectorAll('.switch-user')]) {
      switchUserBtn.addEventListener('click', function () {
        const characterId = this.getAttribute('character-id');
        //   console.log('switchUserBtn', characterId)
        switchUser(characterId);
      });
    }
  }

  document.querySelector('.login').addEventListener('click', () => {
    // console.log('login')
    triggerLoginFlow();
  });
};

const API_ROOT = '';// 'http://localhost:3001'
let appConfig;
// Example usage:
const getCurrentSellerInventory = async () => {
  const { characterId } = getCurrentUserAccessToken();
  return getSellerInventory(characterId)
};
const getSellerInventory = async (characterId) => {
  const { accessToken } = getCurrentUserAccessToken();
  const url = `${API_ROOT}/api/seller/${characterId}/inventory`;

  const res = await fetchWithRetry(url, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`
    }
  });
  // console.log('getSellerInventory', characterId, accessToken, res)
  return res
};
const getCurrentSellerPayments = async () => {
  const { accessToken } = getCurrentUserAccessToken();
  const url = `${API_ROOT}/api/seller/@me/payments`;
  const res = await fetchWithRetry(url, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`
    }
  });
  for (const p of res) {
    p.creationDate = new Date(p.creationDate);
  }
  res.sort((a, b) => b.creationDate - a.creationDate);
  return res
};

const getAppConfig = async (forceRefresh) => {
  if (appConfig !== undefined && !forceRefresh) return appConfig
  const req = await window.fetch(`${API_ROOT}/api/app-config`);
  const res = await req.json();
  appConfig = res;
  console.log('appConfig', appConfig);
  return appConfig
};
const getAppConfigAdmin = async () => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/app-config/admin`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const res = await req.json();
  return res
};
const setAppConfig = async (newAppConfig) => {
  const data = loadData();
  console.log('setAppConfig', newAppConfig);
  const req = await window.fetch(`${API_ROOT}/api/app-config`, {
    method: 'POST',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    },
    body: JSON.stringify(newAppConfig)
  });
  appConfig = await req.json();
};
const getAppAuth = async () => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/app-auth`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const appAuth = await req.json();
  console.log('getAppAuth', appAuth);
  return appAuth
};

const initiateListingFlow = async (inventoryItems) => {
  const { accessToken } = getCurrentUserAccessToken();
  const url = `${API_ROOT}/api/listing`;

  const req = await window.fetch(url, {
    method: 'POST',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`
    },
    body: JSON.stringify(inventoryItems)
  });
  const res = await req.json();
  console.log('initialListing res', res);
  return res
};
const cancelListing = async (itemID) => {
  const { accessToken } = getCurrentUserAccessToken();
  const url = `${API_ROOT}/api/listing/${itemID}`;

  const req = await window.fetch(url, {
    method: 'DELETE',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`
    }
  });
  const res = await req.json();
  console.log('cancelListing res', res);
  return res
};
const amendListing = async (itemID, amend) => {
  const { accessToken } = getCurrentUserAccessToken();
  const url = `${API_ROOT}/api/listing/${itemID}`;

  const req = await window.fetch(url, {
    method: 'PATCH',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `Bearer ${accessToken}`
    },
    body: JSON.stringify(amend)
  });
  const res = await req.json();
  console.log('amendListing res', res);
  return res
};
const getSSOAdminLoginUrl = async () => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/sso/login`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const res = await req.json();
  console.log('getSSOAdminLoginUrl', res);
  return res.loginUrl
};
const triggerPeriodicAdminTask = async () => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/admin-task`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const res = await req.json();
  console.log('triggerPeriodicAdminTask', res);
};
const getPendingPaymentsAdmin = async (filter) => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/payments/pending`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    },
    body: JSON.stringify(filter)
  });
  const res = await req.json();
  console.log('getPendingPaymentsAdmin', res);
  for (const p of res) {
    p.creationDate = new Date(p.creationDate).toLocaleString(); // Not easily sortable...
  }
  return res
};
const getCompletePaymentsAdmin = async (filter) => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/payments/complete`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    },
    body: JSON.stringify(filter)
  });
  const res = await req.json();
  console.log('getCompletePaymentsAdmin', res);
  return res
};
const getJournalAdmin = async (filter) => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/journal`, {
    method: 'GET',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const res = await req.json();
  for (const p of res.journal) {
    p.date = new Date(p.date).toLocaleString(); // Not easily sortable...
  }
  res.lastModified = new Date(res.lastModified);
  console.log('getJournalAdmin', res);
  return res
};
const cancelPayment = async (paymentId) => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/payments/${paymentId}`, {
    method: 'DELETE',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    }
  });
  const res = await req.json();
  console.log('cancelPayment', res);
  return res
};

const updatePayment = async (paymentId, update) => {
  const data = loadData();
  const req = await window.fetch(`${API_ROOT}/api/payments/${paymentId}`, {
    method: 'PATCH',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      Authorization: `${data['admin-password']}`
    },
    body: JSON.stringify(update)
  });
  const res = await req.json();
  console.log('updatePayment', res);
  return res
};

const renderAdminHeader = () => {
  return `<ul class="nav nav-underline mb-3">
  <li class="nav-item">
    <a class="nav-link${window.location.pathname === '/admin' ? ' active disabled' : ''}" href="/admin">Admin Config</a>
  </li>
  <li class="nav-item">
    <a class="nav-link${window.location.pathname === '/admin/payments-pending' ? ' active disabled' : ''}" href="/admin/payments-pending">Pending Payments</a>
  </li>
  <li class="nav-item">
    <a class="nav-link${window.location.pathname === '/admin/payments-complete' ? ' active disabled' : ''}" href="/admin/payments-complete">Completed Payments</a>
  </li>
  <li class="nav-item">
    <a class="nav-link${window.location.pathname === '/admin/journal' ? ' active disabled' : ''}" href="/admin/journal">Corp Journal</a>
  </li>
</ul>
`
};

const renderAdminLogin = () => {
  let html = '';
  html += `
    <div class="container">
        <div class="row">
            <div class="col">
                <h3>Admin Login</h3>
                <form class="row gx-3 gy-2 align-items-center password-form">
                    <div class="col-sm-3">
                        <input type="text" class="form-control password" placeholder="Admin password">
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </form>
            </div>
        </div>
    </div>`;
  document.querySelector('.content').innerHTML = html;

  document.querySelector('.password-form').addEventListener('submit', function (event) {
    event.preventDefault();
    const password = document.querySelector('.password-form .password').value;
    saveData('admin-password', password);
    console.log('event', event, password);
    initAdmin();
  });
};
const renderAdminDetails = (appAuth, appConfig, adminToken) => {
  let html = '';
  html += `
        <div class="container pt-3">
            <div class="row">
                <div class="col">
                    ${renderAdminHeader()}
                    <form class="admin-form">
                        <div class="row">
                            <div class="col">
                                <h5>App Auth</h5>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="characterId" class="col-sm-2 col-form-label">Character Id</label>
                            <div class="col-sm-4">
                              <input type="text" class="form-control" id="characterId" value="${appAuth.characterId}" disabled>
                            </div>
                            <div class="col-sm-4">
                              <button type="button" class="btn btn-primary login-sso">Update with Admin SSO</button>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="characterName" class="col-sm-2 col-form-label">Character Name</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="characterName" value="${appAuth.characterName}" disabled>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="corpId" class="col-sm-2 col-form-label">Corp Id</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="corpId" value="${appAuth.corpId}" disabled>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="corpName" class="col-sm-2 col-form-label">Corp Name</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="corpName" value="${appAuth.corpName}" disabled>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label for="accessToken" class="col-sm-2 col-form-label">Access Token</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="accessToken" value="${appAuth.accessToken}" disabled>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="refreshToken" class="col-sm-2 col-form-label">Refresh Token</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="refreshToken" value="${appAuth.refreshToken}" disabled>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                <h5>App Config</h5>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="listingPrice" class="col-sm-2 col-form-label">Listing Price</label>
                            <div class="col-sm-4">
                              <input type="text" class="form-control" id="listingPrice" value="${appConfig.listingPrice}">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="corpDivision" class="col-sm-2 col-form-label">Corp Wallet Division ID</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="corpDivisionId" value="${appConfig.corpDivisionId}">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="corpDivision" class="col-sm-2 col-form-label">Corp Wallet Division Name</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="corpDivisionName" value="${appConfig.corpDivisionName}">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <label for="corpDivision" class="col-sm-2 col-form-label">Discord URL</label>
                            <div class="col-sm-4">
                                <input type="text" class="form-control" id="discordUrl" value="${appConfig.discordUrl}">
                            </div>
                        </div>
                        <div class="row mb-3">
                          <div class="col-sm-6">
                            <button type="submit" class="btn btn-primary save float-end">Save</button>
                          </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>`;
  document.querySelector('.content').innerHTML = html;
  document.querySelector('.admin-form').addEventListener('submit', async function (event) {
    event.preventDefault();

    const newAppConfig = {
      listingPrice: parseInt(document.querySelector('#listingPrice').value),
      corpDivisionId: parseInt(document.querySelector('#corpDivisionId').value),
      corpDivisionName: document.querySelector('#corpDivisionName').value,
      discordUrl: document.querySelector('#discordUrl').value
    };
    await setAppConfig(newAppConfig);
  });

  document.querySelector('.admin-form .login-sso').addEventListener('click', async function (event) {
    console.log('login-sso');

    const loginUrl = await getSSOAdminLoginUrl();
    console.log('loginUrl', loginUrl);
    window.location.assign(loginUrl);
  });
  const transferSsoEle = document.querySelector('.admin-form .transfer-sso');
  if (transferSsoEle) {
    transferSsoEle.addEventListener('click', function (event) {
      console.log('transferSsoEle');
      document.querySelector('#characterId').value = document.querySelector('#characterId-sso').value;
      document.querySelector('#characterName').value = document.querySelector('#characterName-sso').value;
      document.querySelector('#corpId').value = document.querySelector('#corpId-sso').value;
      document.querySelector('#corpName').value = document.querySelector('#corpName-sso').value;
      document.querySelector('#accessToken').value = document.querySelector('#accessToken-sso').value;
      document.querySelector('#refreshToken').value = document.querySelector('#refreshToken-sso').value;
    });
  }
};
const initAdmin = async () => {
  console.log('initAdmin');
  //   clearData('admin-password')
  if (isLoginPasswordSet()) {
    console.log('initAdmin - LOGGED IN');
    const appAuth = await getAppAuth();
    console.log('appAuth', appAuth);
    if (appAuth.error) {
      console.log('BAD LOGIN', appAuth);
      clearData('admin-password');
      initAdmin();
    } else {
      const appConfig = await getAppConfigAdmin();
      console.log('LOGGED IN!!! DATA', appAuth, appConfig);
      const data = loadData();
      renderAdminDetails(appAuth, appConfig, data['admin-token']);
      await triggerPeriodicAdminTask();
    }
    // TODO is null, password is bad, clear password and reload page
  } else {
    console.log('initAdmin - NOT LOGGED IN');
    // triggerAdminLoginFlow()
    renderAdminLogin();
  }
};

function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,"symbol"==typeof(o=function(t,n){if("object"!=typeof t||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var r=e.call(t,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key))?o:String(o),r);}var o;}function n(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),Object.defineProperty(n,"prototype",{writable:!1}),n}function e(){return e=Object.assign?Object.assign.bind():function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);}return t},e.apply(this,arguments)}function r(t,n){t.prototype=Object.create(n.prototype),t.prototype.constructor=t,o(t,n);}function o(t,n){return o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,n){return t.__proto__=n,t},o(t,n)}function i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function u(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function s(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(e)return (e=e.call(t)).next.bind(e);if(Array.isArray(t)||(e=function(t,n){if(t){if("string"==typeof t)return u(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return "Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?u(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0;return function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a;!function(t){t[t.Init=0]="Init",t[t.Loading=1]="Loading",t[t.Loaded=2]="Loaded",t[t.Rendered=3]="Rendered",t[t.Error=4]="Error";}(a||(a={}));var l,c,f,p,d,h,_,m={},v=[],g=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function y(t,n){for(var e in n)t[e]=n[e];return t}function b(t){var n=t.parentNode;n&&n.removeChild(t);}function w(t,n,e){var r,o,i,u={};for(i in n)"key"==i?r=n[i]:"ref"==i?o=n[i]:u[i]=n[i];if(arguments.length>2&&(u.children=arguments.length>3?l.call(arguments,2):e),"function"==typeof t&&null!=t.defaultProps)for(i in t.defaultProps)void 0===u[i]&&(u[i]=t.defaultProps[i]);return x(t,u,r,o,null)}function x(t,n,e,r,o){var i={type:t,props:n,key:e,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++f:o};return null==o&&null!=c.vnode&&c.vnode(i),i}function S(t){return t.children}function N(t,n){this.props=t,this.context=n;}function C(t,n){if(null==n)return t.__?C(t.__,t.__.__k.indexOf(t)+1):null;for(var e;n<t.__k.length;n++)if(null!=(e=t.__k[n])&&null!=e.__e)return e.__e;return "function"==typeof t.type?C(t):null}function P(t){var n,e;if(null!=(t=t.__)&&null!=t.__c){for(t.__e=t.__c.base=null,n=0;n<t.__k.length;n++)if(null!=(e=t.__k[n])&&null!=e.__e){t.__e=t.__c.base=e.__e;break}return P(t)}}function E(t){(!t.__d&&(t.__d=!0)&&d.push(t)&&!I.__r++||h!==c.debounceRendering)&&((h=c.debounceRendering)||setTimeout)(I);}function I(){for(var t;I.__r=d.length;)t=d.sort(function(t,n){return t.__v.__b-n.__v.__b}),d=[],t.some(function(t){var n,e,r,o,i,u;t.__d&&(i=(o=(n=t).__v).__e,(u=n.__P)&&(e=[],(r=y({},o)).__v=o.__v+1,F(u,o,r,n.__n,void 0!==u.ownerSVGElement,null!=o.__h?[i]:null,e,null==i?C(o):i,o.__h),O(e,o),o.__e!=i&&P(o)));});}function T(t,n,e,r,o,i,u,s,a,l){var c,f,p,d,h,_,g,y=r&&r.__k||v,b=y.length;for(e.__k=[],c=0;c<n.length;c++)if(null!=(d=e.__k[c]=null==(d=n[c])||"boolean"==typeof d?null:"string"==typeof d||"number"==typeof d||"bigint"==typeof d?x(null,d,null,null,d):Array.isArray(d)?x(S,{children:d},null,null,null):d.__b>0?x(d.type,d.props,d.key,d.ref?d.ref:null,d.__v):d)){if(d.__=e,d.__b=e.__b+1,null===(p=y[c])||p&&d.key==p.key&&d.type===p.type)y[c]=void 0;else for(f=0;f<b;f++){if((p=y[f])&&d.key==p.key&&d.type===p.type){y[f]=void 0;break}p=null;}F(t,d,p=p||m,o,i,u,s,a,l),h=d.__e,(f=d.ref)&&p.ref!=f&&(g||(g=[]),p.ref&&g.push(p.ref,null,d),g.push(f,d.__c||h,d)),null!=h?(null==_&&(_=h),"function"==typeof d.type&&d.__k===p.__k?d.__d=a=L(d,a,t):a=A(t,d,p,y,h,a),"function"==typeof e.type&&(e.__d=a)):a&&p.__e==a&&a.parentNode!=t&&(a=C(p));}for(e.__e=_,c=b;c--;)null!=y[c]&&W(y[c],y[c]);if(g)for(c=0;c<g.length;c++)U(g[c],g[++c],g[++c]);}function L(t,n,e){for(var r,o=t.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=t,n="function"==typeof r.type?L(r,n,e):A(e,r,r,o,r.__e,n));return n}function A(t,n,e,r,o,i){var u,s,a;if(void 0!==n.__d)u=n.__d,n.__d=void 0;else if(null==e||o!=i||null==o.parentNode)t:if(null==i||i.parentNode!==t)t.appendChild(o),u=null;else {for(s=i,a=0;(s=s.nextSibling)&&a<r.length;a+=1)if(s==o)break t;t.insertBefore(o,i),u=i;}return void 0!==u?u:o.nextSibling}function H(t,n,e){"-"===n[0]?t.setProperty(n,e):t[n]=null==e?"":"number"!=typeof e||g.test(n)?e:e+"px";}function j(t,n,e,r,o){var i;t:if("style"===n)if("string"==typeof e)t.style.cssText=e;else {if("string"==typeof r&&(t.style.cssText=r=""),r)for(n in r)e&&n in e||H(t.style,n,"");if(e)for(n in e)r&&e[n]===r[n]||H(t.style,n,e[n]);}else if("o"===n[0]&&"n"===n[1])i=n!==(n=n.replace(/Capture$/,"")),n=n.toLowerCase()in t?n.toLowerCase().slice(2):n.slice(2),t.l||(t.l={}),t.l[n+i]=e,e?r||t.addEventListener(n,i?M:D,i):t.removeEventListener(n,i?M:D,i);else if("dangerouslySetInnerHTML"!==n){if(o)n=n.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==n&&"list"!==n&&"form"!==n&&"tabIndex"!==n&&"download"!==n&&n in t)try{t[n]=null==e?"":e;break t}catch(t){}"function"==typeof e||(null==e||!1===e&&-1==n.indexOf("-")?t.removeAttribute(n):t.setAttribute(n,e));}}function D(t){this.l[t.type+!1](c.event?c.event(t):t);}function M(t){this.l[t.type+!0](c.event?c.event(t):t);}function F(t,n,e,r,o,i,u,s,a){var l,f,p,d,h,_,m,v,g,b,w,x,k,C,P,E=n.type;if(void 0!==n.constructor)return null;null!=e.__h&&(a=e.__h,s=n.__e=e.__e,n.__h=null,i=[s]),(l=c.__b)&&l(n);try{t:if("function"==typeof E){if(v=n.props,g=(l=E.contextType)&&r[l.__c],b=l?g?g.props.value:l.__:r,e.__c?m=(f=n.__c=e.__c).__=f.__E:("prototype"in E&&E.prototype.render?n.__c=f=new E(v,b):(n.__c=f=new N(v,b),f.constructor=E,f.render=B),g&&g.sub(f),f.props=v,f.state||(f.state={}),f.context=b,f.__n=r,p=f.__d=!0,f.__h=[],f._sb=[]),null==f.__s&&(f.__s=f.state),null!=E.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=y({},f.__s)),y(f.__s,E.getDerivedStateFromProps(v,f.__s))),d=f.props,h=f.state,p)null==E.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else {if(null==E.getDerivedStateFromProps&&v!==d&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(v,b),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(v,f.__s,b)||n.__v===e.__v){for(f.props=v,f.state=f.__s,n.__v!==e.__v&&(f.__d=!1),f.__v=n,n.__e=e.__e,n.__k=e.__k,n.__k.forEach(function(t){t&&(t.__=n);}),w=0;w<f._sb.length;w++)f.__h.push(f._sb[w]);f._sb=[],f.__h.length&&u.push(f);break t}null!=f.componentWillUpdate&&f.componentWillUpdate(v,f.__s,b),null!=f.componentDidUpdate&&f.__h.push(function(){f.componentDidUpdate(d,h,_);});}if(f.context=b,f.props=v,f.__v=n,f.__P=t,x=c.__r,k=0,"prototype"in E&&E.prototype.render){for(f.state=f.__s,f.__d=!1,x&&x(n),l=f.render(f.props,f.state,f.context),C=0;C<f._sb.length;C++)f.__h.push(f._sb[C]);f._sb=[];}else do{f.__d=!1,x&&x(n),l=f.render(f.props,f.state,f.context),f.state=f.__s;}while(f.__d&&++k<25);f.state=f.__s,null!=f.getChildContext&&(r=y(y({},r),f.getChildContext())),p||null==f.getSnapshotBeforeUpdate||(_=f.getSnapshotBeforeUpdate(d,h)),P=null!=l&&l.type===S&&null==l.key?l.props.children:l,T(t,Array.isArray(P)?P:[P],n,e,r,o,i,u,s,a),f.base=n.__e,n.__h=null,f.__h.length&&u.push(f),m&&(f.__E=f.__=null),f.__e=!1;}else null==i&&n.__v===e.__v?(n.__k=e.__k,n.__e=e.__e):n.__e=R(e.__e,n,e,r,o,i,u,a);(l=c.diffed)&&l(n);}catch(t){n.__v=null,(a||null!=i)&&(n.__e=s,n.__h=!!a,i[i.indexOf(s)]=null),c.__e(t,n,e);}}function O(t,n){c.__c&&c.__c(n,t),t.some(function(n){try{t=n.__h,n.__h=[],t.some(function(t){t.call(n);});}catch(t){c.__e(t,n.__v);}});}function R(t,n,e,r,o,i,u,s){var a,c,f,p=e.props,d=n.props,h=n.type,_=0;if("svg"===h&&(o=!0),null!=i)for(;_<i.length;_++)if((a=i[_])&&"setAttribute"in a==!!h&&(h?a.localName===h:3===a.nodeType)){t=a,i[_]=null;break}if(null==t){if(null===h)return document.createTextNode(d);t=o?document.createElementNS("http://www.w3.org/2000/svg",h):document.createElement(h,d.is&&d),i=null,s=!1;}if(null===h)p===d||s&&t.data===d||(t.data=d);else {if(i=i&&l.call(t.childNodes),c=(p=e.props||m).dangerouslySetInnerHTML,f=d.dangerouslySetInnerHTML,!s){if(null!=i)for(p={},_=0;_<t.attributes.length;_++)p[t.attributes[_].name]=t.attributes[_].value;(f||c)&&(f&&(c&&f.__html==c.__html||f.__html===t.innerHTML)||(t.innerHTML=f&&f.__html||""));}if(function(t,n,e,r,o){var i;for(i in e)"children"===i||"key"===i||i in n||j(t,i,null,e[i],r);for(i in n)o&&"function"!=typeof n[i]||"children"===i||"key"===i||"value"===i||"checked"===i||e[i]===n[i]||j(t,i,n[i],e[i],r);}(t,d,p,o,s),f)n.__k=[];else if(_=n.props.children,T(t,Array.isArray(_)?_:[_],n,e,r,o&&"foreignObject"!==h,i,u,i?i[0]:e.__k&&C(e,0),s),null!=i)for(_=i.length;_--;)null!=i[_]&&b(i[_]);s||("value"in d&&void 0!==(_=d.value)&&(_!==t.value||"progress"===h&&!_||"option"===h&&_!==p.value)&&j(t,"value",_,p.value,!1),"checked"in d&&void 0!==(_=d.checked)&&_!==t.checked&&j(t,"checked",_,p.checked,!1));}return t}function U(t,n,e){try{"function"==typeof t?t(n):t.current=n;}catch(t){c.__e(t,e);}}function W(t,n,e){var r,o;if(c.unmount&&c.unmount(t),(r=t.ref)&&(r.current&&r.current!==t.__e||U(r,null,n)),null!=(r=t.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount();}catch(t){c.__e(t,n);}r.base=r.__P=null,t.__c=void 0;}if(r=t.__k)for(o=0;o<r.length;o++)r[o]&&W(r[o],n,e||"function"!=typeof t.type);e||null==t.__e||b(t.__e),t.__=t.__e=t.__d=void 0;}function B(t,n,e){return this.constructor(t,e)}function q(t,n,e){var r,o,i;c.__&&c.__(t,n),o=(r="function"==typeof e)?null:e&&e.__k||n.__k,i=[],F(n,t=(!r&&e||n).__k=w(S,null,[t]),o||m,m,void 0!==n.ownerSVGElement,!r&&e?[e]:o?null:n.firstChild?l.call(n.childNodes):null,i,!r&&e?e:o?o.__e:n.firstChild,r),O(i,t);}function z(){return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=16*Math.random()|0;return ("x"==t?n:3&n|8).toString(16)})}l=v.slice,c={__e:function(t,n,e,r){for(var o,i,u;n=n.__;)if((o=n.__c)&&!o.__)try{if((i=o.constructor)&&null!=i.getDerivedStateFromError&&(o.setState(i.getDerivedStateFromError(t)),u=o.__d),null!=o.componentDidCatch&&(o.componentDidCatch(t,r||{}),u=o.__d),u)return o.__E=o}catch(n){t=n;}throw t}},f=0,p=function(t){return null!=t&&void 0===t.constructor},N.prototype.setState=function(t,n){var e;e=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=y({},this.state),"function"==typeof t&&(t=t(y({},e),this.props)),t&&y(e,t),null!=t&&this.__v&&(n&&this._sb.push(n),E(this));},N.prototype.forceUpdate=function(t){this.__v&&(this.__e=!0,t&&this.__h.push(t),E(this));},N.prototype.render=S,d=[],I.__r=0,_=0;var V=/*#__PURE__*/function(){function t(t){this._id=void 0,this._id=t||z();}return n(t,[{key:"id",get:function(){return this._id}}]),t}();function $(t){return w(t.parentElement||"span",{dangerouslySetInnerHTML:{__html:t.content}})}function G(t,n){return w($,{content:t,parentElement:n})}var K,X=/*#__PURE__*/function(t){function n(n){var e;return (e=t.call(this)||this).data=void 0,e.update(n),e}r(n,t);var e=n.prototype;return e.cast=function(t){return t instanceof HTMLElement?G(t.outerHTML):t},e.update=function(t){return this.data=this.cast(t),this},n}(V),Z=/*#__PURE__*/function(t){function e(n){var e;return (e=t.call(this)||this)._cells=void 0,e.cells=n||[],e}r(e,t);var o=e.prototype;return o.cell=function(t){return this._cells[t]},o.toArray=function(){return this.cells.map(function(t){return t.data})},e.fromCells=function(t){return new e(t.map(function(t){return new X(t.data)}))},n(e,[{key:"cells",get:function(){return this._cells},set:function(t){this._cells=t;}},{key:"length",get:function(){return this.cells.length}}]),e}(V),J=/*#__PURE__*/function(t){function e(n){var e;return (e=t.call(this)||this)._rows=void 0,e._length=void 0,e.rows=n instanceof Array?n:n instanceof Z?[n]:[],e}return r(e,t),e.prototype.toArray=function(){return this.rows.map(function(t){return t.toArray()})},e.fromRows=function(t){return new e(t.map(function(t){return Z.fromCells(t.cells)}))},e.fromArray=function(t){return new e((t=function(t){return !t[0]||t[0]instanceof Array?t:[t]}(t)).map(function(t){return new Z(t.map(function(t){return new X(t)}))}))},n(e,[{key:"rows",get:function(){return this._rows},set:function(t){this._rows=t;}},{key:"length",get:function(){return this._length||this.rows.length},set:function(t){this._length=t;}}]),e}(V),Q=/*#__PURE__*/function(){function t(){this.callbacks=void 0;}var n=t.prototype;return n.init=function(t){this.callbacks||(this.callbacks={}),t&&!this.callbacks[t]&&(this.callbacks[t]=[]);},n.listeners=function(){return this.callbacks},n.on=function(t,n){return this.init(t),this.callbacks[t].push(n),this},n.off=function(t,n){var e=t;return this.init(),this.callbacks[e]&&0!==this.callbacks[e].length?(this.callbacks[e]=this.callbacks[e].filter(function(t){return t!=n}),this):this},n.emit=function(t){var n=arguments,e=t;return this.init(e),this.callbacks[e].length>0&&(this.callbacks[e].forEach(function(t){return t.apply(void 0,[].slice.call(n,1))}),!0)},t}();!function(t){t[t.Initiator=0]="Initiator",t[t.ServerFilter=1]="ServerFilter",t[t.ServerSort=2]="ServerSort",t[t.ServerLimit=3]="ServerLimit",t[t.Extractor=4]="Extractor",t[t.Transformer=5]="Transformer",t[t.Filter=6]="Filter",t[t.Sort=7]="Sort",t[t.Limit=8]="Limit";}(K||(K={}));var Y=/*#__PURE__*/function(t){function e(n){var e;return (e=t.call(this)||this).id=void 0,e._props=void 0,e._props={},e.id=z(),n&&e.setProps(n),e}r(e,t);var o=e.prototype;return o.process=function(){var t=[].slice.call(arguments);this.validateProps instanceof Function&&this.validateProps.apply(this,t),this.emit.apply(this,["beforeProcess"].concat(t));var n=this._process.apply(this,t);return this.emit.apply(this,["afterProcess"].concat(t)),n},o.setProps=function(t){return Object.assign(this._props,t),this.emit("propsUpdated",this),this},n(e,[{key:"props",get:function(){return this._props}}]),e}(Q),tt=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}return r(e,t),e.prototype._process=function(t){return this.props.keyword?(n=String(this.props.keyword).trim(),e=this.props.columns,r=this.props.ignoreHiddenColumns,o=t,i=this.props.selector,n=n.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),new J(o.rows.filter(function(t,o){return t.cells.some(function(t,u){if(!t)return !1;if(r&&e&&e[u]&&"object"==typeof e[u]&&e[u].hidden)return !1;var s="";if("function"==typeof i)s=i(t.data,o,u);else if("object"==typeof t.data){var a=t.data;a&&a.props&&a.props.content&&(s=a.props.content);}else s=String(t.data);return new RegExp(n,"gi").test(s)})}))):t;var n,e,r,o,i;},n(e,[{key:"type",get:function(){return K.Filter}}]),e}(Y);function nt(){var t="gridjs";return ""+t+[].slice.call(arguments).reduce(function(t,n){return t+"-"+n},"")}function et(){return [].slice.call(arguments).map(function(t){return t?t.toString():""}).filter(function(t){return t}).reduce(function(t,n){return (t||"")+" "+n},"").trim()}var rt,ot,it,ut,st=/*#__PURE__*/function(t){function o(){return t.apply(this,arguments)||this}return r(o,t),o.prototype._process=function(t){if(!this.props.keyword)return t;var n={};return this.props.url&&(n.url=this.props.url(t.url,this.props.keyword)),this.props.body&&(n.body=this.props.body(t.body,this.props.keyword)),e({},t,n)},n(o,[{key:"type",get:function(){return K.ServerFilter}}]),o}(Y),at=0,lt=[],ct=[],ft=c.__b,pt=c.__r,dt=c.diffed,ht=c.__c,_t=c.unmount;function mt(t,n){c.__h&&c.__h(ot,t,at||n),at=0;var e=ot.__H||(ot.__H={__:[],__h:[]});return t>=e.__.length&&e.__.push({__V:ct}),e.__[t]}function vt(t){return at=1,function(t,n,e){var r=mt(rt++,2);if(r.t=t,!r.__c&&(r.__=[Pt(void 0,n),function(t){var n=r.__N?r.__N[0]:r.__[0],e=r.t(n,t);n!==e&&(r.__N=[e,r.__[1]],r.__c.setState({}));}],r.__c=ot,!ot.u)){ot.u=!0;var o=ot.shouldComponentUpdate;ot.shouldComponentUpdate=function(t,n,e){if(!r.__c.__H)return !0;var i=r.__c.__H.__.filter(function(t){return t.__c});if(i.every(function(t){return !t.__N}))return !o||o.call(this,t,n,e);var u=!1;return i.forEach(function(t){if(t.__N){var n=t.__[0];t.__=t.__N,t.__N=void 0,n!==t.__[0]&&(u=!0);}}),!(!u&&r.__c.props===t)&&(!o||o.call(this,t,n,e))};}return r.__N||r.__}(Pt,t)}function gt(t,n){var e=mt(rt++,3);!c.__s&&Ct(e.__H,n)&&(e.__=t,e.i=n,ot.__H.__h.push(e));}function yt(t){return at=5,bt(function(){return {current:t}},[])}function bt(t,n){var e=mt(rt++,7);return Ct(e.__H,n)?(e.__V=t(),e.i=n,e.__h=t,e.__V):e.__}function wt(){for(var t;t=lt.shift();)if(t.__P&&t.__H)try{t.__H.__h.forEach(St),t.__H.__h.forEach(Nt),t.__H.__h=[];}catch(n){t.__H.__h=[],c.__e(n,t.__v);}}c.__b=function(t){ot=null,ft&&ft(t);},c.__r=function(t){pt&&pt(t),rt=0;var n=(ot=t.__c).__H;n&&(it===ot?(n.__h=[],ot.__h=[],n.__.forEach(function(t){t.__N&&(t.__=t.__N),t.__V=ct,t.__N=t.i=void 0;})):(n.__h.forEach(St),n.__h.forEach(Nt),n.__h=[])),it=ot;},c.diffed=function(t){dt&&dt(t);var n=t.__c;n&&n.__H&&(n.__H.__h.length&&(1!==lt.push(n)&&ut===c.requestAnimationFrame||((ut=c.requestAnimationFrame)||kt)(wt)),n.__H.__.forEach(function(t){t.i&&(t.__H=t.i),t.__V!==ct&&(t.__=t.__V),t.i=void 0,t.__V=ct;})),it=ot=null;},c.__c=function(t,n){n.some(function(t){try{t.__h.forEach(St),t.__h=t.__h.filter(function(t){return !t.__||Nt(t)});}catch(e){n.some(function(t){t.__h&&(t.__h=[]);}),n=[],c.__e(e,t.__v);}}),ht&&ht(t,n);},c.unmount=function(t){_t&&_t(t);var n,e=t.__c;e&&e.__H&&(e.__H.__.forEach(function(t){try{St(t);}catch(t){n=t;}}),e.__H=void 0,n&&c.__e(n,e.__v));};var xt="function"==typeof requestAnimationFrame;function kt(t){var n,e=function(){clearTimeout(r),xt&&cancelAnimationFrame(n),setTimeout(t);},r=setTimeout(e,100);xt&&(n=requestAnimationFrame(e));}function St(t){var n=ot,e=t.__c;"function"==typeof e&&(t.__c=void 0,e()),ot=n;}function Nt(t){var n=ot;t.__c=t.__(),ot=n;}function Ct(t,n){return !t||t.length!==n.length||n.some(function(n,e){return n!==t[e]})}function Pt(t,n){return "function"==typeof n?n(t):n}function Et(){return function(t){var n=ot.context[t.__c],e=mt(rt++,9);return e.c=t,n?(null==e.__&&(e.__=!0,n.sub(ot)),n.props.value):t.__}(cn)}var It={search:{placeholder:"Type a keyword..."},sort:{sortAsc:"Sort column ascending",sortDesc:"Sort column descending"},pagination:{previous:"Previous",next:"Next",navigate:function(t,n){return "Page "+t+" of "+n},page:function(t){return "Page "+t},showing:"Showing",of:"of",to:"to",results:"results"},loading:"Loading...",noRecordsFound:"No matching records found",error:"An error happened while fetching the data"},Tt=/*#__PURE__*/function(){function t(t){this._language=void 0,this._defaultLanguage=void 0,this._language=t,this._defaultLanguage=It;}var n=t.prototype;return n.getString=function(t,n){if(!n||!t)return null;var e=t.split("."),r=e[0];if(n[r]){var o=n[r];return "string"==typeof o?function(){return o}:"function"==typeof o?o:this.getString(e.slice(1).join("."),o)}return null},n.translate=function(t){var n,e=this.getString(t,this._language);return (n=e||this.getString(t,this._defaultLanguage))?n.apply(void 0,[].slice.call(arguments,1)):t},t}();function Lt(){var t=Et();return function(n){var e;return (e=t.translator).translate.apply(e,[n].concat([].slice.call(arguments,1)))}}var At=function(t){return function(n){return e({},n,{search:{keyword:t}})}};function Ht(){return Et().store}function jt(t){var n=Ht(),e=vt(t(n.getState())),r=e[0],o=e[1];return gt(function(){return n.subscribe(function(){var e=t(n.getState());r!==e&&o(e);})},[]),r}function Dt(){var t,n=vt(void 0),e=n[0],r=n[1],o=Et(),i=o.search,u=Lt(),s=Ht().dispatch,a=jt(function(t){return t.search});gt(function(){e&&e.setProps({keyword:null==a?void 0:a.keyword});},[a,e]),gt(function(){r(i.server?new st({keyword:i.keyword,url:i.server.url,body:i.server.body}):new tt({keyword:i.keyword,columns:o.header&&o.header.columns,ignoreHiddenColumns:i.ignoreHiddenColumns||void 0===i.ignoreHiddenColumns,selector:i.selector})),i.keyword&&s(At(i.keyword));},[i]),gt(function(){return o.pipeline.register(e),function(){return o.pipeline.unregister(e)}},[o,e]);var l,c,f,p=function(t,n){return at=8,bt(function(){return t},n)}((l=function(t){t.target instanceof HTMLInputElement&&s(At(t.target.value));},c=e instanceof st?i.debounceTimeout||250:0,function(){var t=arguments;return new Promise(function(n){f&&clearTimeout(f),f=setTimeout(function(){return n(l.apply(void 0,[].slice.call(t)))},c);})}),[i,e]);return w("div",{className:nt(et("search",null==(t=o.className)?void 0:t.search))},w("input",{type:"search",placeholder:u("search.placeholder"),"aria-label":u("search.placeholder"),onInput:p,className:et(nt("input"),nt("search","input")),value:(null==a?void 0:a.keyword)||""}))}var Mt=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var o=e.prototype;return o.validateProps=function(){if(isNaN(Number(this.props.limit))||isNaN(Number(this.props.page)))throw Error("Invalid parameters passed")},o._process=function(t){var n=this.props.page;return new J(t.rows.slice(n*this.props.limit,(n+1)*this.props.limit))},n(e,[{key:"type",get:function(){return K.Limit}}]),e}(Y),Ft=/*#__PURE__*/function(t){function o(){return t.apply(this,arguments)||this}return r(o,t),o.prototype._process=function(t){var n={};return this.props.url&&(n.url=this.props.url(t.url,this.props.page,this.props.limit)),this.props.body&&(n.body=this.props.body(t.body,this.props.page,this.props.limit)),e({},t,n)},n(o,[{key:"type",get:function(){return K.ServerLimit}}]),o}(Y);function Ot(){var t=Et(),n=t.pagination,e=n.server,r=n.summary,o=void 0===r||r,i=n.nextButton,u=void 0===i||i,s=n.prevButton,a=void 0===s||s,l=n.buttonsCount,c=void 0===l?3:l,f=n.limit,p=void 0===f?10:f,d=n.page,h=void 0===d?0:d,_=n.resetPageOnUpdate,m=void 0===_||_,v=yt(null),g=vt(h),y=g[0],b=g[1],x=vt(0),k=x[0],N=x[1],C=Lt();gt(function(){return v.current=e?new Ft({limit:p,page:y,url:e.url,body:e.body}):new Mt({limit:p,page:y}),v.current instanceof Ft?t.pipeline.on("afterProcess",function(t){return N(t.length)}):v.current instanceof Mt&&v.current.on("beforeProcess",function(t){return N(t.length)}),t.pipeline.on("updated",P),t.pipeline.register(v.current),t.pipeline.on("error",function(){N(0),b(0);}),function(){t.pipeline.unregister(v.current),t.pipeline.off("updated",P);}},[]);var P=function(t){m&&t!==v.current&&b(0);},E=function(){return Math.ceil(k/p)},I=function(t){if(t>=E()||t<0||t===y)return null;b(t),v.current.setProps({page:t});};return w("div",{className:et(nt("pagination"),t.className.pagination)},w(S,null,o&&k>0&&w("div",{role:"status","aria-live":"polite",className:et(nt("summary"),t.className.paginationSummary),title:C("pagination.navigate",y+1,E())},C("pagination.showing")," ",w("b",null,C(""+(y*p+1)))," ",C("pagination.to")," ",w("b",null,C(""+Math.min((y+1)*p,k)))," ",C("pagination.of")," ",w("b",null,C(""+k))," ",C("pagination.results"))),w("div",{className:nt("pages")},a&&w("button",{tabIndex:0,role:"button",disabled:0===y,onClick:function(){return I(y-1)},title:C("pagination.previous"),"aria-label":C("pagination.previous"),className:et(t.className.paginationButton,t.className.paginationButtonPrev)},C("pagination.previous")),function(){if(c<=0)return null;var n=Math.min(E(),c),e=Math.min(y,Math.floor(n/2));return y+Math.floor(n/2)>=E()&&(e=n-(E()-y)),w(S,null,E()>n&&y-e>0&&w(S,null,w("button",{tabIndex:0,role:"button",onClick:function(){return I(0)},title:C("pagination.firstPage"),"aria-label":C("pagination.firstPage"),className:t.className.paginationButton},C("1")),w("button",{tabIndex:-1,className:et(nt("spread"),t.className.paginationButton)},"...")),Array.from(Array(n).keys()).map(function(t){return y+(t-e)}).map(function(n){return w("button",{tabIndex:0,role:"button",onClick:function(){return I(n)},className:et(y===n?et(nt("currentPage"),t.className.paginationButtonCurrent):null,t.className.paginationButton),title:C("pagination.page",n+1),"aria-label":C("pagination.page",n+1)},C(""+(n+1)))}),E()>n&&E()>y+e+1&&w(S,null,w("button",{tabIndex:-1,className:et(nt("spread"),t.className.paginationButton)},"..."),w("button",{tabIndex:0,role:"button",onClick:function(){return I(E()-1)},title:C("pagination.page",E()),"aria-label":C("pagination.page",E()),className:t.className.paginationButton},C(""+E()))))}(),u&&w("button",{tabIndex:0,role:"button",disabled:E()===y+1||0===E(),onClick:function(){return I(y+1)},title:C("pagination.next"),"aria-label":C("pagination.next"),className:et(t.className.paginationButton,t.className.paginationButtonNext)},C("pagination.next"))))}function Rt(t,n){return "string"==typeof t?t.indexOf("%")>-1?n/100*parseInt(t,10):parseInt(t,10):t}function Ut(t){return t?Math.floor(t)+"px":""}function Wt(t){var n=t.tableRef.cloneNode(!0);return n.style.position="absolute",n.style.width="100%",n.style.zIndex="-2147483640",n.style.visibility="hidden",w("div",{ref:function(t){t&&t.appendChild(n);}})}function Bt(t){if(!t)return "";var n=t.split(" ");return 1===n.length&&/([a-z][A-Z])+/g.test(t)?t:n.map(function(t,n){return 0==n?t.toLowerCase():t.charAt(0).toUpperCase()+t.slice(1).toLowerCase()}).join("")}var qt,zt=new(/*#__PURE__*/function(){function t(){}var n=t.prototype;return n.format=function(t,n){return "[Grid.js] ["+n.toUpperCase()+"]: "+t},n.error=function(t,n){void 0===n&&(n=!1);var e=this.format(t,"error");if(n)throw Error(e);console.error(e);},n.warn=function(t){console.warn(this.format(t,"warn"));},n.info=function(t){console.info(this.format(t,"info"));},t}());!function(t){t[t.Header=0]="Header",t[t.Footer=1]="Footer",t[t.Cell=2]="Cell";}(qt||(qt={}));var Vt=/*#__PURE__*/function(){function t(){this.plugins=void 0,this.plugins=[];}var n=t.prototype;return n.get=function(t){return this.plugins.find(function(n){return n.id===t})},n.add=function(t){return t.id?this.get(t.id)?(zt.error("Duplicate plugin ID: "+t.id),this):(this.plugins.push(t),this):(zt.error("Plugin ID cannot be empty"),this)},n.remove=function(t){var n=this.get(t);return n&&this.plugins.splice(this.plugins.indexOf(n),1),this},n.list=function(t){var n;return n=null!=t||null!=t?this.plugins.filter(function(n){return n.position===t}):this.plugins,n.sort(function(t,n){return t.order&&n.order?t.order-n.order:1})},t}();function $t(t){var n=this,r=Et();if(t.pluginId){var o=r.plugin.get(t.pluginId);return o?w(S,{},w(o.component,e({plugin:o},t.props))):null}return void 0!==t.position?w(S,{},r.plugin.list(t.position).map(function(t){return w(t.component,e({plugin:t},n.props.props))})):null}var Gt=/*#__PURE__*/function(t){function o(){var n;return (n=t.call(this)||this)._columns=void 0,n._columns=[],n}r(o,t);var i=o.prototype;return i.adjustWidth=function(t,n,r){var i=t.container,u=t.autoWidth;if(!i)return this;var a=i.clientWidth,l={};n.current&&u&&(q(w(Wt,{tableRef:n.current}),r.current),l=function(t){var n=t.querySelector("table");if(!n)return {};var r=n.className,o=n.style.cssText;n.className=r+" "+nt("shadowTable"),n.style.tableLayout="auto",n.style.width="auto",n.style.padding="0",n.style.margin="0",n.style.border="none",n.style.outline="none";var i=Array.from(n.parentNode.querySelectorAll("thead th")).reduce(function(t,n){var r;return n.style.width=n.clientWidth+"px",e(((r={})[n.getAttribute("data-column-id")]={minWidth:n.clientWidth},r),t)},{});return n.className=r,n.style.cssText=o,n.style.tableLayout="auto",Array.from(n.parentNode.querySelectorAll("thead th")).reduce(function(t,n){return t[n.getAttribute("data-column-id")].width=n.clientWidth,t},i)}(r.current));for(var c,f=s(o.tabularFormat(this.columns).reduce(function(t,n){return t.concat(n)},[]));!(c=f()).done;){var p=c.value;p.columns&&p.columns.length>0||(!p.width&&u?p.id in l&&(p.width=Ut(l[p.id].width),p.minWidth=Ut(l[p.id].minWidth)):p.width=Ut(Rt(p.width,a)));}return n.current&&u&&q(null,r.current),this},i.setSort=function(t,n){for(var r,o=s(n||this.columns||[]);!(r=o()).done;){var i=r.value;i.columns&&i.columns.length>0?i.sort=void 0:void 0===i.sort&&t?i.sort={}:i.sort?"object"==typeof i.sort&&(i.sort=e({},i.sort)):i.sort=void 0,i.columns&&this.setSort(t,i.columns);}},i.setResizable=function(t,n){for(var e,r=s(n||this.columns||[]);!(e=r()).done;){var o=e.value;void 0===o.resizable&&(o.resizable=t),o.columns&&this.setResizable(t,o.columns);}},i.setID=function(t){for(var n,e=s(t||this.columns||[]);!(n=e()).done;){var r=n.value;r.id||"string"!=typeof r.name||(r.id=Bt(r.name)),r.id||zt.error('Could not find a valid ID for one of the columns. Make sure a valid "id" is set for all columns.'),r.columns&&this.setID(r.columns);}},i.populatePlugins=function(t,n){for(var r,o=s(n);!(r=o()).done;){var i=r.value;void 0!==i.plugin&&t.add(e({id:i.id},i.plugin,{position:qt.Cell}));}},o.fromColumns=function(t){for(var n,e=new o,r=s(t);!(n=r()).done;){var i=n.value;if("string"==typeof i||p(i))e.columns.push({name:i});else if("object"==typeof i){var u=i;u.columns&&(u.columns=o.fromColumns(u.columns).columns),"object"==typeof u.plugin&&void 0===u.data&&(u.data=null),e.columns.push(i);}}return e},o.createFromConfig=function(t){var n=new o;return t.from?n.columns=o.fromHTMLTable(t.from).columns:t.columns?n.columns=o.fromColumns(t.columns).columns:!t.data||"object"!=typeof t.data[0]||t.data[0]instanceof Array||(n.columns=Object.keys(t.data[0]).map(function(t){return {name:t}})),n.columns.length?(n.setID(),n.setSort(t.sort),n.setResizable(t.resizable),n.populatePlugins(t.plugin,n.columns),n):null},o.fromHTMLTable=function(t){for(var n,e=new o,r=s(t.querySelector("thead").querySelectorAll("th"));!(n=r()).done;){var i=n.value;e.columns.push({name:i.innerHTML,width:i.width});}return e},o.tabularFormat=function(t){var n=[],e=t||[],r=[];if(e&&e.length){n.push(e);for(var o,i=s(e);!(o=i()).done;){var u=o.value;u.columns&&u.columns.length&&(r=r.concat(u.columns));}r.length&&(n=n.concat(this.tabularFormat(r)));}return n},o.leafColumns=function(t){var n=[],e=t||[];if(e&&e.length)for(var r,o=s(e);!(r=o()).done;){var i=r.value;i.columns&&0!==i.columns.length||n.push(i),i.columns&&(n=n.concat(this.leafColumns(i.columns)));}return n},o.maximumDepth=function(t){return this.tabularFormat([t]).length-1},n(o,[{key:"columns",get:function(){return this._columns},set:function(t){this._columns=t;}},{key:"visibleColumns",get:function(){return this._columns.filter(function(t){return !t.hidden})}}]),o}(V),Kt=function(){},Xt=/*#__PURE__*/function(t){function n(n){var e;return (e=t.call(this)||this).data=void 0,e.set(n),e}r(n,t);var e=n.prototype;return e.get=function(){try{return Promise.resolve(this.data()).then(function(t){return {data:t,total:t.length}})}catch(t){return Promise.reject(t)}},e.set=function(t){return t instanceof Array?this.data=function(){return t}:t instanceof Function&&(this.data=t),this},n}(Kt),Zt=/*#__PURE__*/function(t){function n(n){var e;return (e=t.call(this)||this).options=void 0,e.options=n,e}r(n,t);var o=n.prototype;return o.handler=function(t){return "function"==typeof this.options.handle?this.options.handle(t):t.ok?t.json():(zt.error("Could not fetch data: "+t.status+" - "+t.statusText,!0),null)},o.get=function(t){var n=e({},this.options,t);return "function"==typeof n.data?n.data(n):fetch(n.url,n).then(this.handler.bind(this)).then(function(t){return {data:n.then(t),total:"function"==typeof n.total?n.total(t):void 0}})},n}(Kt),Jt=/*#__PURE__*/function(){function t(){}return t.createFromConfig=function(t){var n=null;return t.data&&(n=new Xt(t.data)),t.from&&(n=new Xt(this.tableElementToArray(t.from)),t.from.style.display="none"),t.server&&(n=new Zt(t.server)),n||zt.error("Could not determine the storage type",!0),n},t.tableElementToArray=function(t){for(var n,e,r=[],o=s(t.querySelector("tbody").querySelectorAll("tr"));!(n=o()).done;){for(var i,u=[],a=s(n.value.querySelectorAll("td"));!(i=a()).done;){var l=i.value;1===l.childNodes.length&&l.childNodes[0].nodeType===Node.TEXT_NODE?u.push((e=l.innerHTML,(new DOMParser).parseFromString(e,"text/html").documentElement.textContent)):u.push(G(l.innerHTML));}r.push(u);}return r},t}(),Qt="undefined"!=typeof Symbol?Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator")):"@@iterator";function Yt(t,n,e){if(!t.s){if(e instanceof tn){if(!e.s)return void(e.o=Yt.bind(null,t,n));1&n&&(n=e.s),e=e.v;}if(e&&e.then)return void e.then(Yt.bind(null,t,n),Yt.bind(null,t,2));t.s=n,t.v=e;var r=t.o;r&&r(t);}}var tn=/*#__PURE__*/function(){function t(){}return t.prototype.then=function(n,e){var r=new t,o=this.s;if(o){var i=1&o?n:e;if(i){try{Yt(r,1,i(this.v));}catch(t){Yt(r,2,t);}return r}return this}return this.o=function(t){try{var o=t.v;1&t.s?Yt(r,1,n?n(o):o):e?Yt(r,1,e(o)):Yt(r,2,o);}catch(t){Yt(r,2,t);}},r},t}();function nn(t){return t instanceof tn&&1&t.s}var en=/*#__PURE__*/function(t){function e(n){var e;return (e=t.call(this)||this)._steps=new Map,e.cache=new Map,e.lastProcessorIndexUpdated=-1,n&&n.forEach(function(t){return e.register(t)}),e}r(e,t);var o=e.prototype;return o.clearCache=function(){this.cache=new Map,this.lastProcessorIndexUpdated=-1;},o.register=function(t,n){if(void 0===n&&(n=null),t){if(null===t.type)throw Error("Processor type is not defined");t.on("propsUpdated",this.processorPropsUpdated.bind(this)),this.addProcessorByPriority(t,n),this.afterRegistered(t);}},o.unregister=function(t){if(t){var n=this._steps.get(t.type);n&&n.length&&(this._steps.set(t.type,n.filter(function(n){return n!=t})),this.emit("updated",t));}},o.addProcessorByPriority=function(t,n){var e=this._steps.get(t.type);if(!e){var r=[];this._steps.set(t.type,r),e=r;}if(null===n||n<0)e.push(t);else if(e[n]){var o=e.slice(0,n-1),i=e.slice(n+1);this._steps.set(t.type,o.concat(t).concat(i));}else e[n]=t;},o.getStepsByType=function(t){return this.steps.filter(function(n){return n.type===t})},o.getSortedProcessorTypes=function(){return Object.keys(K).filter(function(t){return !isNaN(Number(t))}).map(function(t){return Number(t)})},o.process=function(t){try{var n=function(t){return e.lastProcessorIndexUpdated=o.length,e.emit("afterProcess",i),i},e=this,r=e.lastProcessorIndexUpdated,o=e.steps,i=t,u=function(t,n){try{var u=function(t,n,e){if("function"==typeof t[Qt]){var r,o,i,u=t[Qt]();if(function t(e){try{for(;!(r=u.next()).done;)if((e=n(r.value))&&e.then){if(!nn(e))return void e.then(t,i||(i=Yt.bind(null,o=new tn,2)));e=e.v;}o?Yt(o,1,e):o=e;}catch(t){Yt(o||(o=new tn),2,t);}}(),u.return){var s=function(t){try{r.done||u.return();}catch(t){}return t};if(o&&o.then)return o.then(s,function(t){throw s(t)});s();}return o}if(!("length"in t))throw new TypeError("Object is not iterable");for(var a=[],l=0;l<t.length;l++)a.push(t[l]);return function(t,n,e){var r,o,i=-1;return function e(u){try{for(;++i<t.length;)if((u=n(i))&&u.then){if(!nn(u))return void u.then(e,o||(o=Yt.bind(null,r=new tn,2)));u=u.v;}r?Yt(r,1,u):r=u;}catch(t){Yt(r||(r=new tn),2,t);}}(),r}(a,function(t){return n(a[t])})}(o,function(t){var n=e.findProcessorIndexByID(t.id),o=function(){if(n>=r)return Promise.resolve(t.process(i)).then(function(n){e.cache.set(t.id,i=n);});i=e.cache.get(t.id);}();if(o&&o.then)return o.then(function(){})});}catch(t){return n(t)}return u&&u.then?u.then(void 0,n):u}(0,function(t){throw zt.error(t),e.emit("error",i),t});return Promise.resolve(u&&u.then?u.then(n):n())}catch(t){return Promise.reject(t)}},o.findProcessorIndexByID=function(t){return this.steps.findIndex(function(n){return n.id==t})},o.setLastProcessorIndex=function(t){var n=this.findProcessorIndexByID(t.id);this.lastProcessorIndexUpdated>n&&(this.lastProcessorIndexUpdated=n);},o.processorPropsUpdated=function(t){this.setLastProcessorIndex(t),this.emit("propsUpdated"),this.emit("updated",t);},o.afterRegistered=function(t){this.setLastProcessorIndex(t),this.emit("afterRegister"),this.emit("updated",t);},n(e,[{key:"steps",get:function(){for(var t,n=[],e=s(this.getSortedProcessorTypes());!(t=e()).done;){var r=this._steps.get(t.value);r&&r.length&&(n=n.concat(r));}return n.filter(function(t){return t})}}]),e}(Q),rn=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}return r(e,t),e.prototype._process=function(t){try{return Promise.resolve(this.props.storage.get(t))}catch(t){return Promise.reject(t)}},n(e,[{key:"type",get:function(){return K.Extractor}}]),e}(Y),on=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}return r(e,t),e.prototype._process=function(t){var n=J.fromArray(t.data);return n.length=t.total,n},n(e,[{key:"type",get:function(){return K.Transformer}}]),e}(Y),un=/*#__PURE__*/function(t){function o(){return t.apply(this,arguments)||this}return r(o,t),o.prototype._process=function(){return Object.entries(this.props.serverStorageOptions).filter(function(t){return "function"!=typeof t[1]}).reduce(function(t,n){var r;return e({},t,((r={})[n[0]]=n[1],r))},{})},n(o,[{key:"type",get:function(){return K.Initiator}}]),o}(Y),sn=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var o=e.prototype;return o.castData=function(t){if(!t||!t.length)return [];if(!this.props.header||!this.props.header.columns)return t;var n=Gt.leafColumns(this.props.header.columns);return t[0]instanceof Array?t.map(function(t){var e=0;return n.map(function(n,r){return void 0!==n.data?(e++,"function"==typeof n.data?n.data(t):n.data):t[r-e]})}):"object"!=typeof t[0]||t[0]instanceof Array?[]:t.map(function(t){return n.map(function(n,e){return void 0!==n.data?"function"==typeof n.data?n.data(t):n.data:n.id?t[n.id]:(zt.error("Could not find the correct cell for column at position "+e+".\n                          Make sure either 'id' or 'selector' is defined for all columns."),null)})})},o._process=function(t){return {data:this.castData(t.data),total:t.total}},n(e,[{key:"type",get:function(){return K.Transformer}}]),e}(Y),an=/*#__PURE__*/function(){function t(){}return t.createFromConfig=function(t){var n=new en;return t.storage instanceof Zt&&n.register(new un({serverStorageOptions:t.server})),n.register(new rn({storage:t.storage})),n.register(new sn({header:t.header})),n.register(new on),n},t}(),ln=function(t){var n=this;this.state=void 0,this.listeners=[],this.isDispatching=!1,this.getState=function(){return n.state},this.getListeners=function(){return n.listeners},this.dispatch=function(t){if("function"!=typeof t)throw new Error("Reducer is not a function");if(n.isDispatching)throw new Error("Reducers may not dispatch actions");n.isDispatching=!0;var e=n.state;try{n.state=t(n.state);}finally{n.isDispatching=!1;}for(var r,o=s(n.listeners);!(r=o()).done;)(0, r.value)(n.state,e);return n.state},this.subscribe=function(t){if("function"!=typeof t)throw new Error("Listener is not a function");return n.listeners=[].concat(n.listeners,[t]),function(){return n.listeners=n.listeners.filter(function(n){return n!==t})}},this.state=t;},cn=function(t,n){var e={__c:n="__cC"+_++,__:null,Consumer:function(t,n){return t.children(n)},Provider:function(t){var e,r;return this.getChildContext||(e=[],(r={})[n]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(t){this.props.value!==t.value&&e.some(E);},this.sub=function(t){e.push(t);var n=t.componentWillUnmount;t.componentWillUnmount=function(){e.splice(e.indexOf(t),1),n&&n.call(t);};}),t.children}};return e.Provider.__=e.Consumer.contextType=e}(),fn=/*#__PURE__*/function(){function t(){Object.assign(this,t.defaultConfig());}var n=t.prototype;return n.assign=function(t){return Object.assign(this,t)},n.update=function(n){return n?(this.assign(t.fromPartialConfig(e({},this,n))),this):this},t.defaultConfig=function(){return {store:new ln({status:a.Init,header:void 0,data:null}),plugin:new Vt,tableRef:{current:null},width:"100%",height:"auto",autoWidth:!0,style:{},className:{}}},t.fromPartialConfig=function(n){var e=(new t).assign(n);return "boolean"==typeof n.sort&&n.sort&&e.assign({sort:{multiColumn:!0}}),e.assign({header:Gt.createFromConfig(e)}),e.assign({storage:Jt.createFromConfig(e)}),e.assign({pipeline:an.createFromConfig(e)}),e.assign({translator:new Tt(e.language)}),e.search&&e.plugin.add({id:"search",position:qt.Header,component:Dt}),e.pagination&&e.plugin.add({id:"pagination",position:qt.Footer,component:Ot}),e.plugins&&e.plugins.forEach(function(t){return e.plugin.add(t)}),e},t}();function pn(t){var n,r=Et();return w("td",e({role:t.role,colSpan:t.colSpan,"data-column-id":t.column&&t.column.id,className:et(nt("td"),t.className,r.className.td),style:e({},t.style,r.style.td),onClick:function(n){t.messageCell||r.eventEmitter.emit("cellClick",n,t.cell,t.column,t.row);}},(n=t.column)?"function"==typeof n.attributes?n.attributes(t.cell.data,t.row,t.column):n.attributes:{}),t.column&&"function"==typeof t.column.formatter?t.column.formatter(t.cell.data,t.row,t.column):t.column&&t.column.plugin?w($t,{pluginId:t.column.id,props:{column:t.column,cell:t.cell,row:t.row}}):t.cell.data)}function dn(t){var n=Et(),e=jt(function(t){return t.header});return w("tr",{className:et(nt("tr"),n.className.tr),onClick:function(e){t.messageRow||n.eventEmitter.emit("rowClick",e,t.row);}},t.children?t.children:t.row.cells.map(function(n,r){var o=function(t){if(e){var n=Gt.leafColumns(e.columns);if(n)return n[t]}return null}(r);return o&&o.hidden?null:w(pn,{key:n.id,cell:n,row:t.row,column:o})}))}function hn(t){return w(dn,{messageRow:!0},w(pn,{role:"alert",colSpan:t.colSpan,messageCell:!0,cell:new X(t.message),className:et(nt("message"),t.className?t.className:null)}))}function _n(){var t=Et(),n=jt(function(t){return t.data}),e=jt(function(t){return t.status}),r=jt(function(t){return t.header}),o=Lt(),i=function(){return r?r.visibleColumns.length:0};return w("tbody",{className:et(nt("tbody"),t.className.tbody)},n&&n.rows.map(function(t){return w(dn,{key:t.id,row:t})}),e===a.Loading&&(!n||0===n.length)&&w(hn,{message:o("loading"),colSpan:i(),className:et(nt("loading"),t.className.loading)}),e===a.Rendered&&n&&0===n.length&&w(hn,{message:o("noRecordsFound"),colSpan:i(),className:et(nt("notfound"),t.className.notfound)}),e===a.Error&&w(hn,{message:o("error"),colSpan:i(),className:et(nt("error"),t.className.error)}))}var mn=/*#__PURE__*/function(t){function e(){return t.apply(this,arguments)||this}r(e,t);var o=e.prototype;return o.validateProps=function(){for(var t,n=s(this.props.columns);!(t=n()).done;){var e=t.value;void 0===e.direction&&(e.direction=1),1!==e.direction&&-1!==e.direction&&zt.error("Invalid sort direction "+e.direction);}},o.compare=function(t,n){return t>n?1:t<n?-1:0},o.compareWrapper=function(t,n){for(var e,r=0,o=s(this.props.columns);!(e=o()).done;){var i=e.value;if(0!==r)break;var u=t.cells[i.index].data,a=n.cells[i.index].data;r|="function"==typeof i.compare?i.compare(u,a)*i.direction:this.compare(u,a)*i.direction;}return r},o._process=function(t){var n=[].concat(t.rows);n.sort(this.compareWrapper.bind(this));var e=new J(n);return e.length=t.length,e},n(e,[{key:"type",get:function(){return K.Sort}}]),e}(Y),vn=function(t,n,r,o){return function(i){var u=i.sort?[].concat(i.sort.columns):[],s=u.length,a=u.find(function(n){return n.index===t}),l=!1,c=!1,f=!1,p=!1;if(void 0!==a?r?-1===a.direction?f=!0:p=!0:1===s?p=!0:s>1&&(c=!0,l=!0):0===s?l=!0:s>0&&!r?(l=!0,c=!0):s>0&&r&&(l=!0),c&&(u=[]),l)u.push({index:t,direction:n,compare:o});else if(p){var d=u.indexOf(a);u[d].direction=n;}else if(f){var h=u.indexOf(a);u.splice(h,1);}return e({},i,{sort:{columns:u}})}},gn=function(t,n,r){return function(o){var i=(o.sort?[].concat(o.sort.columns):[]).find(function(n){return n.index===t});return e({},o,i?vn(t,1===i.direction?-1:1,n,r)(o):vn(t,1,n,r)(o))}},yn=/*#__PURE__*/function(t){function o(){return t.apply(this,arguments)||this}return r(o,t),o.prototype._process=function(t){var n={};return this.props.url&&(n.url=this.props.url(t.url,this.props.columns)),this.props.body&&(n.body=this.props.body(t.body,this.props.columns)),e({},t,n)},n(o,[{key:"type",get:function(){return K.ServerSort}}]),o}(Y);function bn(t){var n=Et(),r=Lt(),o=vt(0),i=o[0],u=o[1],s=vt(void 0),a=s[0],l=s[1],c=jt(function(t){return t.sort}),f=Ht().dispatch,p=n.sort;gt(function(){var t=d();t&&l(t);},[]),gt(function(){return n.pipeline.register(a),function(){return n.pipeline.unregister(a)}},[n,a]),gt(function(){if(c){var n=c.columns.find(function(n){return n.index===t.index});u(n?n.direction:0);}},[c]),gt(function(){a&&c&&a.setProps({columns:c.columns});},[c]);var d=function(){var t=K.Sort;return p&&"object"==typeof p.server&&(t=K.ServerSort),0===n.pipeline.getStepsByType(t).length?t===K.ServerSort?new yn(e({columns:c?c.columns:[]},p.server)):new mn({columns:c?c.columns:[]}):null};return w("button",{tabIndex:-1,"aria-label":r("sort.sort"+(1===i?"Desc":"Asc")),title:r("sort.sort"+(1===i?"Desc":"Asc")),className:et(nt("sort"),nt("sort",function(t){return 1===t?"asc":-1===t?"desc":"neutral"}(i)),n.className.sort),onClick:function(n){n.preventDefault(),n.stopPropagation(),f(gn(t.index,!0===n.shiftKey&&p.multiColumn,t.compare));}})}function wn(t){var n,e=function(t){return t instanceof MouseEvent?Math.floor(t.pageX):Math.floor(t.changedTouches[0].pageX)},r=function(r){r.stopPropagation();var u,s,a,l,c,f=parseInt(t.thRef.current.style.width,10)-e(r);u=function(t){return o(t,f)},void 0===(s=10)&&(s=100),n=function(){var t=[].slice.call(arguments);a?(clearTimeout(l),l=setTimeout(function(){Date.now()-c>=s&&(u.apply(void 0,t),c=Date.now());},Math.max(s-(Date.now()-c),0))):(u.apply(void 0,t),c=Date.now(),a=!0);},document.addEventListener("mouseup",i),document.addEventListener("touchend",i),document.addEventListener("mousemove",n),document.addEventListener("touchmove",n);},o=function(n,r){n.stopPropagation();var o=t.thRef.current;r+e(n)>=parseInt(o.style.minWidth,10)&&(o.style.width=r+e(n)+"px");},i=function t(e){e.stopPropagation(),document.removeEventListener("mouseup",t),document.removeEventListener("mousemove",n),document.removeEventListener("touchmove",n),document.removeEventListener("touchend",t);};return w("div",{className:et(nt("th"),nt("resizable")),onMouseDown:r,onTouchStart:r,onClick:function(t){return t.stopPropagation()}})}function xn(t){var n=Et(),r=yt(null),o=vt({}),i=o[0],u=o[1],s=Ht().dispatch;gt(function(){if(n.fixedHeader&&r.current){var t=r.current.offsetTop;"number"==typeof t&&u({top:t});}},[r]);var a,l=function(){return null!=t.column.sort},c=function(e){e.stopPropagation(),l()&&s(gn(t.index,!0===e.shiftKey&&n.sort.multiColumn,t.column.sort.compare));};return w("th",e({ref:r,"data-column-id":t.column&&t.column.id,className:et(nt("th"),l()?nt("th","sort"):null,n.fixedHeader?nt("th","fixed"):null,n.className.th),onClick:c,style:e({},n.style.th,{minWidth:t.column.minWidth,width:t.column.width},i,t.style),onKeyDown:function(t){l()&&13===t.which&&c(t);},rowSpan:t.rowSpan>1?t.rowSpan:void 0,colSpan:t.colSpan>1?t.colSpan:void 0},(a=t.column)?"function"==typeof a.attributes?a.attributes(null,null,t.column):a.attributes:{},l()?{tabIndex:0}:{}),w("div",{className:nt("th","content")},void 0!==t.column.name?t.column.name:void 0!==t.column.plugin?w($t,{pluginId:t.column.plugin.id,props:{column:t.column}}):null),l()&&w(bn,e({index:t.index},t.column.sort)),t.column.resizable&&t.index<n.header.visibleColumns.length-1&&w(wn,{column:t.column,thRef:r}))}function kn(){var t,n=Et(),e=jt(function(t){return t.header});return e?w("thead",{key:e.id,className:et(nt("thead"),n.className.thead)},(t=Gt.tabularFormat(e.columns)).map(function(n,r){return function(t,n,r){var o=Gt.leafColumns(e.columns);return w(dn,null,t.map(function(t){return t.hidden?null:function(t,n,e,r){var o=function(t,n,e){var r=Gt.maximumDepth(t),o=e-n;return {rowSpan:Math.floor(o-r-r/o),colSpan:t.columns&&t.columns.length||1}}(t,n,r);return w(xn,{column:t,index:e,colSpan:o.colSpan,rowSpan:o.rowSpan})}(t,n,o.indexOf(t),r)}))}(n,r,t.length)})):null}var Sn=function(t){return function(n){return e({},n,{header:t})}};function Nn(){var t=Et(),n=yt(null),r=Ht().dispatch;return gt(function(){n&&r(function(t){return function(n){return e({},n,{tableRef:t})}}(n));},[n]),w("table",{ref:n,role:"grid",className:et(nt("table"),t.className.table),style:e({},t.style.table,{height:t.height})},w(kn,null),w(_n,null))}function Cn(){var t=vt(!0),n=t[0],r=t[1],o=yt(null),i=Et();return gt(function(){0===o.current.children.length&&r(!1);},[o]),n?w("div",{ref:o,className:et(nt("head"),i.className.header),style:e({},i.style.header)},w($t,{position:qt.Header})):null}function Pn(){var t=yt(null),n=vt(!0),r=n[0],o=n[1],i=Et();return gt(function(){0===t.current.children.length&&o(!1);},[t]),r?w("div",{ref:t,className:et(nt("footer"),i.className.footer),style:e({},i.style.footer)},w($t,{position:qt.Footer})):null}function En(){var t=Et(),n=Ht().dispatch,r=jt(function(t){return t.status}),o=jt(function(t){return t.data}),i=jt(function(t){return t.tableRef}),u={current:null};gt(function(){return n(Sn(t.header)),s(),t.pipeline.on("updated",s),function(){return t.pipeline.off("updated",s)}},[]),gt(function(){t.header&&r===a.Loaded&&null!=o&&o.length&&n(Sn(t.header.adjustWidth(t,i,u)));},[o,t,u]);var s=function(){try{n(function(t){return e({},t,{status:a.Loading})});var r=function(r,o){try{var i=Promise.resolve(t.pipeline.process()).then(function(t){n(function(t){return function(n){return t?e({},n,{data:t,status:a.Loaded}):n}}(t)),setTimeout(function(){n(function(t){return t.status===a.Loaded?e({},t,{status:a.Rendered}):t});},0);});}catch(t){return o(t)}return i&&i.then?i.then(void 0,o):i}(0,function(t){zt.error(t),n(function(t){return e({},t,{data:null,status:a.Error})});});return Promise.resolve(r&&r.then?r.then(function(){}):void 0)}catch(t){return Promise.reject(t)}};return w("div",{role:"complementary",className:et("gridjs",nt("container"),r===a.Loading?nt("loading"):null,t.className.container),style:e({},t.style.container,{width:t.width})},r===a.Loading&&w("div",{className:nt("loading-bar")}),w(Cn,null),w("div",{className:nt("wrapper"),style:{height:t.height}},w(Nn,null)),w(Pn,null),w("div",{ref:u,id:"gridjs-temp",className:nt("temp")}))}var In=/*#__PURE__*/function(t){function n(n){var e;return (e=t.call(this)||this).config=void 0,e.plugin=void 0,e.config=(new fn).assign({instance:i(e),eventEmitter:i(e)}).update(n),e.plugin=e.config.plugin,e}r(n,t);var e=n.prototype;return e.updateConfig=function(t){return this.config.update(t),this},e.createElement=function(){return w(cn.Provider,{value:this.config,children:w(En,{})})},e.forceRender=function(){return this.config&&this.config.container||zt.error("Container is empty. Make sure you call render() before forceRender()",!0),this.destroy(),q(this.createElement(),this.config.container),this},e.destroy=function(){this.config.pipeline.clearCache(),q(null,this.config.container);},e.render=function(t){return t||zt.error("Container element cannot be null",!0),t.childNodes.length>0?(zt.error("The container element "+t+" is not empty. Make sure the container is empty and call render() again"),this):(this.config.container=t,q(this.createElement(),t),this)},n}(Q);

const renderPendingPayments = (payments) => {
  console.log('renderPendingPayments', payments);

  let html = '';
  html += `
  <div class="container pt-3">
    <div class="row">
      <div class="col">
        ${renderAdminHeader()}
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="payment-grid"></div>
      </div>
    </div>
  </div>`;
  document.querySelector('.content').innerHTML = html;

  const paymentsCol = payments.map((p, i) => [i, p._id, p.characterId, p.characterName, p.type, p.inventory.length + 'x', p.creationDate, p.amount, p.paid ? 'PAID' : 'AWAITING']);
  console.log('paymentsCol', paymentsCol);
  new In({
    columns: [
      { name: 'i', hidden: true },
      { name: 'ID', sort: true },
      { name: 'Character ID', sort: true },
      { name: 'Character Name', sort: true },
      { name: 'Type', sort: true },
      { name: 'Inventory', sort: true },
      { name: 'Creation Date', sort: true },
      { name: 'Amount', sort: true, formatter: (cell) => cell.toLocaleString() },
      { name: 'Paid', sort: true },
      {
        name: 'Cancel',
        formatter: (cell, row) => {
          return w('button', {
            className: 'btn btn-danger w-100',
            onClick: async () => {
              await cancelPayment(payments[row.cells[0].data]._id);
              window.location.reload();
            }
          }, 'Cancel')
        }
      },
      {
        name: 'Mark PAID',
        formatter: (cell, row) => {
          return w('button', {
            className: 'btn btn-success w-100',
            onClick: async () => {
              console.log('Mark Paid', payments[row.cells[0].data]._id);
              await updatePayment(payments[row.cells[0].data]._id, { paid: true });
              window.location.reload();
            }
          }, 'Mark PAID')
        }
      }
    ],
    data: paymentsCol,
    search: true
  }).render(document.querySelector('.payment-grid'));
};

const initAdminPendingPayments = async () => {
  console.log('initAdminPendingPayments');
  //   clearData('admin-password')
  if (isLoginPasswordSet()) {
    console.log('initAdmin - LOGGED IN');
    const appAuth = await getAppAuth();
    console.log('appAuth', appAuth);
    if (appAuth.error) {
      console.log('BAD LOGIN', appAuth);
      clearData('admin-password');
      initAdmin();
    } else {
      // const appConfig = await getAppConfigAdmin()
      console.log('LOGGED IN!!! ADMIN PAYMENTS', appAuth);
      const payments = await getPendingPaymentsAdmin();
      renderPendingPayments(payments);
    }
    // TODO is null, password is bad, clear password and reload page
  } else {
    console.log('initAdmin - NOT LOGGED IN');
    // triggerAdminLoginFlow()
    window.location.assign('/admin');
  }
};

const sumColumns = (data, columnIndices) => {
  const sums = Array(columnIndices.length).fill(0);

  data.forEach(row => {
    columnIndices.forEach((columnIndex, index) => {
      sums[index] += row[columnIndex];
    });
  });

  return sums
};
const renderButton = (text, value, cssClass) => {
//   return `<button type="button" class="btn ${cssClass} position-relative">
//   ${text}
//   <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
//     ${value}
//   </span>
// </button>
// `
  return `<button type="button" class="btn ${cssClass}">
${text} <span class="badge text-bg-danger">${value}</span>
        </button>`
};
const renderCompletePayments = (payments) => {
  console.log('renderCompletePayments', payments);

  const paymentsCol = payments.map((p, i) => {
    const listingFee = p.types.find(t => t.type === 'LISTING_FEE');
    const appraisalFee = p.types.find(t => t.type === 'APPRAISAL_FEE');
    const total = (listingFee ? listingFee.totalAmount : 0) + (appraisalFee ? appraisalFee.totalAmount : 0);
    return [
      i,
      p._id.characterId,
      p._id.characterName,
      listingFee ? listingFee.inventoryCount : 0,
      listingFee ? listingFee.totalAmount : 0,
      appraisalFee ? appraisalFee.inventoryCount : 0,
      appraisalFee ? appraisalFee.totalAmount : 0,
      total]
  });

  console.log('paymentsCol', paymentsCol);

  const totals = sumColumns(paymentsCol, [3, 4, 5, 6, 7]);
  console.log('totals', totals);

  let html = '';
  html += `
  <div class="container pt-3">
    <div class="row">
      <div class="col">
        ${renderAdminHeader()}
        <p>Stats:
        ${renderButton('Customers', payments.length, 'btn-secondary')}
        ${renderButton('Listing No.', totals[0], 'btn-primary')}
        ${renderButton('Listing Ƶ', formatToISKString(totals[1]), 'btn-primary')}
        ${renderButton('Appraisal No.', totals[2], 'btn-secondary')}
        ${renderButton('Appraisal Ƶ', formatToISKString(totals[3]), 'btn-secondary')}
        ${renderButton('Total Ƶ', formatToISKString(totals[4]), 'btn-success')}
        </p>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="payment-complete-grid"></div>
      </div>
    </div>
  </div>`;
  document.querySelector('.content').innerHTML = html;

  new In({
    columns: [
      { name: 'i', hidden: true },
      { name: 'Character ID', sort: true },
      { name: 'Character Name', sort: true },
      { name: 'LIST No.', sort: true },
      { name: 'LIST Ƶ', sort: true, formatter: (cell) => cell.toLocaleString() },
      { name: 'APPRAISAL No.', sort: true },
      { name: 'APPRAISAL Ƶ', sort: true, formatter: (cell) => cell.toLocaleString() },
      { name: 'Total Ƶ', sort: true, formatter: (cell) => cell.toLocaleString() }
    ],
    data: paymentsCol,
    search: true
  }).render(document.querySelector('.payment-complete-grid'));
};

const initAdminCompletePayments = async () => {
  console.log('initAdminCompletePayments');
  //   clearData('admin-password')
  if (isLoginPasswordSet()) {
    console.log('initAdmin - LOGGED IN');
    const appAuth = await getAppAuth();
    console.log('appAuth', appAuth);
    if (appAuth.error) {
      console.log('BAD LOGIN', appAuth);
      clearData('admin-password');
      initAdmin();
    } else {
      // const appConfig = await getAppConfigAdmin()
      console.log('LOGGED IN!!! ADMIN PAYMENTS', appAuth);
      const payments = await getCompletePaymentsAdmin();
      renderCompletePayments(payments);
    }
    // TODO is null, password is bad, clear password and reload page
  } else {
    console.log('initAdmin - NOT LOGGED IN');
    // triggerAdminLoginFlow()
    window.location.assign('/admin');
  }
};

// import { getUnitForDogma } from '../dogma-utils'

const getFriendlyStatus = (status) => {
  return status.replace(/_/g, ' ')
};
const renderInventoryCard = (item) => {
  let html = '';
  const dogmaHtml = item.attributes.filter(a => a.type === 'mutation').map(dogma => {
    // const dogmaUnit = getUnitForDogma(dogma.unitID)
    return `
    <div class="d-flex flex-row gap-2 align-items-center px-1">
        <div class="p-0"><img src="/icons/${dogma.iconID}.png" width="32" height="32"></div>
        <div class="p-0">
            <p class="m-0">
                ${dogma.name}
                <!--
                <br/>
                zero ${dogma.allComparisonZero}<br/>
                diff ${dogma.allDiff}</p>
                v ${dogma.value}<br/>
                g ${dogma.allIsGood}<br/>
                min ${dogma.allMin}<br/>
                max ${dogma.allMax}<br/>
                zeroDiff ${dogma.allZeroDiff}<br/>
                perc ${dogma.allPerc}
                -->
            </p>
                
            <p class="m-0"><b>${formatForUnit(dogma.value, dogma.unitID)}  <span class="${dogma.isGood ? 'text-success' : 'text-danger'}">(${formatForUnit(dogma.diff, dogma.unitID, true)})</span></b></p>
        </div>
    </div>
    <div class="row gx-0 mb-2">
    <div class="col-6">
        <div class="progress justify-content-end" role="progressbar">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-danger" style="width: ${dogma.isGood ? '0' : dogma.perc}%"></div>
        </div>
    </div>
    <div class="col-6">
        <div class="progress" role="progressbar">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-success" style="width: ${dogma.isGood ? dogma.perc : '0'}%"></div>
        </div>
    </div>
    <div class="col-6">
        <div class="progress justify-content-end" role="progressbar">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" style="width: ${dogma.allIsGood ? '0' : dogma.allPerc}%"></div>
        </div>
    </div>
    <div class="col-6">
        <div class="progress" role="progressbar">
            <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" style="width: ${dogma.allIsGood ? dogma.allPerc : '0'}%"></div>
        </div>
    </div>
    </div>`
  }).join('');

  const baseAttributeHtml = item.attributes.filter(a => a.type === 'base-module').map(attr => {
    // const dogmaUnit = getUnitForDogma(attr.unitID)

    // const maxDiff = attr.max - attr.min
    // const diff = attr.value - attr.min
    // let perc = Math.round(100 * (Math.abs(diff) / maxDiff))
    // if (!attr.highIsGood) perc = 100 - perc
    // console.log('baseAttributeHtml', attr, maxDiff, diff, perc)
    return `
    <div class="d-flex flex-row gap-2 align-items-center px-1">
        <div class="p-0"><img src="/icons/${attr.iconID}.png" width="32" height="32"></div>
        <div class="p-0">
            <p class="m-0">
            ${attr.name}<br/>
            ${attr.highIsGood}<br/>
            v ${attr.value}<br/>
            s ${attr.sourceValue}<br/>
            d ${attr.diff}<br/>
            g ${attr.isGood}<br/>
            min ${attr.min}<br/>
            max ${attr.max}<br/>
            zeroDiff ${attr.zeroDiff}<br/>
            perc ${attr.perc}<br/>
            </p>
            <p class="m-0"><b>${formatForUnit(attr.value * 100, attr.unitID)}  <span class="text-primary">(${formatForUnit(attr.diff * 100, attr.unitID, true)})</span></b></p>
        </div>
    </div>
    <div class="row gx-0 mb-2">
        <div class="col-6">
            <div class="progress justify-content-end" role="progressbar">
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" style="width: ${attr.isGood ? '0' : attr.perc}%"></div>
            </div>
        </div>
        <div class="col-6">
            <div class="progress" role="progressbar">
                <div class="progress-bar progress-bar-striped progress-bar-animated bg-primary" style="width: ${attr.isGood ? attr.perc : '0'}%"></div>
            </div>
        </div>
    </div>`
  }).join('');

  const appraisalHtml = item.appraisal
    ? `<div class="appraisal px-2 appraisal-complete" data-item-id="${item.itemID}">
        <p>Appraisal: ${item.appraisal.value} <i>Type: ${item.appraisal.type}</i></p>
    </div>`
    : `
    <div class="appraisal px-2" data-item-id="${item.itemID}">
        <div class="col placeholder-glow">
            <span class="col-3">Value:</span>
            <span class="placeholder col-6"></span>
            <span class="placeholder col-2"></span>
        </div>
        </div>
        <div class="mt-2 listing-price-holder px-2" style="display:none;">
        <div class="input-group mb-3">
            <input type="text" class="form-control listing-price no-click-close text-end" placeholder="Add listing price">
            <span class="input-group-text no-click-close">eg, 13m 1.9b</span>
        </div>
    </div>`;
  const listingPriceHtml = item.listingPrice !== undefined ? `<div class="listing-price px-2"><p>Listing price: <b>${formatToISKString(item.listingPrice)}</b></p></div>` : '';

  let itemDisplayClass = '';
  if (item.status !== 'NONE') itemDisplayClass = ' listed';
  if (item.status === 'ON_SALE') itemDisplayClass = ' listed on-sale';
  if (item.status === 'AWAITING_PAYMENT') itemDisplayClass = ' listed awaiting-payment';
  html += `
        <div class="card-container inventory-item${itemDisplayClass}" data-item-id="${item.itemID}" data-status="${item.status}" role="button">
            <div class="card">
                <div class="card-body px-0 pb-0">
                    <div class="d-flex flex-row gap-2 align-items-center px-1">
                        <div class="p-0"><img src="https://images.evetech.net/types/${item.typeID}/icon?size=32"></div>
                        <div class="p-0">
                            <p class="lead mb-0 type-name"><b>${item.typeName}</b></p>
                            <span class="badge bg-secondary">${item.group}</span>
                            <span class="badge bg-secondary">${item.category}</span>
                            ${item.status !== 'NONE' ? `<span class="badge bg-primary">${getFriendlyStatus(item.status)}</span>` : ''}
                        </div>
                    </div>
                    <hr class="my-2"/>

                    <div class="d-flex flex-row gap-2 align-items-center px-1">
                        <div class="p-0"><img src="https://images.evetech.net/types/${item.mutatorTypeID}/icon?size=32"></div>
                        <div class="p-0">${item.mutatorTypeName}</div>
                    </div>
                    <div class="d-flex flex-row gap-2 align-items-center px-1">
                        <div class="p-0"><img src="https://images.evetech.net/types/${item.sourceTypeID}/icon?size=32"></div>
                        <div class="p-0">${item.sourceTypeName}</div>
                    </div>

                    <hr/>
                    ${dogmaHtml}
                    ${baseAttributeHtml}
                    <hr />
                    ${appraisalHtml}
                    ${listingPriceHtml}
                </div>
            </div>
            <span class="interaction-button">
            <button class="btn btn-primary btn-sm">
                <i class="bi bi-plus-circle-fill"></i>
            </button>
            </span>
          </div>`;
  return html
};

var abyssalTypes = {
	"47408": {
		typeID: 47408,
		name: "50MN Abyssal Microwarpdrive",
		group: "Microwarpdrives",
		category: "50MN",
		attributeIds: [
			6,
			20,
			30,
			50,
			554,
			147
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 140,
				allSourcesMax: 200,
				allComparisonZero: 181.99999928474426,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 84.00000333786011,
				allMax: 279.9999952316284,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 518,
				allComparisonZero: 509.9000002145767,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 449.99998807907104,
				allMax: 569.8000123500824,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 135,
				allSourcesMax: 188,
				allComparisonZero: 195.0000008046627,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 108.00000160932541,
				allMax: 282,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 43,
				allSourcesMax: 63,
				allComparisonZero: 64.45000025629997,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 34.400000512599945,
				allMax: 94.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 554,
				type: "mutation",
				allSourcesMin: 390,
				allSourcesMax: 500,
				allComparisonZero: 461.4999857544899,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 272.9999953508377,
				allMax: 649.9999761581421,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 124,
				highIsGood: false
			},
			{
				id: 147,
				type: "base-module",
				allSourcesMin: 0.75,
				allSourcesMax: 0.97,
				allComparisonZero: 0.86,
				name: "Capacitor Capacity Bonus",
				iconID: 1400,
				unitID: 109,
				highIsGood: true
			}
		],
		mutators: {
			"47297": {
				name: "Unstable 50MN Microwarpdrive Mutaplasmid",
				iconID: 22008,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"554": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47741": {
				name: "Gravid 50MN Microwarpdrive Mutaplasmid",
				iconID: 21997,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.0700000524520874,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"554": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			},
			"47742": {
				name: "Decayed 50MN Microwarpdrive Mutaplasmid",
				iconID: 21986,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.034999966621399,
						min: 0.9700000286102295
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"554": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"5975": {
				name: "50MN Cold-Gas Enduring Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 505,
					"30": 150,
					"50": 50,
					"147": 0.75,
					"554": 500
				}
			},
			"12052": {
				name: "50MN Microwarpdrive I",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 500,
					"30": 150,
					"50": 50,
					"147": 0.75,
					"554": 500
				}
			},
			"12076": {
				name: "50MN Microwarpdrive II",
				iconID: 10149,
				attributes: {
					"6": 200,
					"20": 510,
					"30": 165,
					"50": 50,
					"147": 0.8,
					"554": 500
				}
			},
			"14118": {
				name: "Domination 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 512,
					"30": 165,
					"50": 50,
					"147": 0.9,
					"554": 450
				}
			},
			"14120": {
				name: "Shadow Serpentis 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 512,
					"30": 150,
					"50": 55,
					"147": 0.9,
					"554": 475
				}
			},
			"15751": {
				name: "Republic Fleet 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 512,
					"30": 165,
					"50": 50,
					"147": 0.9,
					"554": 450
				}
			},
			"15764": {
				name: "Federation Navy 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 512,
					"30": 150,
					"50": 55,
					"147": 0.9,
					"554": 475
				}
			},
			"19315": {
				name: "Corelum C-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 514,
					"30": 150,
					"50": 58,
					"147": 0.93,
					"554": 450
				}
			},
			"19321": {
				name: "Corelum B-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 516,
					"30": 150,
					"50": 60,
					"147": 0.95,
					"554": 430
				}
			},
			"19327": {
				name: "Corelum A-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 160,
					"20": 518,
					"30": 150,
					"50": 63,
					"147": 0.97,
					"554": 410
				}
			},
			"19339": {
				name: "Gistum C-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 514,
					"30": 173,
					"50": 50,
					"147": 0.93,
					"554": 430
				}
			},
			"19345": {
				name: "Gistum B-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 516,
					"30": 180,
					"50": 50,
					"147": 0.95,
					"554": 410
				}
			},
			"19351": {
				name: "Gistum A-Type 50MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 518,
					"30": 188,
					"50": 50,
					"147": 0.97,
					"554": 390
				}
			},
			"21478": {
				name: "50MN Digital Booster Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 140,
					"20": 510,
					"30": 135,
					"50": 43,
					"147": 0.85,
					"554": 500
				}
			},
			"35659": {
				name: "50MN Y-T8 Compact Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 505,
					"30": 135,
					"50": 43,
					"147": 0.75,
					"554": 500
				}
			},
			"35660": {
				name: "50MN Quad LiF Restrained Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 180,
					"20": 505,
					"30": 150,
					"50": 50,
					"147": 0.8,
					"554": 450
				}
			}
		}
	},
	"47702": {
		typeID: 47702,
		name: "Abyssal Stasis Webifier",
		group: "Stasis Webifiers",
		category: "Stasis Webifiers",
		attributeIds: [
			6,
			20,
			50,
			54,
			30
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 2,
				allSourcesMax: 15,
				allComparisonZero: 19.649999976158142,
				allMutatorsMax: 2.5,
				allMutatorsMin: 0.8999999761581421,
				allMin: 1.7999999523162842,
				allMax: 37.5,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: -60,
				allSourcesMax: -50,
				allComparisonZero: -54.49999988079071,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: -53.999998569488525,
				allMax: -55.000001192092896,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 30,
				allComparisonZero: 28.90000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 45,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 10000,
				allSourcesMax: 20000,
				allComparisonZero: 16000.000536441803,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 8000.00011920929,
				allMax: 24000.000953674316,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 30,
				type: "base-module",
				allSourcesMin: 1,
				allSourcesMax: 1850,
				allComparisonZero: 925.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			}
		],
		mutators: {
			"47699": {
				name: "Decayed Stasis Webifier Mutaplasmid",
				iconID: 21992,
				mutationValues: {
					"6": {
						max: 1.7999999523162842,
						min: 1.399999976158142
					},
					"20": {
						highIsGood: 0,
						min: 0.9700000286102295,
						max: 1.034999966621399
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.0750000476837158,
						min: 0.949999988079071
					}
				}
			},
			"47700": {
				name: "Unstable Stasis Webifier Mutaplasmid",
				iconID: 22014,
				mutationValues: {
					"6": {
						max: 2.5,
						min: 0.8999999761581421
					},
					"20": {
						highIsGood: 0,
						min: 0.8999999761581421,
						max: 1.100000023841858
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47701": {
				name: "Gravid Stasis Webifier Mutaplasmid",
				iconID: 22003,
				mutationValues: {
					"6": {
						max: 2,
						min: 1
					},
					"20": {
						highIsGood: 0,
						min: 0.949999988079071,
						max: 1.0700000524520874
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"526": {
				name: "Stasis Webifier I",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -50,
					"30": 1,
					"50": 25,
					"54": 10000
				}
			},
			"527": {
				name: "Stasis Webifier II",
				iconID: 1284,
				attributes: {
					"6": 6,
					"20": -60,
					"30": 1,
					"50": 30,
					"54": 10000
				}
			},
			"4025": {
				name: "X5 Enduring Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 2,
					"20": -55,
					"30": 1,
					"50": 25,
					"54": 10000
				}
			},
			"4027": {
				name: "Fleeting Compact Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -55,
					"30": 1,
					"50": 20,
					"54": 10000
				}
			},
			"14262": {
				name: "Dark Blood Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -55,
					"30": 1,
					"50": 25,
					"54": 15000
				}
			},
			"14264": {
				name: "Domination Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -50,
					"30": 1,
					"50": 16,
					"54": 15000
				}
			},
			"14266": {
				name: "Dread Guristas Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -55,
					"30": 1,
					"50": 16,
					"54": 13000
				}
			},
			"14268": {
				name: "True Sansha Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -55,
					"30": 1,
					"50": 25,
					"54": 15000
				}
			},
			"14270": {
				name: "Shadow Serpentis Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -60,
					"30": 1,
					"50": 25,
					"54": 14000
				}
			},
			"14648": {
				name: "Mizuro's Modified Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 15,
					"20": -60,
					"30": 1700,
					"50": 18,
					"54": 17000
				}
			},
			"14650": {
				name: "Hakim's Modified Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 15,
					"20": -60,
					"30": 1750,
					"50": 18,
					"54": 18000
				}
			},
			"14652": {
				name: "Gotan's Modified Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 15,
					"20": -60,
					"30": 1800,
					"50": 18,
					"54": 19000
				}
			},
			"14654": {
				name: "Tobias' Modified Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 15,
					"20": -60,
					"30": 1850,
					"50": 18,
					"54": 20000
				}
			},
			"15419": {
				name: "Naiyon's Modified Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 10,
					"20": -55,
					"30": 1500,
					"50": 18,
					"54": 18000
				}
			},
			"17500": {
				name: "Caldari Navy Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -55,
					"30": 1,
					"50": 16,
					"54": 13000
				}
			},
			"17559": {
				name: "Federation Navy Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -60,
					"30": 1,
					"50": 25,
					"54": 14000
				}
			},
			"28514": {
				name: "Khanid Navy Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -60,
					"30": 1,
					"50": 16,
					"54": 12000
				}
			},
			"41038": {
				name: "Republic Fleet Stasis Webifier",
				iconID: 1284,
				attributes: {
					"6": 5,
					"20": -50,
					"30": 1,
					"50": 16,
					"54": 15000
				}
			}
		}
	},
	"47732": {
		typeID: 47732,
		name: "Abyssal Warp Scrambler",
		group: "Warp Scramblers",
		category: "Warp Scramblers",
		attributeIds: [
			6,
			50,
			54,
			105
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 2,
				allSourcesMax: 10,
				allComparisonZero: 13.399999976158142,
				allMutatorsMax: 2.5,
				allMutatorsMin: 0.8999999761581421,
				allMin: 1.7999999523162842,
				allMax: 25,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 18,
				allSourcesMax: 36,
				allComparisonZero: 34.20000010728836,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 14.400000214576721,
				allMax: 54,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 7500,
				allSourcesMax: 14250,
				allComparisonZero: 11550.000384449959,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 6000.000089406967,
				allMax: 17100.00067949295,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 105,
				type: "base-module",
				allSourcesMin: 2,
				allSourcesMax: 3,
				allComparisonZero: 2.5,
				name: "Warp Scramble Strength",
				iconID: 111,
				highIsGood: true
			}
		],
		mutators: {
			"47729": {
				name: "Decayed Warp Scrambler Mutaplasmid",
				iconID: 21994,
				mutationValues: {
					"6": {
						max: 1.7999999523162842,
						min: 1.399999976158142
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.0750000476837158,
						min: 0.949999988079071
					}
				}
			},
			"47730": {
				name: "Unstable Warp Scrambler Mutaplasmid",
				iconID: 22018,
				mutationValues: {
					"6": {
						max: 2.5,
						min: 0.8999999761581421
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47731": {
				name: "Gravid Warp Scrambler Mutaplasmid",
				iconID: 22005,
				mutationValues: {
					"6": {
						max: 2,
						min: 1
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"447": {
				name: "Warp Scrambler I",
				iconID: 3433,
				attributes: {
					"6": 5,
					"50": 30,
					"54": 7500,
					"105": 2
				}
			},
			"448": {
				name: "Warp Scrambler II",
				iconID: 3433,
				attributes: {
					"6": 6,
					"50": 36,
					"54": 9000,
					"105": 2
				}
			},
			"5439": {
				name: "J5b Enduring Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 2,
					"50": 30,
					"54": 7500,
					"105": 2
				}
			},
			"5441": {
				name: "Fleeting Progressive Warp Scrambler I",
				iconID: 3433,
				attributes: {
					"6": 4,
					"50": 29,
					"54": 8250,
					"105": 2
				}
			},
			"5443": {
				name: "Faint Epsilon Scoped Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 5,
					"50": 30,
					"54": 8250,
					"105": 2
				}
			},
			"5445": {
				name: "Initiated Compact Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 5,
					"50": 26,
					"54": 7500,
					"105": 2
				}
			},
			"14252": {
				name: "Dark Blood Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 6,
					"50": 30,
					"54": 11250,
					"105": 3
				}
			},
			"14254": {
				name: "Domination Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 6,
					"50": 30,
					"54": 11250,
					"105": 3
				}
			},
			"14256": {
				name: "Dread Guristas Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 4,
					"50": 22,
					"54": 10000,
					"105": 3
				}
			},
			"14258": {
				name: "True Sansha Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 6,
					"50": 30,
					"54": 11250,
					"105": 3
				}
			},
			"14260": {
				name: "Shadow Serpentis Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 5,
					"50": 26,
					"54": 10500,
					"105": 3
				}
			},
			"15433": {
				name: "Makur's Modified Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 10,
					"50": 30,
					"54": 14250,
					"105": 3
				}
			},
			"15887": {
				name: "Caldari Navy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 4,
					"50": 22,
					"54": 10000,
					"105": 3
				}
			},
			"15893": {
				name: "Republic Fleet Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 6,
					"50": 30,
					"54": 11250,
					"105": 3
				}
			},
			"21512": {
				name: "'Delineative' Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 2,
					"50": 18,
					"54": 9000,
					"105": 2
				}
			},
			"28518": {
				name: "Khanid Navy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 4,
					"50": 22,
					"54": 10000,
					"105": 3
				}
			},
			"41061": {
				name: "Federation Navy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 5,
					"50": 26,
					"54": 10500,
					"105": 3
				}
			}
		}
	},
	"47736": {
		typeID: 47736,
		name: "Abyssal Warp Disruptor",
		group: "Warp Disruptors",
		category: "Warp Disruptors",
		attributeIds: [
			6,
			50,
			54
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 70,
				allComparisonZero: 94.69999980926514,
				allMutatorsMax: 2.5,
				allMutatorsMin: 0.8999999761581421,
				allMin: 14.399999618530273,
				allMax: 175,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 19,
				allSourcesMax: 44,
				allComparisonZero: 40.600000113248825,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 15.20000022649765,
				allMax: 66,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 20000,
				allSourcesMax: 36000,
				allComparisonZero: 29600.000977516174,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 16000.00023841858,
				allMax: 43200.00171661377,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"47733": {
				name: "Decayed Warp Disruptor Mutaplasmid",
				iconID: 21993,
				mutationValues: {
					"6": {
						max: 1.7999999523162842,
						min: 1.399999976158142
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.0750000476837158,
						min: 0.949999988079071
					}
				}
			},
			"47734": {
				name: "Unstable Warp Disruptor Mutaplasmid",
				iconID: 22016,
				mutationValues: {
					"6": {
						max: 2.5,
						min: 0.8999999761581421
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47735": {
				name: "Gravid Warp Disruptor Mutaplasmid",
				iconID: 22004,
				mutationValues: {
					"6": {
						max: 2,
						min: 1
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"3242": {
				name: "Warp Disruptor I",
				iconID: 111,
				attributes: {
					"6": 25,
					"50": 40,
					"54": 20000
				}
			},
			"3244": {
				name: "Warp Disruptor II",
				iconID: 111,
				attributes: {
					"6": 30,
					"50": 44,
					"54": 24000
				}
			},
			"5399": {
				name: "J5 Enduring Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 16,
					"50": 40,
					"54": 20000
				}
			},
			"5401": {
				name: "Fleeting Warp Disruptor I",
				iconID: 111,
				attributes: {
					"6": 20,
					"50": 36,
					"54": 20000
				}
			},
			"5403": {
				name: "Faint Scoped Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 25,
					"50": 40,
					"54": 22000
				}
			},
			"5405": {
				name: "Initiated Compact Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 25,
					"50": 32,
					"54": 20000
				}
			},
			"14242": {
				name: "Dark Blood Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 28,
					"50": 38,
					"54": 30000
				}
			},
			"14244": {
				name: "Domination Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 28,
					"50": 38,
					"54": 30000
				}
			},
			"14246": {
				name: "Dread Guristas Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 20,
					"50": 23,
					"54": 26000
				}
			},
			"14248": {
				name: "True Sansha Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 28,
					"50": 38,
					"54": 30000
				}
			},
			"14250": {
				name: "Shadow Serpentis Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 25,
					"50": 30,
					"54": 28000
				}
			},
			"15431": {
				name: "Makur's Modified Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 70,
					"50": 19,
					"54": 36000
				}
			},
			"15889": {
				name: "Caldari Navy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 20,
					"50": 23,
					"54": 26000
				}
			},
			"15891": {
				name: "Republic Fleet Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 28,
					"50": 38,
					"54": 30000
				}
			},
			"21510": {
				name: "'Interruptive' Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 16,
					"50": 20,
					"54": 24000
				}
			},
			"28516": {
				name: "Khanid Navy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 20,
					"50": 23,
					"54": 26000
				}
			},
			"41062": {
				name: "Federation Navy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 25,
					"50": 30,
					"54": 28000
				}
			}
		}
	},
	"47740": {
		typeID: 47740,
		name: "5MN Abyssal Microwarpdrive",
		group: "Microwarpdrives",
		category: "5MN",
		attributeIds: [
			6,
			20,
			30,
			50,
			554,
			147
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 35,
				allSourcesMax: 50,
				allComparisonZero: 45.499999821186066,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 21.000000834465027,
				allMax: 69.9999988079071,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 518,
				allComparisonZero: 509.9000002145767,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 449.99998807907104,
				allMax: 569.8000123500824,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 14,
				allSourcesMax: 19,
				allComparisonZero: 19.850000083446503,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 11.200000166893005,
				allMax: 28.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 21,
				allSourcesMax: 31,
				allComparisonZero: 31.650000125169754,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 16.800000250339508,
				allMax: 46.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 554,
				type: "mutation",
				allSourcesMin: 390,
				allSourcesMax: 500,
				allComparisonZero: 461.4999857544899,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 272.9999953508377,
				allMax: 649.9999761581421,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 124,
				highIsGood: false
			},
			{
				id: 147,
				type: "base-module",
				allSourcesMin: 0.75,
				allSourcesMax: 0.97,
				allComparisonZero: 0.86,
				name: "Capacitor Capacity Bonus",
				iconID: 1400,
				unitID: 109,
				highIsGood: true
			}
		],
		mutators: {
			"47737": {
				name: "Decayed 5MN Microwarpdrive Mutaplasmid",
				iconID: 21986,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.034999966621399,
						min: 0.9700000286102295
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"554": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"47738": {
				name: "Unstable 5MN Microwarpdrive Mutaplasmid",
				iconID: 22008,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"554": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47739": {
				name: "Gravid 5MN Microwarpdrive Mutaplasmid",
				iconID: 21997,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.0700000524520874,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"554": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"434": {
				name: "5MN Microwarpdrive I",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 500,
					"30": 15,
					"50": 25,
					"147": 0.75,
					"554": 500
				}
			},
			"440": {
				name: "5MN Microwarpdrive II",
				iconID: 10149,
				attributes: {
					"6": 50,
					"20": 510,
					"30": 17,
					"50": 25,
					"147": 0.8,
					"554": 500
				}
			},
			"5971": {
				name: "5MN Cold-Gas Enduring Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 35,
					"20": 505,
					"30": 15,
					"50": 25,
					"147": 0.75,
					"554": 500
				}
			},
			"5973": {
				name: "5MN Y-T8 Compact Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 505,
					"30": 14,
					"50": 21,
					"147": 0.75,
					"554": 500
				}
			},
			"14122": {
				name: "Domination 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 512,
					"30": 17,
					"50": 25,
					"147": 0.9,
					"554": 450
				}
			},
			"14124": {
				name: "Shadow Serpentis 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 40,
					"20": 512,
					"30": 15,
					"50": 28,
					"147": 0.9,
					"554": 475
				}
			},
			"15747": {
				name: "Republic Fleet 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 512,
					"30": 17,
					"50": 25,
					"147": 0.9,
					"554": 450
				}
			},
			"15759": {
				name: "Federation Navy 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 40,
					"20": 512,
					"30": 15,
					"50": 28,
					"147": 0.9,
					"554": 475
				}
			},
			"19313": {
				name: "Coreli C-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 40,
					"20": 514,
					"30": 15,
					"50": 29,
					"147": 0.93,
					"554": 450
				}
			},
			"19319": {
				name: "Coreli B-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 40,
					"20": 516,
					"30": 15,
					"50": 30,
					"147": 0.95,
					"554": 430
				}
			},
			"19325": {
				name: "Coreli A-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 40,
					"20": 518,
					"30": 15,
					"50": 31,
					"147": 0.97,
					"554": 410
				}
			},
			"19337": {
				name: "Gistii C-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 514,
					"30": 17,
					"50": 25,
					"147": 0.93,
					"554": 430
				}
			},
			"19343": {
				name: "Gistii B-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 516,
					"30": 18,
					"50": 25,
					"147": 0.95,
					"554": 410
				}
			},
			"19349": {
				name: "Gistii A-Type 5MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 518,
					"30": 19,
					"50": 25,
					"147": 0.97,
					"554": 390
				}
			},
			"21476": {
				name: "5MN Digital Booster Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 35,
					"20": 510,
					"30": 14,
					"50": 21,
					"147": 0.85,
					"554": 500
				}
			},
			"35658": {
				name: "5MN Quad LiF Restrained Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 45,
					"20": 505,
					"30": 15,
					"50": 25,
					"147": 0.8,
					"554": 450
				}
			}
		}
	},
	"47745": {
		typeID: 47745,
		name: "500MN Abyssal Microwarpdrive",
		group: "Microwarpdrives",
		category: "500MN",
		attributeIds: [
			6,
			20,
			30,
			50,
			554,
			147
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 260,
				allSourcesMax: 350,
				allComparisonZero: 322.9999989271164,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 156.00000619888306,
				allMax: 489.99999165534973,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 520,
				allComparisonZero: 511.0000002384186,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 449.99998807907104,
				allMax: 572.0000123977661,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1125,
				allSourcesMax: 1625,
				allComparisonZero: 1668.7500067055225,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 900.0000134110451,
				allMax: 2437.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 64,
				allSourcesMax: 98,
				allComparisonZero: 99.10000038146973,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 51.20000076293945,
				allMax: 147,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 554,
				type: "mutation",
				allSourcesMin: 350,
				allSourcesMax: 500,
				allComparisonZero: 447.4999859929085,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 244.99999582767487,
				allMax: 649.9999761581421,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 124,
				highIsGood: false
			},
			{
				id: 147,
				type: "base-module",
				allSourcesMin: 0.75,
				allSourcesMax: 1,
				allComparisonZero: 0.875,
				name: "Capacitor Capacity Bonus",
				iconID: 1400,
				unitID: 109,
				highIsGood: true
			}
		],
		mutators: {
			"47299": {
				name: "Decayed 500MN Microwarpdrive Mutaplasmid",
				iconID: 21986,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.034999966621399,
						min: 0.9700000286102295
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"554": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"47743": {
				name: "Unstable 500MN Microwarpdrive Mutaplasmid",
				iconID: 22008,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"554": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47744": {
				name: "Gravid 500MN Microwarpdrive Mutaplasmid",
				iconID: 21997,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.0700000524520874,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"554": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"5945": {
				name: "500MN Cold-Gas Enduring Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 505,
					"30": 1250,
					"50": 75,
					"147": 0.75,
					"554": 500
				}
			},
			"12054": {
				name: "500MN Microwarpdrive I",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 500,
					"30": 1250,
					"50": 75,
					"147": 0.75,
					"554": 500
				}
			},
			"12084": {
				name: "500MN Microwarpdrive II",
				iconID: 10149,
				attributes: {
					"6": 350,
					"20": 510,
					"30": 1375,
					"50": 75,
					"147": 0.8,
					"554": 500
				}
			},
			"14114": {
				name: "Domination 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 512,
					"30": 1375,
					"50": 75,
					"147": 0.9,
					"554": 450
				}
			},
			"14116": {
				name: "Shadow Serpentis 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 512,
					"30": 1250,
					"50": 83,
					"147": 0.9,
					"554": 475
				}
			},
			"14492": {
				name: "Mizuro's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 514,
					"30": 1294,
					"50": 68,
					"147": 0.93,
					"554": 430
				}
			},
			"14494": {
				name: "Hakim's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 516,
					"30": 1350,
					"50": 68,
					"147": 0.95,
					"554": 410
				}
			},
			"14496": {
				name: "Gotan's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 518,
					"30": 1407,
					"50": 68,
					"147": 0.97,
					"554": 390
				}
			},
			"14498": {
				name: "Tobias' Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 520,
					"30": 1463,
					"50": 68,
					"147": 1,
					"554": 350
				}
			},
			"14508": {
				name: "Brynn's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 514,
					"30": 1125,
					"50": 77,
					"147": 0.93,
					"554": 450
				}
			},
			"14510": {
				name: "Tuvan's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 516,
					"30": 1125,
					"50": 81,
					"147": 0.95,
					"554": 430
				}
			},
			"14512": {
				name: "Setele's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 518,
					"30": 1125,
					"50": 85,
					"147": 0.97,
					"554": 410
				}
			},
			"14514": {
				name: "Cormack's Modified 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 520,
					"30": 1125,
					"50": 88,
					"147": 1,
					"554": 390
				}
			},
			"15755": {
				name: "Republic Fleet 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 512,
					"30": 1375,
					"50": 75,
					"147": 0.9,
					"554": 450
				}
			},
			"15768": {
				name: "Federation Navy 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 512,
					"30": 1250,
					"50": 83,
					"147": 0.9,
					"554": 475
				}
			},
			"19317": {
				name: "Core C-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 514,
					"30": 1250,
					"50": 86,
					"147": 0.93,
					"554": 450
				}
			},
			"19323": {
				name: "Core B-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 516,
					"30": 1250,
					"50": 90,
					"147": 0.95,
					"554": 430
				}
			},
			"19329": {
				name: "Core A-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 518,
					"30": 1250,
					"50": 94,
					"147": 0.97,
					"554": 410
				}
			},
			"19335": {
				name: "Core X-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 280,
					"20": 520,
					"30": 1250,
					"50": 98,
					"147": 1,
					"554": 390
				}
			},
			"19341": {
				name: "Gist C-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 514,
					"30": 1438,
					"50": 75,
					"147": 0.93,
					"554": 430
				}
			},
			"19347": {
				name: "Gist B-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 516,
					"30": 1500,
					"50": 75,
					"147": 0.95,
					"554": 410
				}
			},
			"19353": {
				name: "Gist A-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 518,
					"30": 1563,
					"50": 75,
					"147": 0.97,
					"554": 390
				}
			},
			"19359": {
				name: "Gist X-Type 500MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 520,
					"30": 1625,
					"50": 75,
					"147": 1,
					"554": 350
				}
			},
			"21480": {
				name: "500MN Digital Booster Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 260,
					"20": 510,
					"30": 1125,
					"50": 64,
					"147": 0.85,
					"554": 500
				}
			},
			"35661": {
				name: "500MN Y-T8 Compact Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 505,
					"30": 1125,
					"50": 64,
					"147": 0.75,
					"554": 500
				}
			},
			"35662": {
				name: "500MN Quad LiF Restrained Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 320,
					"20": 505,
					"30": 1250,
					"50": 75,
					"147": 0.8,
					"554": 450
				}
			}
		}
	},
	"47749": {
		typeID: 47749,
		name: "1MN Abyssal Afterburner",
		group: "Afterburners",
		category: "1MN",
		attributeIds: [
			6,
			20,
			30,
			50
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 5,
				allSourcesMax: 22,
				allComparisonZero: 16.899999797344208,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 3.0000001192092896,
				allMax: 30.799999475479126,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 60,
				allSourcesMax: 160,
				allComparisonZero: 120.00000417232513,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 48.00000071525574,
				allMax: 192.00000762939453,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1,
				allSourcesMax: 13,
				allComparisonZero: 10.150000005960464,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 0.800000011920929,
				allMax: 19.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 2,
				allSourcesMax: 19,
				allComparisonZero: 15.050000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1.600000023841858,
				allMax: 28.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			}
		],
		mutators: {
			"47746": {
				name: "Decayed 1MN Afterburner Mutaplasmid",
				iconID: 21984,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					}
				}
			},
			"47747": {
				name: "Unstable 1MN Afterburner Mutaplasmid",
				iconID: 22006,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					}
				}
			},
			"47748": {
				name: "Gravid 1MN Afterburner Mutaplasmid",
				iconID: 21995,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.149999976158142,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					}
				}
			}
		},
		sources: {
			"438": {
				name: "1MN Afterburner II",
				iconID: 96,
				attributes: {
					"6": 22,
					"20": 135,
					"30": 11,
					"50": 15
				}
			},
			"439": {
				name: "1MN Afterburner I",
				iconID: 96,
				attributes: {
					"6": 20,
					"20": 115,
					"30": 10,
					"50": 15
				}
			},
			"6001": {
				name: "1MN Y-S8 Compact Afterburner",
				iconID: 96,
				attributes: {
					"6": 20,
					"20": 125,
					"30": 9,
					"50": 13
				}
			},
			"6003": {
				name: "1MN Monopropellant Enduring Afterburner",
				iconID: 96,
				attributes: {
					"6": 15,
					"20": 125,
					"30": 10,
					"50": 15
				}
			},
			"14110": {
				name: "Domination 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 145,
					"30": 11,
					"50": 15
				}
			},
			"14112": {
				name: "Shadow Serpentis 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 145,
					"30": 10,
					"50": 17
				}
			},
			"15749": {
				name: "Republic Fleet 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 145,
					"30": 11,
					"50": 15
				}
			},
			"15761": {
				name: "Federation Navy 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 145,
					"30": 10,
					"50": 17
				}
			},
			"18658": {
				name: "Gistii C-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 150,
					"30": 12,
					"50": 15
				}
			},
			"18664": {
				name: "Gistii B-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 155,
					"30": 12,
					"50": 15
				}
			},
			"18670": {
				name: "Gistii A-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 160,
					"30": 13,
					"50": 15
				}
			},
			"18680": {
				name: "Coreli C-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 150,
					"30": 10,
					"50": 17
				}
			},
			"18686": {
				name: "Coreli B-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 155,
					"30": 10,
					"50": 18
				}
			},
			"18692": {
				name: "Coreli A-Type 1MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 18,
					"20": 160,
					"30": 10,
					"50": 19
				}
			},
			"21470": {
				name: "1MN Analog Booster Afterburner",
				iconID: 96,
				attributes: {
					"6": 15,
					"20": 135,
					"30": 9,
					"50": 13
				}
			},
			"21857": {
				name: "1MN Civilian Afterburner",
				iconID: 96,
				attributes: {
					"6": 5,
					"20": 60,
					"30": 1,
					"50": 2
				}
			}
		}
	},
	"47753": {
		typeID: 47753,
		name: "10MN Abyssal Afterburner",
		group: "Afterburners",
		category: "10MN",
		attributeIds: [
			6,
			20,
			30,
			50
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 60,
				allSourcesMax: 90,
				allComparisonZero: 80.99999964237213,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 36.000001430511475,
				allMax: 125.99999785423279,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 115,
				allSourcesMax: 160,
				allComparisonZero: 142.00000450015068,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 92.00000137090683,
				allMax: 192.00000762939453,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 45,
				allSourcesMax: 63,
				allComparisonZero: 65.2500002682209,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 36.0000005364418,
				allMax: 94.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 21,
				allSourcesMax: 32,
				allComparisonZero: 32.400000125169754,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 16.800000250339508,
				allMax: 48,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			}
		],
		mutators: {
			"47750": {
				name: "Decayed 10MN Afterburner Mutaplasmid",
				iconID: 21984,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					}
				}
			},
			"47751": {
				name: "Unstable 10MN Afterburner Mutaplasmid",
				iconID: 22006,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					}
				}
			},
			"47752": {
				name: "Gravid 10MN Afterburner Mutaplasmid",
				iconID: 21995,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.149999976158142,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					}
				}
			}
		},
		sources: {
			"6005": {
				name: "10MN Monopropellant Enduring Afterburner",
				iconID: 96,
				attributes: {
					"6": 60,
					"20": 125,
					"30": 50,
					"50": 25
				}
			},
			"12056": {
				name: "10MN Afterburner I",
				iconID: 96,
				attributes: {
					"6": 80,
					"20": 115,
					"30": 50,
					"50": 25
				}
			},
			"12058": {
				name: "10MN Afterburner II",
				iconID: 96,
				attributes: {
					"6": 90,
					"20": 135,
					"30": 55,
					"50": 25
				}
			},
			"14106": {
				name: "Domination 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 145,
					"30": 55,
					"50": 25
				}
			},
			"14108": {
				name: "Shadow Serpentis 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 145,
					"30": 50,
					"50": 28
				}
			},
			"15753": {
				name: "Republic Fleet 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 145,
					"30": 55,
					"50": 25
				}
			},
			"15766": {
				name: "Federation Navy 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 145,
					"30": 50,
					"50": 28
				}
			},
			"18660": {
				name: "Gistum C-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 150,
					"30": 58,
					"50": 25
				}
			},
			"18666": {
				name: "Gistum B-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 155,
					"30": 60,
					"50": 25
				}
			},
			"18672": {
				name: "Gistum A-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 160,
					"30": 63,
					"50": 25
				}
			},
			"18682": {
				name: "Corelum C-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 150,
					"30": 50,
					"50": 29
				}
			},
			"18688": {
				name: "Corelum B-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 155,
					"30": 50,
					"50": 30
				}
			},
			"18694": {
				name: "Corelum A-Type 10MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 70,
					"20": 160,
					"30": 50,
					"50": 32
				}
			},
			"21472": {
				name: "10MN Analog Booster Afterburner",
				iconID: 96,
				attributes: {
					"6": 60,
					"20": 135,
					"30": 45,
					"50": 21
				}
			},
			"35656": {
				name: "10MN Y-S8 Compact Afterburner",
				iconID: 96,
				attributes: {
					"6": 80,
					"20": 125,
					"30": 45,
					"50": 21
				}
			}
		}
	},
	"47757": {
		typeID: 47757,
		name: "100MN Abyssal Afterburner",
		group: "Afterburners",
		category: "100MN",
		attributeIds: [
			6,
			20,
			30,
			50
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 241,
				allSourcesMax: 350,
				allComparisonZero: 317.29999870061874,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 144.60000574588776,
				allMax: 489.99999165534973,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 115,
				allSourcesMax: 165,
				allComparisonZero: 145.00000461935997,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 92.00000137090683,
				allMax: 198.0000078678131,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 563,
				allSourcesMax: 813,
				allComparisonZero: 834.9500033557415,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 450.400006711483,
				allMax: 1219.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 43,
				allSourcesMax: 65,
				allComparisonZero: 65.95000025629997,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 34.400000512599945,
				allMax: 97.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			}
		],
		mutators: {
			"47754": {
				name: "Decayed 100MN Afterburner Mutaplasmid",
				iconID: 21984,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					}
				}
			},
			"47755": {
				name: "Unstable 100MN Afterburner Mutaplasmid",
				iconID: 22006,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					}
				}
			},
			"47756": {
				name: "Gravid 100MN Afterburner Mutaplasmid",
				iconID: 21995,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.149999976158142,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					}
				}
			}
		},
		sources: {
			"5955": {
				name: "100MN Monopropellant Enduring Afterburner",
				iconID: 96,
				attributes: {
					"6": 250,
					"20": 125,
					"30": 625,
					"50": 50
				}
			},
			"12066": {
				name: "100MN Afterburner I",
				iconID: 96,
				attributes: {
					"6": 320,
					"20": 115,
					"30": 625,
					"50": 50
				}
			},
			"12068": {
				name: "100MN Afterburner II",
				iconID: 96,
				attributes: {
					"6": 350,
					"20": 135,
					"30": 688,
					"50": 50
				}
			},
			"14102": {
				name: "Domination 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 145,
					"30": 688,
					"50": 50
				}
			},
			"14104": {
				name: "Shadow Serpentis 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 145,
					"30": 625,
					"50": 55
				}
			},
			"14484": {
				name: "Mizuro's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 150,
					"30": 647,
					"50": 45
				}
			},
			"14486": {
				name: "Hakim's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 155,
					"30": 675,
					"50": 45
				}
			},
			"14488": {
				name: "Gotan's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 160,
					"30": 703,
					"50": 45
				}
			},
			"14490": {
				name: "Tobias' Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 165,
					"30": 732,
					"50": 45
				}
			},
			"14500": {
				name: "Brynn's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 150,
					"30": 563,
					"50": 52
				}
			},
			"14502": {
				name: "Tuvan's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 155,
					"30": 563,
					"50": 54
				}
			},
			"14504": {
				name: "Setele's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 160,
					"30": 563,
					"50": 57
				}
			},
			"14506": {
				name: "Cormack's Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 165,
					"30": 563,
					"50": 59
				}
			},
			"15757": {
				name: "Republic Fleet 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 145,
					"30": 688,
					"50": 50
				}
			},
			"15770": {
				name: "Federation Navy 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 145,
					"30": 625,
					"50": 55
				}
			},
			"18662": {
				name: "Gist C-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 150,
					"30": 719,
					"50": 50
				}
			},
			"18668": {
				name: "Gist B-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 155,
					"30": 750,
					"50": 50
				}
			},
			"18674": {
				name: "Gist A-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 160,
					"30": 781,
					"50": 50
				}
			},
			"18676": {
				name: "Gist X-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 165,
					"30": 813,
					"50": 50
				}
			},
			"18684": {
				name: "Core C-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 150,
					"30": 625,
					"50": 58
				}
			},
			"18690": {
				name: "Core B-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 155,
					"30": 625,
					"50": 60
				}
			},
			"18696": {
				name: "Core A-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 160,
					"30": 625,
					"50": 63
				}
			},
			"18698": {
				name: "Core X-Type 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 290,
					"20": 165,
					"30": 625,
					"50": 65
				}
			},
			"19491": {
				name: "Thukker Modified 100MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 241,
					"20": 165,
					"30": 625,
					"50": 60
				}
			},
			"21474": {
				name: "100MN Analog Booster Afterburner",
				iconID: 96,
				attributes: {
					"6": 250,
					"20": 135,
					"30": 563,
					"50": 43
				}
			},
			"35657": {
				name: "100MN Y-S8 Compact Afterburner",
				iconID: 96,
				attributes: {
					"6": 320,
					"20": 125,
					"30": 563,
					"50": 43
				}
			}
		}
	},
	"47769": {
		typeID: 47769,
		name: "Small Abyssal Armor Repairer",
		group: "Armor Repairers",
		category: "Small",
		attributeIds: [
			6,
			30,
			50,
			73,
			84
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 36,
				allSourcesMax: 45,
				allComparisonZero: 42.29999989271164,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 21.600000858306885,
				allMax: 62.999998927116394,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 5,
				allSourcesMax: 7,
				allComparisonZero: 7.250000029802322,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 4.000000059604645,
				allMax: 10.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 4,
				allSourcesMax: 6,
				allComparisonZero: 6.100000023841858,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 3.200000047683716,
				allMax: 9,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 6000,
				allSourcesMax: 6750,
				allComparisonZero: 6412.500008940697,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 5399.9998569488525,
				allMax: 7425.000160932541,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 69,
				allSourcesMax: 135,
				allComparisonZero: 108.60000362992287,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 55.2000008225441,
				allMax: 162.00000643730164,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47766": {
				name: "Decayed Small Armor Repairer Mutaplasmid",
				iconID: 21990,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					},
					"84": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47767": {
				name: "Unstable Small Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47768": {
				name: "Gravid Small Armor Repairer Mutaplasmid",
				iconID: 22001,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					},
					"84": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"523": {
				name: "Small Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 5,
					"73": 6000,
					"84": 69
				}
			},
			"1183": {
				name: "Small Armor Repairer II",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 6,
					"50": 6,
					"73": 6000,
					"84": 92
				}
			},
			"4529": {
				name: "Small I-a Enduring Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 36,
					"30": 5,
					"50": 5,
					"73": 6000,
					"84": 79
				}
			},
			"4531": {
				name: "Small Inefficient Armor Repair Unit",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 76
				}
			},
			"4533": {
				name: "Small ACM Compact Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 79
				}
			},
			"4535": {
				name: "Small Automated Carapace Restoration",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 79
				}
			},
			"13962": {
				name: "Domination Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 36,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 83
				}
			},
			"13963": {
				name: "True Sansha Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 104
				}
			},
			"13964": {
				name: "Dark Blood Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 104
				}
			},
			"14069": {
				name: "Shadow Serpentis Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 92
				}
			},
			"15741": {
				name: "Ammatar Navy Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 104
				}
			},
			"15744": {
				name: "Federation Navy Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 92
				}
			},
			"17494": {
				name: "Republic Fleet Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 36,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 83
				}
			},
			"17548": {
				name: "Imperial Navy Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 104
				}
			},
			"18999": {
				name: "Corpii C-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 114
				}
			},
			"19001": {
				name: "Corpii B-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 6,
					"50": 4,
					"73": 6000,
					"84": 124
				}
			},
			"19003": {
				name: "Corpii A-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 7,
					"50": 4,
					"73": 6000,
					"84": 135
				}
			},
			"19005": {
				name: "Centii C-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 114
				}
			},
			"19007": {
				name: "Centii B-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 6,
					"50": 4,
					"73": 6000,
					"84": 124
				}
			},
			"19009": {
				name: "Centii A-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 7,
					"50": 4,
					"73": 6000,
					"84": 135
				}
			},
			"19011": {
				name: "Coreli C-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 101
				}
			},
			"19013": {
				name: "Coreli B-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 6,
					"50": 4,
					"73": 6000,
					"84": 110
				}
			},
			"19015": {
				name: "Coreli A-Type Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 7,
					"50": 4,
					"73": 6000,
					"84": 120
				}
			},
			"22887": {
				name: "'Harmony' Small Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6750,
					"84": 104
				}
			},
			"23795": {
				name: "'Gorget' Small Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 92
				}
			},
			"28556": {
				name: "Khanid Navy Small Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 45,
					"30": 5,
					"50": 4,
					"73": 6000,
					"84": 104
				}
			}
		}
	},
	"47773": {
		typeID: 47773,
		name: "Medium Abyssal Armor Repairer",
		group: "Armor Repairers",
		category: "Medium",
		attributeIds: [
			6,
			30,
			50,
			73,
			84
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 144,
				allSourcesMax: 180,
				allComparisonZero: 169.19999957084656,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 86.40000343322754,
				allMax: 251.99999570846558,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 108,
				allSourcesMax: 156,
				allComparisonZero: 160.20000064373016,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 86.40000128746033,
				allMax: 234,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 20,
				allSourcesMax: 28,
				allComparisonZero: 29.00000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 16.00000023841858,
				allMax: 42,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 12000,
				allSourcesMax: 13500,
				allComparisonZero: 12825.000017881393,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 10799.999713897705,
				allMax: 14850.000321865082,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 276,
				allSourcesMax: 538,
				allComparisonZero: 433.20001447200775,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 220.8000032901764,
				allMax: 645.6000256538391,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47770": {
				name: "Decayed Medium Armor Repairer Mutaplasmid",
				iconID: 21990,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					},
					"84": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47771": {
				name: "Unstable Medium Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47772": {
				name: "Gravid Medium Armor Repairer Mutaplasmid",
				iconID: 22001,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					},
					"84": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"3528": {
				name: "Medium Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 25,
					"73": 12000,
					"84": 276
				}
			},
			"3530": {
				name: "Medium Armor Repairer II",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 138,
					"50": 28,
					"73": 12000,
					"84": 368
				}
			},
			"4569": {
				name: "Medium I-a Enduring Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 144,
					"30": 120,
					"50": 22,
					"73": 12000,
					"84": 317
				}
			},
			"4571": {
				name: "Medium Inefficient Armor Repair Unit",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 23,
					"73": 12000,
					"84": 304
				}
			},
			"4573": {
				name: "Medium ACM Compact Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 108,
					"50": 20,
					"73": 12000,
					"84": 317
				}
			},
			"4575": {
				name: "Medium Automated Carapace Restoration",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 20,
					"73": 12000,
					"84": 317
				}
			},
			"13958": {
				name: "Domination Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 144,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 331
				}
			},
			"13959": {
				name: "True Sansha Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 414
				}
			},
			"13960": {
				name: "Dark Blood Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 414
				}
			},
			"14068": {
				name: "Shadow Serpentis Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 368
				}
			},
			"15742": {
				name: "Ammatar Navy Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 414
				}
			},
			"15745": {
				name: "Federation Navy Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 368
				}
			},
			"17493": {
				name: "Republic Fleet Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 144,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 331
				}
			},
			"17547": {
				name: "Imperial Navy Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 414
				}
			},
			"19017": {
				name: "Corpum C-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 132,
					"50": 23,
					"73": 12000,
					"84": 455
				}
			},
			"19019": {
				name: "Corpum B-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 144,
					"50": 23,
					"73": 12000,
					"84": 497
				}
			},
			"19021": {
				name: "Corpum A-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 156,
					"50": 23,
					"73": 12000,
					"84": 538
				}
			},
			"19023": {
				name: "Centum C-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 132,
					"50": 23,
					"73": 12000,
					"84": 455
				}
			},
			"19025": {
				name: "Centum B-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 144,
					"50": 23,
					"73": 12000,
					"84": 497
				}
			},
			"19027": {
				name: "Centum A-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 156,
					"50": 23,
					"73": 12000,
					"84": 538
				}
			},
			"19029": {
				name: "Corelum C-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 132,
					"50": 23,
					"73": 12000,
					"84": 405
				}
			},
			"19031": {
				name: "Corelum B-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 144,
					"50": 23,
					"73": 12000,
					"84": 442
				}
			},
			"19033": {
				name: "Corelum A-Type Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 156,
					"50": 23,
					"73": 12000,
					"84": 478
				}
			},
			"22889": {
				name: "'Meditation' Medium Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 108,
					"50": 20,
					"73": 13500,
					"84": 414
				}
			},
			"23797": {
				name: "'Greaves' Medium Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 108,
					"50": 20,
					"73": 12000,
					"84": 368
				}
			},
			"28549": {
				name: "Khanid Navy Medium Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 180,
					"30": 120,
					"50": 21,
					"73": 12000,
					"84": 414
				}
			}
		}
	},
	"47777": {
		typeID: 47777,
		name: "Large Abyssal Armor Repairer",
		group: "Armor Repairers",
		category: "Large",
		attributeIds: [
			6,
			30,
			50,
			73,
			84
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 360,
				allSourcesMax: 450,
				allComparisonZero: 422.9999989271164,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 216.00000858306885,
				allMax: 629.9999892711639,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 855,
				allSourcesMax: 2520,
				allComparisonZero: 2232.000005096197,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 684.0000101923943,
				allMax: 3780,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 40,
				allSourcesMax: 72,
				allComparisonZero: 70.00000023841858,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 32.00000047683716,
				allMax: 108,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 15000,
				allSourcesMax: 16875,
				allComparisonZero: 16031.250022351742,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 13499.999642372131,
				allMax: 18562.500402331352,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 690,
				allSourcesMax: 1475,
				allComparisonZero: 1161.000039279461,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 552.000008225441,
				allMax: 1770.0000703334808,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47774": {
				name: "Decayed Large Armor Repairer Mutaplasmid",
				iconID: 21990,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					},
					"84": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47775": {
				name: "Unstable Large Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"47776": {
				name: "Gravid Large Armor Repairer Mutaplasmid",
				iconID: 22001,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					},
					"84": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"3538": {
				name: "Large Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 50,
					"73": 15000,
					"84": 690
				}
			},
			"3540": {
				name: "Large Armor Repairer II",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2070,
					"50": 55,
					"73": 15000,
					"84": 920
				}
			},
			"4609": {
				name: "Large I-a Enduring Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 360,
					"30": 1800,
					"50": 49,
					"73": 15000,
					"84": 794
				}
			},
			"4611": {
				name: "Large Inefficient Armor Repair Unit",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 48,
					"73": 15000,
					"84": 759
				}
			},
			"4613": {
				name: "Large ACM Compact Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1620,
					"50": 40,
					"73": 15000,
					"84": 794
				}
			},
			"4615": {
				name: "Large Automated Carapace Restoration",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 49,
					"73": 15000,
					"84": 794
				}
			},
			"4621": {
				name: "Large 'Reprieve' Vestment Reconstructer I",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 855,
					"50": 72,
					"73": 15000,
					"84": 1104
				}
			},
			"13955": {
				name: "Domination Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 360,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 828
				}
			},
			"13956": {
				name: "True Sansha Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 1035
				}
			},
			"13957": {
				name: "Dark Blood Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 1035
				}
			},
			"14067": {
				name: "Shadow Serpentis Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 920
				}
			},
			"14552": {
				name: "Mizuro's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 360,
					"30": 1890,
					"50": 46,
					"73": 15000,
					"84": 911
				}
			},
			"14554": {
				name: "Gotan's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 360,
					"30": 2070,
					"50": 46,
					"73": 15000,
					"84": 1076
				}
			},
			"14848": {
				name: "Brokara's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1194
				}
			},
			"14849": {
				name: "Tairei's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1194
				}
			},
			"14850": {
				name: "Selynne's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1297
				}
			},
			"14851": {
				name: "Raysere's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1297
				}
			},
			"14852": {
				name: "Vizan's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1401
				}
			},
			"14853": {
				name: "Ahremen's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1401
				}
			},
			"14854": {
				name: "Chelm's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1475
				}
			},
			"14855": {
				name: "Draclira's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1475
				}
			},
			"15160": {
				name: "Brynn's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1060
				}
			},
			"15161": {
				name: "Tuvan's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1152
				}
			},
			"15162": {
				name: "Setele's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1244
				}
			},
			"15163": {
				name: "Cormack's Modified Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1311
				}
			},
			"15743": {
				name: "Ammatar Navy Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 1035
				}
			},
			"15746": {
				name: "Federation Navy Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 920
				}
			},
			"17492": {
				name: "Republic Fleet Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 360,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 828
				}
			},
			"17546": {
				name: "Imperial Navy Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 1035
				}
			},
			"19035": {
				name: "Core C-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1012
				}
			},
			"19036": {
				name: "Core B-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1104
				}
			},
			"19037": {
				name: "Core A-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1196
				}
			},
			"19038": {
				name: "Core X-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1288
				}
			},
			"19039": {
				name: "Corpus C-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1139
				}
			},
			"19040": {
				name: "Centus C-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1980,
					"50": 46,
					"73": 15000,
					"84": 1139
				}
			},
			"19041": {
				name: "Corpus B-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1242
				}
			},
			"19042": {
				name: "Centus B-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2160,
					"50": 46,
					"73": 15000,
					"84": 1242
				}
			},
			"19043": {
				name: "Corpus A-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1346
				}
			},
			"19044": {
				name: "Centus A-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2340,
					"50": 46,
					"73": 15000,
					"84": 1346
				}
			},
			"19045": {
				name: "Corpus X-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1449
				}
			},
			"19046": {
				name: "Centus X-Type Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 2520,
					"50": 46,
					"73": 15000,
					"84": 1449
				}
			},
			"22891": {
				name: "'Protest' Large Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1620,
					"50": 40,
					"73": 16875,
					"84": 1035
				}
			},
			"23799": {
				name: "'Hauberk' Large Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1620,
					"50": 40,
					"73": 15000,
					"84": 920
				}
			},
			"28544": {
				name: "Khanid Navy Large Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 450,
					"30": 1800,
					"50": 46,
					"73": 15000,
					"84": 1035
				}
			}
		}
	},
	"47781": {
		typeID: 47781,
		name: "Small Abyssal Shield Booster",
		group: "Shield Boosters",
		category: "Small",
		attributeIds: [
			6,
			30,
			50,
			68,
			73
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 11,
				allSourcesMax: 20,
				allComparisonZero: 17.29999989271164,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 6.600000262260437,
				allMax: 27.999999523162842,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 2,
				allSourcesMax: 3,
				allComparisonZero: 3.050000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1.600000023841858,
				allMax: 4.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 19,
				allSourcesMax: 29,
				allComparisonZero: 29.350000113248825,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 15.20000022649765,
				allMax: 43.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 26,
				allSourcesMax: 76,
				allComparisonZero: 56.00000196695328,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 20.800000309944153,
				allMax: 91.2000036239624,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 1600,
				allSourcesMax: 2000,
				allComparisonZero: 1820.0000047683716,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 1439.9999618530273,
				allMax: 2200.000047683716,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47778": {
				name: "Decayed Small Shield Booster Mutaplasmid",
				iconID: 21991,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"68": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"47779": {
				name: "Unstable Small Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					}
				}
			},
			"47780": {
				name: "Gravid Small Shield Booster Mutaplasmid",
				iconID: 22002,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"68": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					}
				}
			}
		},
		sources: {
			"399": {
				name: "Small Shield Booster I",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 25,
					"68": 26,
					"73": 2000
				}
			},
			"400": {
				name: "Small Shield Booster II",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 3,
					"50": 29,
					"68": 35,
					"73": 2000
				}
			},
			"6437": {
				name: "Small C5-L Compact Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 20,
					"68": 30,
					"73": 2000
				}
			},
			"6439": {
				name: "Small Neutron Saturation Injector I",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 22,
					"68": 29,
					"73": 2000
				}
			},
			"6441": {
				name: "Small Clarity Ward Enduring Shield Booster",
				iconID: 84,
				attributes: {
					"6": 18,
					"30": 2,
					"50": 25,
					"68": 30,
					"73": 2000
				}
			},
			"6443": {
				name: "Small Converse Deflection Catalyzer",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 23,
					"68": 28,
					"73": 2000
				}
			},
			"13951": {
				name: "Dread Guristas Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 21,
					"68": 32,
					"73": 1600
				}
			},
			"13952": {
				name: "Domination Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 16,
					"30": 2,
					"50": 21,
					"68": 28,
					"73": 1600
				}
			},
			"15898": {
				name: "Caldari Navy Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 21,
					"68": 32,
					"73": 1600
				}
			},
			"15902": {
				name: "Republic Fleet Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 16,
					"30": 2,
					"50": 21,
					"68": 28,
					"73": 1600
				}
			},
			"19169": {
				name: "Gistii C-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 11,
					"30": 2,
					"50": 21,
					"68": 39,
					"73": 2000
				}
			},
			"19171": {
				name: "Gistii B-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 12,
					"30": 2,
					"50": 21,
					"68": 41,
					"73": 2000
				}
			},
			"19173": {
				name: "Gistii A-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 13,
					"30": 2,
					"50": 21,
					"68": 57,
					"73": 2000
				}
			},
			"19175": {
				name: "Pithi C-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 24,
					"68": 55,
					"73": 2000
				}
			},
			"19177": {
				name: "Pithi B-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 26,
					"68": 65,
					"73": 2000
				}
			},
			"19179": {
				name: "Pithi A-Type Small Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 28,
					"68": 76,
					"73": 2000
				}
			},
			"20617": {
				name: "Small 'Settler' Shield Booster",
				iconID: 84,
				attributes: {
					"6": 20,
					"30": 2,
					"50": 19,
					"68": 28,
					"73": 2000
				}
			}
		}
	},
	"47785": {
		typeID: 47785,
		name: "Medium Abyssal Shield Booster",
		group: "Shield Boosters",
		category: "Medium",
		attributeIds: [
			6,
			30,
			50,
			68,
			73
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 32,
				allSourcesMax: 60,
				allComparisonZero: 51.59999966621399,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 19.200000762939453,
				allMax: 83.99999856948853,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 10,
				allSourcesMax: 13,
				allComparisonZero: 13.750000059604645,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 8.00000011920929,
				allMax: 19.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 40,
				allSourcesMax: 58,
				allComparisonZero: 59.50000023841858,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 32.00000047683716,
				allMax: 87,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 78,
				allSourcesMax: 228,
				allComparisonZero: 168.00000590085983,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 62.40000092983246,
				allMax: 273.6000108718872,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 2400,
				allSourcesMax: 3000,
				allComparisonZero: 2730.0000071525574,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 2159.999942779541,
				allMax: 3300.0000715255737,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47782": {
				name: "Decayed Medium Shield Booster Mutaplasmid",
				iconID: 21991,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"68": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"47783": {
				name: "Unstable Medium Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					}
				}
			},
			"47784": {
				name: "Gravid Medium Shield Booster Mutaplasmid",
				iconID: 22002,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"68": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					}
				}
			}
		},
		sources: {
			"10836": {
				name: "Medium Shield Booster I",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 50,
					"68": 78,
					"73": 3000
				}
			},
			"10850": {
				name: "Medium Shield Booster II",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 13,
					"50": 58,
					"68": 104,
					"73": 3000
				}
			},
			"10866": {
				name: "Medium Neutron Saturation Injector I",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 45,
					"68": 85,
					"73": 3000
				}
			},
			"10868": {
				name: "Medium Clarity Ward Enduring Shield Booster",
				iconID: 84,
				attributes: {
					"6": 54,
					"30": 12,
					"50": 50,
					"68": 90,
					"73": 3000
				}
			},
			"10870": {
				name: "Medium Converse Deflection Catalyzer",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 47,
					"68": 82,
					"73": 3000
				}
			},
			"10872": {
				name: "Medium C5-L Compact Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 11,
					"50": 40,
					"68": 90,
					"73": 3000
				}
			},
			"13949": {
				name: "Dread Guristas Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 42,
					"68": 95,
					"73": 2400
				}
			},
			"13950": {
				name: "Domination Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 48,
					"30": 12,
					"50": 42,
					"68": 83,
					"73": 2400
				}
			},
			"15899": {
				name: "Caldari Navy Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 42,
					"68": 95,
					"73": 2400
				}
			},
			"15903": {
				name: "Republic Fleet Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 48,
					"30": 12,
					"50": 42,
					"68": 83,
					"73": 2400
				}
			},
			"19181": {
				name: "Gistum C-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 32,
					"30": 12,
					"50": 43,
					"68": 116,
					"73": 3000
				}
			},
			"19183": {
				name: "Gistum B-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 35,
					"30": 12,
					"50": 43,
					"68": 124,
					"73": 3000
				}
			},
			"19185": {
				name: "Gistum A-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 38,
					"30": 12,
					"50": 43,
					"68": 170,
					"73": 3000
				}
			},
			"19187": {
				name: "Pithum C-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 47,
					"68": 163,
					"73": 3000
				}
			},
			"19189": {
				name: "Pithum B-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 51,
					"68": 194,
					"73": 3000
				}
			},
			"19191": {
				name: "Pithum A-Type Medium Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 12,
					"50": 56,
					"68": 228,
					"73": 3000
				}
			},
			"20619": {
				name: "Medium 'Lone Ranger' Shield Booster",
				iconID: 84,
				attributes: {
					"6": 60,
					"30": 10,
					"50": 40,
					"68": 83,
					"73": 3000
				}
			}
		}
	},
	"47789": {
		typeID: 47789,
		name: "Large Abyssal Shield Booster",
		group: "Shield Boosters",
		category: "Large",
		attributeIds: [
			6,
			30,
			50,
			68,
			73
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 90,
				allSourcesMax: 160,
				allComparisonZero: 138.99999916553497,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 54.00000214576721,
				allMax: 223.99999618530273,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 135,
				allSourcesMax: 165,
				allComparisonZero: 177.7500008046627,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 108.00000160932541,
				allMax: 247.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 80,
				allSourcesMax: 119,
				allComparisonZero: 121.25000047683716,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 64.00000095367432,
				allMax: 178.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 207,
				allSourcesMax: 377,
				allComparisonZero: 309.0000102221966,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 165.6000024676323,
				allMax: 452.40001797676086,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 3200,
				allSourcesMax: 4000,
				allComparisonZero: 3640.000009536743,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 2879.9999237060547,
				allMax: 4400.000095367432,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47786": {
				name: "Decayed Large Shield Booster Mutaplasmid",
				iconID: 21991,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"68": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"47787": {
				name: "Unstable Large Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					}
				}
			},
			"47788": {
				name: "Gravid Large Shield Booster Mutaplasmid",
				iconID: 22002,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"68": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					}
				}
			}
		},
		sources: {
			"10838": {
				name: "Large Shield Booster I",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 100,
					"68": 207,
					"73": 4000
				}
			},
			"10858": {
				name: "Large Shield Booster II",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 165,
					"50": 115,
					"68": 276,
					"73": 4000
				}
			},
			"10874": {
				name: "Large Neutron Saturation Injector I",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 90,
					"68": 228,
					"73": 4000
				}
			},
			"10876": {
				name: "Large Clarity Ward Enduring Shield Booster",
				iconID: 84,
				attributes: {
					"6": 144,
					"30": 150,
					"50": 100,
					"68": 238,
					"73": 4000
				}
			},
			"10878": {
				name: "Large Converse Deflection Catalyzer",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 95,
					"68": 217,
					"73": 4000
				}
			},
			"10880": {
				name: "Large C5-L Compact Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 140,
					"50": 80,
					"68": 238,
					"73": 4000
				}
			},
			"13947": {
				name: "Dread Guristas Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 85,
					"68": 252,
					"73": 3200
				}
			},
			"13948": {
				name: "Domination Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 128,
					"30": 150,
					"50": 85,
					"68": 221,
					"73": 3200
				}
			},
			"14597": {
				name: "Hakim's Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 94,
					"30": 150,
					"50": 85,
					"68": 262,
					"73": 3200
				}
			},
			"14599": {
				name: "Tobias' Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 102,
					"30": 150,
					"50": 85,
					"68": 303,
					"73": 3200
				}
			},
			"14700": {
				name: "Kaikka's Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 94,
					"68": 305,
					"73": 3200
				}
			},
			"14701": {
				name: "Thon's Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 102,
					"68": 332,
					"73": 3200
				}
			},
			"14702": {
				name: "Vepas' Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 111,
					"68": 358,
					"73": 3200
				}
			},
			"14703": {
				name: "Estamel's Modified Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 119,
					"68": 377,
					"73": 3200
				}
			},
			"15900": {
				name: "Caldari Navy Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 85,
					"68": 252,
					"73": 3200
				}
			},
			"15904": {
				name: "Republic Fleet Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 128,
					"30": 150,
					"50": 85,
					"68": 221,
					"73": 3200
				}
			},
			"19193": {
				name: "Gist C-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 90,
					"30": 150,
					"50": 85,
					"68": 237,
					"73": 3200
				}
			},
			"19194": {
				name: "Gist B-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 94,
					"30": 150,
					"50": 85,
					"68": 253,
					"73": 3200
				}
			},
			"19199": {
				name: "Gist A-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 98,
					"30": 150,
					"50": 85,
					"68": 270,
					"73": 3200
				}
			},
			"19200": {
				name: "Gist X-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 102,
					"30": 150,
					"50": 85,
					"68": 296,
					"73": 3200
				}
			},
			"19201": {
				name: "Pith C-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 94,
					"68": 290,
					"73": 3200
				}
			},
			"19203": {
				name: "Pith B-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 102,
					"68": 317,
					"73": 3200
				}
			},
			"19205": {
				name: "Pith A-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 111,
					"68": 343,
					"73": 3200
				}
			},
			"19207": {
				name: "Pith X-Type Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 150,
					"50": 119,
					"68": 370,
					"73": 3200
				}
			},
			"20621": {
				name: "Large 'Outlaw' Shield Booster",
				iconID: 84,
				attributes: {
					"6": 160,
					"30": 135,
					"50": 80,
					"68": 221,
					"73": 4000
				}
			}
		}
	},
	"47793": {
		typeID: 47793,
		name: "X-Large Abyssal Shield Booster",
		group: "Shield Boosters",
		category: "X-Large",
		attributeIds: [
			6,
			30,
			50,
			68,
			73
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 179,
				allSourcesMax: 400,
				allComparisonZero: 333.6999973654747,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 107.40000426769257,
				allMax: 559.9999904632568,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 425,
				allSourcesMax: 550,
				allComparisonZero: 582.5000025331974,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 340.0000050663948,
				allMax: 825,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 160,
				allSourcesMax: 238,
				allComparisonZero: 242.50000095367432,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 128.00000190734863,
				allMax: 357,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 518,
				allSourcesMax: 942,
				allComparisonZero: 772.4000255465508,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 414.4000061750412,
				allMax: 1130.4000449180603,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 4000,
				allSourcesMax: 5000,
				allComparisonZero: 4550.000011920929,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 3599.9999046325684,
				allMax: 5500.00011920929,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47790": {
				name: "Decayed X-Large Shield Booster Mutaplasmid",
				iconID: 21991,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"68": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"47791": {
				name: "Unstable X-Large Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					}
				}
			},
			"47792": {
				name: "Gravid X-Large Shield Booster Mutaplasmid",
				iconID: 22002,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"68": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					}
				}
			}
		},
		sources: {
			"10840": {
				name: "X-Large Shield Booster I",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 200,
					"68": 518,
					"73": 5000
				}
			},
			"10842": {
				name: "X-Large Shield Booster II",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 550,
					"50": 230,
					"68": 690,
					"73": 5000
				}
			},
			"10882": {
				name: "X-Large Neutron Saturation Injector I",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 180,
					"68": 569,
					"73": 5000
				}
			},
			"10884": {
				name: "X-Large Clarity Ward Enduring Shield Booster",
				iconID: 84,
				attributes: {
					"6": 360,
					"30": 500,
					"50": 200,
					"68": 596,
					"73": 5000
				}
			},
			"10886": {
				name: "X-Large Converse Deflection Catalyzer",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 190,
					"68": 544,
					"73": 5000
				}
			},
			"10888": {
				name: "X-Large C5-L Compact Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 450,
					"50": 160,
					"68": 596,
					"73": 5000
				}
			},
			"13953": {
				name: "Dread Guristas X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 170,
					"68": 630,
					"73": 4000
				}
			},
			"13954": {
				name: "Domination X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 320,
					"30": 500,
					"50": 170,
					"68": 552,
					"73": 4000
				}
			},
			"14601": {
				name: "Hakim's Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 187,
					"30": 500,
					"50": 170,
					"68": 662,
					"73": 4000
				}
			},
			"14603": {
				name: "Tobias' Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 204,
					"30": 500,
					"50": 170,
					"68": 753,
					"73": 4000
				}
			},
			"14704": {
				name: "Kaikka's Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 187,
					"68": 764,
					"73": 4000
				}
			},
			"14705": {
				name: "Thon's Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 204,
					"68": 830,
					"73": 4000
				}
			},
			"14706": {
				name: "Vepas' Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 221,
					"68": 896,
					"73": 4000
				}
			},
			"14707": {
				name: "Estamel's Modified X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 238,
					"68": 942,
					"73": 4000
				}
			},
			"15897": {
				name: "Caldari Navy X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 170,
					"68": 630,
					"73": 4000
				}
			},
			"15901": {
				name: "Republic Fleet X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 320,
					"30": 500,
					"50": 170,
					"68": 552,
					"73": 4000
				}
			},
			"19195": {
				name: "Gist C-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 179,
					"30": 500,
					"50": 170,
					"68": 578,
					"73": 4000
				}
			},
			"19196": {
				name: "Gist B-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 187,
					"30": 500,
					"50": 170,
					"68": 634,
					"73": 4000
				}
			},
			"19197": {
				name: "Gist A-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 196,
					"30": 500,
					"50": 170,
					"68": 682,
					"73": 4000
				}
			},
			"19198": {
				name: "Gist X-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 204,
					"30": 500,
					"50": 170,
					"68": 739,
					"73": 4000
				}
			},
			"19202": {
				name: "Pith C-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 187,
					"68": 726,
					"73": 4000
				}
			},
			"19204": {
				name: "Pith B-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 204,
					"68": 792,
					"73": 4000
				}
			},
			"19206": {
				name: "Pith A-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 221,
					"68": 858,
					"73": 4000
				}
			},
			"19208": {
				name: "Pith X-Type X-Large Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 500,
					"50": 238,
					"68": 924,
					"73": 4000
				}
			},
			"20623": {
				name: "X-Large 'Locomotive' Shield Booster",
				iconID: 84,
				attributes: {
					"6": 400,
					"30": 425,
					"50": 160,
					"68": 552,
					"73": 5000
				}
			}
		}
	},
	"47800": {
		typeID: 47800,
		name: "Small Abyssal Shield Extender",
		group: "Shield Extenders",
		category: "Small",
		attributeIds: [
			30,
			50,
			72,
			983
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1,
				allSourcesMax: 3,
				allComparisonZero: 2.6500000059604645,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 0.800000011920929,
				allMax: 4.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 12,
				allSourcesMax: 23,
				allComparisonZero: 22.050000071525574,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 9.600000143051147,
				allMax: 34.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 72,
				type: "mutation",
				allSourcesMin: 198,
				allSourcesMax: 550,
				allComparisonZero: 426.7999857068062,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 138.59999763965607,
				allMax: 714.9999737739563,
				name: "Shield Hitpoint Bonus",
				iconID: 69,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 983,
				type: "mutation",
				allSourcesMin: 0,
				allSourcesMax: 2,
				allComparisonZero: 1.5,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 0,
				allMax: 3,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 1,
				highIsGood: false
			}
		],
		mutators: {
			"47797": {
				name: "Decayed Small Shield Extender Mutaplasmid",
				iconID: 21985,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"72": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"983": {
						max: 1.2999999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"47798": {
				name: "Unstable Small Shield Extender Mutaplasmid",
				iconID: 22007,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"72": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"983": {
						max: 1.5,
						min: 0.699999988079071
					}
				}
			},
			"47799": {
				name: "Gravid Small Shield Extender Mutaplasmid",
				iconID: 21996,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"72": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"983": {
						max: 1.399999976158142,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"377": {
				name: "Small Shield Extender I",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 20,
					"72": 400,
					"983": 2
				}
			},
			"380": {
				name: "Small Shield Extender II",
				iconID: 1044,
				attributes: {
					"30": 3,
					"50": 23,
					"72": 520,
					"983": 2
				}
			},
			"8401": {
				name: "Small Subordinate Screen Stabilizer I",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 18,
					"72": 206,
					"983": 2
				}
			},
			"8427": {
				name: "Small Azeotropic Restrained Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 20,
					"72": 450,
					"983": 0
				}
			},
			"8481": {
				name: "Small Supplemental Barrier Emitter I",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 19,
					"72": 198,
					"983": 2
				}
			},
			"8521": {
				name: "Small F-S9 Regolith Compact Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 16,
					"72": 450,
					"983": 2
				}
			},
			"20625": {
				name: "Small 'Wolf' Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 1,
					"50": 16,
					"72": 500,
					"983": 2
				}
			},
			"20627": {
				name: "Small 'Trapper' Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 1,
					"50": 12,
					"72": 300,
					"983": 0
				}
			},
			"28742": {
				name: "Thukker Small Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 3,
					"50": 20,
					"72": 550,
					"983": 0
				}
			},
			"31922": {
				name: "Caldari Navy Small Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 19,
					"72": 550,
					"983": 2
				}
			},
			"31924": {
				name: "Republic Fleet Small Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 2,
					"50": 20,
					"72": 550,
					"983": 1
				}
			}
		}
	},
	"47804": {
		typeID: 47804,
		name: "Medium Abyssal Shield Extender",
		group: "Shield Extenders",
		category: "Medium",
		attributeIds: [
			30,
			50,
			72,
			983
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 25,
				allSourcesMax: 30,
				allComparisonZero: 32.50000014901161,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 20.000000298023224,
				allMax: 45,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 26,
				allSourcesMax: 35,
				allComparisonZero: 36.650000154972076,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 20.800000309944153,
				allMax: 52.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 72,
				type: "mutation",
				allSourcesMin: 788,
				allSourcesMax: 1406,
				allComparisonZero: 1189.6999617815018,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 551.599990606308,
				allMax: 1827.7999329566956,
				name: "Shield Hitpoint Bonus",
				iconID: 69,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 983,
				type: "mutation",
				allSourcesMin: 3,
				allSourcesMax: 7,
				allComparisonZero: 6.299999982118607,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 2.099999964237213,
				allMax: 10.5,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 1,
				highIsGood: false
			}
		],
		mutators: {
			"47801": {
				name: "Decayed Medium Shield Extender Mutaplasmid",
				iconID: 21985,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"72": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"983": {
						max: 1.2999999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"47802": {
				name: "Unstable Medium Shield Extender Mutaplasmid",
				iconID: 22007,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"72": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"983": {
						max: 1.5,
						min: 0.699999988079071
					}
				}
			},
			"47803": {
				name: "Gravid Medium Shield Extender Mutaplasmid",
				iconID: 21996,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"72": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"983": {
						max: 1.399999976158142,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"3829": {
				name: "Medium Shield Extender I",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 28,
					"72": 800,
					"983": 7
				}
			},
			"3831": {
				name: "Medium Shield Extender II",
				iconID: 1044,
				attributes: {
					"30": 30,
					"50": 35,
					"72": 1100,
					"983": 7
				}
			},
			"8397": {
				name: "Medium Subordinate Screen Stabilizer I",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 27,
					"72": 825,
					"983": 6
				}
			},
			"8433": {
				name: "Medium Azeotropic Restrained Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 28,
					"72": 900,
					"983": 3
				}
			},
			"8477": {
				name: "Medium Supplemental Barrier Emitter I",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 28,
					"72": 788,
					"983": 6
				}
			},
			"8517": {
				name: "Medium F-S9 Regolith Compact Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 26,
					"50": 26,
					"72": 900,
					"983": 7
				}
			},
			"16144": {
				name: "CONCORD Medium Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 26,
					"50": 28,
					"72": 1106,
					"983": 4
				}
			},
			"19489": {
				name: "Thukker Modified Medium Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 30,
					"72": 1406,
					"983": 4
				}
			},
			"20629": {
				name: "Medium 'Canyon' Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 25,
					"50": 26,
					"72": 1000,
					"983": 7
				}
			},
			"28746": {
				name: "Thukker Medium Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 30,
					"50": 28,
					"72": 1200,
					"983": 3
				}
			},
			"31926": {
				name: "Caldari Navy Medium Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 28,
					"50": 26,
					"72": 1200,
					"983": 7
				}
			},
			"31928": {
				name: "Republic Fleet Medium Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 26,
					"50": 28,
					"72": 1200,
					"983": 5
				}
			}
		}
	},
	"47808": {
		typeID: 47808,
		name: "Large Abyssal Shield Extender",
		group: "Shield Extenders",
		category: "Large",
		attributeIds: [
			30,
			50,
			72,
			983
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 135,
				allSourcesMax: 160,
				allComparisonZero: 174.0000008046627,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 108.00000160932541,
				allMax: 240,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 35,
				allSourcesMax: 45,
				allComparisonZero: 47.75000020861626,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 28.000000417232513,
				allMax: 67.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 72,
				type: "mutation",
				allSourcesMin: 1900,
				allSourcesMax: 2813,
				allComparisonZero: 2493.449921607971,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1329.999977350235,
				allMax: 3656.8998658657074,
				name: "Shield Hitpoint Bonus",
				iconID: 69,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 983,
				type: "mutation",
				allSourcesMin: 15,
				allSourcesMax: 25,
				allComparisonZero: 23.999999910593033,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 10.499999821186066,
				allMax: 37.5,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 1,
				highIsGood: false
			}
		],
		mutators: {
			"47805": {
				name: "Decayed Large Shield Extender Mutaplasmid",
				iconID: 21985,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"72": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"983": {
						max: 1.2999999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"47806": {
				name: "Unstable Large Shield Extender Mutaplasmid",
				iconID: 22007,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"72": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"983": {
						max: 1.5,
						min: 0.699999988079071
					}
				}
			},
			"47807": {
				name: "Gravid Large Shield Extender Mutaplasmid",
				iconID: 21996,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"72": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"983": {
						max: 1.399999976158142,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"3839": {
				name: "Large Shield Extender I",
				iconID: 1044,
				attributes: {
					"30": 150,
					"50": 40,
					"72": 1900,
					"983": 25
				}
			},
			"3841": {
				name: "Large Shield Extender II",
				iconID: 1044,
				attributes: {
					"30": 160,
					"50": 45,
					"72": 2600,
					"983": 25
				}
			},
			"8409": {
				name: "Large Subordinate Screen Stabilizer I",
				iconID: 1044,
				attributes: {
					"30": 150,
					"50": 36,
					"72": 2063,
					"983": 23
				}
			},
			"8419": {
				name: "Large Azeotropic Restrained Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 150,
					"50": 40,
					"72": 2200,
					"983": 15
				}
			},
			"8489": {
				name: "Large Supplemental Barrier Emitter I",
				iconID: 1044,
				attributes: {
					"30": 150,
					"50": 38,
					"72": 1969,
					"983": 24
				}
			},
			"8529": {
				name: "Large F-S9 Regolith Compact Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 140,
					"50": 35,
					"72": 2200,
					"983": 25
				}
			},
			"16146": {
				name: "CONCORD Large Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 143,
					"50": 36,
					"72": 2813,
					"983": 20
				}
			},
			"20631": {
				name: "Large 'Sheriff' Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 135,
					"50": 35,
					"72": 2400,
					"983": 25
				}
			},
			"28744": {
				name: "Thukker Large Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 155,
					"50": 40,
					"72": 2750,
					"983": 15
				}
			},
			"31930": {
				name: "Caldari Navy Large Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 150,
					"50": 35,
					"72": 2750,
					"983": 25
				}
			},
			"31932": {
				name: "Republic Fleet Large Shield Extender",
				iconID: 1044,
				attributes: {
					"30": 145,
					"50": 40,
					"72": 2750,
					"983": 20
				}
			}
		}
	},
	"47812": {
		typeID: 47812,
		name: "Small Abyssal Armor Plates",
		group: "Armor Plates",
		category: "Small",
		attributeIds: [
			30,
			50,
			796,
			1159
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 2,
				allSourcesMax: 13,
				allComparisonZero: 10.550000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1.600000023841858,
				allMax: 19.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 4,
				allSourcesMax: 16,
				allComparisonZero: 13.600000023841858,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 3.200000047683716,
				allMax: 24,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 796,
				type: "mutation",
				allSourcesMin: 20000,
				allSourcesMax: 150000,
				allComparisonZero: 110999.99845027924,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 12000.000476837158,
				allMax: 209999.9964237213,
				name: "Mass Addition",
				iconID: 76,
				unitID: 2,
				highIsGood: false
			},
			{
				id: 1159,
				type: "mutation",
				allSourcesMin: 175,
				allSourcesMax: 700,
				allComparisonZero: 516.2499822676182,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 122.49999791383743,
				allMax: 909.9999666213989,
				name: "Armor Hitpoint Bonus",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47809": {
				name: "Decayed Small Armor Plate Mutaplasmid",
				iconID: 21989,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"796": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"1159": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47810": {
				name: "Unstable Small Armor Plate Mutaplasmid",
				iconID: 22011,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"796": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"1159": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47811": {
				name: "Gravid Small Armor Plate Mutaplasmid",
				iconID: 22000,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"796": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"1159": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"11293": {
				name: "100mm Steel Plates I",
				iconID: 79,
				attributes: {
					"30": 5,
					"50": 10,
					"796": 35000,
					"1159": 200
				}
			},
			"11295": {
				name: "200mm Steel Plates I",
				iconID: 79,
				attributes: {
					"30": 10,
					"50": 15,
					"796": 140000,
					"1159": 450
				}
			},
			"11339": {
				name: "100mm Reinforced Titanium Plates I",
				iconID: 79,
				attributes: {
					"30": 5,
					"50": 7,
					"796": 32500,
					"1159": 225
				}
			},
			"11341": {
				name: "100mm Rolled Tungsten Compact Plates",
				iconID: 79,
				attributes: {
					"30": 4,
					"50": 8,
					"796": 35000,
					"1159": 250
				}
			},
			"11343": {
				name: "100mm Crystalline Carbonide Restrained Plates",
				iconID: 79,
				attributes: {
					"30": 5,
					"50": 10,
					"796": 32500,
					"1159": 250
				}
			},
			"11345": {
				name: "100mm Reinforced Nanofiber Plates I",
				iconID: 79,
				attributes: {
					"30": 5,
					"50": 6,
					"796": 35000,
					"1159": 206
				}
			},
			"11347": {
				name: "200mm Reinforced Titanium Plates I",
				iconID: 79,
				attributes: {
					"30": 10,
					"50": 12,
					"796": 130000,
					"1159": 450
				}
			},
			"11349": {
				name: "200mm Rolled Tungsten Compact Plates",
				iconID: 79,
				attributes: {
					"30": 9,
					"50": 11,
					"796": 140000,
					"1159": 500
				}
			},
			"11351": {
				name: "200mm Crystalline Carbonide Restrained Plates",
				iconID: 79,
				attributes: {
					"30": 10,
					"50": 15,
					"796": 120000,
					"1159": 500
				}
			},
			"11353": {
				name: "200mm Reinforced Nanofiber Plates I",
				iconID: 79,
				attributes: {
					"30": 10,
					"50": 11,
					"796": 140000,
					"1159": 413
				}
			},
			"20345": {
				name: "100mm Steel Plates II",
				iconID: 79,
				attributes: {
					"30": 6,
					"50": 12,
					"796": 37500,
					"1159": 300
				}
			},
			"20347": {
				name: "200mm Steel Plates II",
				iconID: 79,
				attributes: {
					"30": 12,
					"50": 16,
					"796": 150000,
					"1159": 600
				}
			},
			"23783": {
				name: "'Abatis' 100mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 3,
					"50": 8,
					"796": 35000,
					"1159": 275
				}
			},
			"23787": {
				name: "'Chainmail' 200mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 8,
					"50": 11,
					"796": 140000,
					"1159": 575
				}
			},
			"23791": {
				name: "'Citadella' 100mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 2,
					"50": 4,
					"796": 25000,
					"1159": 175
				}
			},
			"28778": {
				name: "Syndicate 100mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 4,
					"50": 10,
					"796": 25000,
					"1159": 350
				}
			},
			"28782": {
				name: "Syndicate 200mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 9,
					"50": 14,
					"796": 100000,
					"1159": 650
				}
			},
			"31896": {
				name: "Imperial Navy 100mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 7,
					"50": 8,
					"796": 32500,
					"1159": 375
				}
			},
			"31898": {
				name: "Federation Navy 100mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 6,
					"50": 9,
					"796": 20000,
					"1159": 350
				}
			},
			"31904": {
				name: "Imperial Navy 200mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 13,
					"50": 12,
					"796": 120000,
					"1159": 700
				}
			},
			"31906": {
				name: "Federation Navy 200mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 11,
					"50": 13,
					"796": 90000,
					"1159": 650
				}
			}
		}
	},
	"47817": {
		typeID: 47817,
		name: "Medium Abyssal Armor Plates",
		group: "Armor Plates",
		category: "Medium",
		attributeIds: [
			30,
			50,
			796,
			1159
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 27,
				allSourcesMax: 245,
				allComparisonZero: 194.55000016093254,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 21.600000321865082,
				allMax: 367.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 28,
				allComparisonZero: 27.40000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 42,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 796,
				type: "mutation",
				allSourcesMin: 225000,
				allSourcesMax: 1450000,
				allComparisonZero: 1082499.985396862,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 135000.00536441803,
				allMax: 2029999.965429306,
				name: "Mass Addition",
				iconID: 76,
				unitID: 2,
				highIsGood: false
			},
			{
				id: 1159,
				type: "mutation",
				allSourcesMin: 825,
				allSourcesMax: 2625,
				allComparisonZero: 1994.9999324977398,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 577.4999901652336,
				allMax: 3412.499874830246,
				name: "Armor Hitpoint Bonus",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47813": {
				name: "Decayed Medium Armor Plate Mutaplasmid",
				iconID: 21989,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"796": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"1159": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47814": {
				name: "Unstable Medium Armor Plate Mutaplasmid",
				iconID: 22011,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"796": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"1159": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47815": {
				name: "Gravid Medium Armor Plate Mutaplasmid",
				iconID: 22000,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"796": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"1159": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"11297": {
				name: "400mm Steel Plates I",
				iconID: 79,
				attributes: {
					"30": 30,
					"50": 20,
					"796": 350000,
					"1159": 900
				}
			},
			"11299": {
				name: "800mm Steel Plates I",
				iconID: 79,
				attributes: {
					"30": 200,
					"50": 25,
					"796": 1350000,
					"1159": 1750
				}
			},
			"11307": {
				name: "400mm Reinforced Titanium Plates I",
				iconID: 79,
				attributes: {
					"30": 30,
					"50": 17,
					"796": 325000,
					"1159": 900
				}
			},
			"11309": {
				name: "400mm Rolled Tungsten Compact Plates",
				iconID: 79,
				attributes: {
					"30": 28,
					"50": 17,
					"796": 350000,
					"1159": 1100
				}
			},
			"11311": {
				name: "400mm Crystalline Carbonide Restrained Plates",
				iconID: 79,
				attributes: {
					"30": 30,
					"50": 20,
					"796": 300000,
					"1159": 1100
				}
			},
			"11313": {
				name: "400mm Reinforced Nanofiber Plates I",
				iconID: 79,
				attributes: {
					"30": 30,
					"50": 16,
					"796": 350000,
					"1159": 825
				}
			},
			"11315": {
				name: "800mm Reinforced Titanium Plates I",
				iconID: 79,
				attributes: {
					"30": 200,
					"50": 22,
					"796": 1300000,
					"1159": 1800
				}
			},
			"11317": {
				name: "800mm Rolled Tungsten Compact Plates",
				iconID: 79,
				attributes: {
					"30": 190,
					"50": 22,
					"796": 1350000,
					"1159": 2000
				}
			},
			"11319": {
				name: "800mm Crystalline Carbonide Restrained Plates",
				iconID: 79,
				attributes: {
					"30": 200,
					"50": 25,
					"796": 1200000,
					"1159": 2000
				}
			},
			"11321": {
				name: "800mm Reinforced Nanofiber Plates I",
				iconID: 79,
				attributes: {
					"30": 200,
					"50": 21,
					"796": 1400000,
					"1159": 1650
				}
			},
			"20349": {
				name: "400mm Steel Plates II",
				iconID: 79,
				attributes: {
					"30": 35,
					"50": 23,
					"796": 375000,
					"1159": 1200
				}
			},
			"20351": {
				name: "800mm Steel Plates II",
				iconID: 79,
				attributes: {
					"30": 230,
					"50": 28,
					"796": 1450000,
					"1159": 2400
				}
			},
			"23789": {
				name: "'Bastion' 400mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 27,
					"50": 17,
					"796": 350000,
					"1159": 1150
				}
			},
			"23793": {
				name: "'Barbican' 800mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 185,
					"50": 22,
					"796": 1350000,
					"1159": 2250
				}
			},
			"28784": {
				name: "Syndicate 400mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 29,
					"50": 22,
					"796": 250000,
					"1159": 1300
				}
			},
			"28786": {
				name: "Syndicate 800mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 195,
					"50": 28,
					"796": 1000000,
					"1159": 2500
				}
			},
			"31908": {
				name: "Imperial Navy 400mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 40,
					"50": 18,
					"796": 300000,
					"1159": 1375
				}
			},
			"31910": {
				name: "Federation Navy 400mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 35,
					"50": 20,
					"796": 225000,
					"1159": 1300
				}
			},
			"31916": {
				name: "Imperial Navy 800mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 245,
					"50": 23,
					"796": 1200000,
					"1159": 2625
				}
			},
			"31918": {
				name: "Federation Navy 800mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 230,
					"50": 25,
					"796": 900000,
					"1159": 2500
				}
			}
		}
	},
	"47820": {
		typeID: 47820,
		name: "Large Abyssal Armor Plates",
		group: "Armor Plates",
		category: "Large",
		attributeIds: [
			30,
			50,
			796,
			1159
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 470,
				allSourcesMax: 575,
				allComparisonZero: 619.2500028014183,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 376.0000056028366,
				allMax: 862.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 26,
				allSourcesMax: 35,
				allComparisonZero: 36.650000154972076,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 20.800000309944153,
				allMax: 52.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 796,
				type: "mutation",
				allSourcesMin: 2250000,
				allSourcesMax: 3750000,
				allComparisonZero: 3299999.9821186066,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 1350000.0536441803,
				allMax: 5249999.910593033,
				name: "Mass Addition",
				iconID: 76,
				unitID: 2,
				highIsGood: false
			},
			{
				id: 1159,
				type: "mutation",
				allSourcesMin: 3300,
				allSourcesMax: 5250,
				allComparisonZero: 4567.499855160713,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 2309.9999606609344,
				allMax: 6824.999749660492,
				name: "Armor Hitpoint Bonus",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"47816": {
				name: "Decayed Large Armor Plate Mutaplasmid",
				iconID: 21989,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"796": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"1159": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47818": {
				name: "Unstable Large Armor Plate Mutaplasmid",
				iconID: 22011,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"796": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"1159": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47819": {
				name: "Gravid Large Armor Plate Mutaplasmid",
				iconID: 22000,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"796": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"1159": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"11279": {
				name: "1600mm Steel Plates I",
				iconID: 79,
				attributes: {
					"30": 500,
					"50": 30,
					"796": 3500000,
					"1159": 3500
				}
			},
			"11323": {
				name: "1600mm Reinforced Titanium Plates I",
				iconID: 79,
				attributes: {
					"30": 500,
					"50": 27,
					"796": 3250000,
					"1159": 3600
				}
			},
			"11325": {
				name: "1600mm Rolled Tungsten Compact Plates",
				iconID: 79,
				attributes: {
					"30": 480,
					"50": 27,
					"796": 3500000,
					"1159": 4000
				}
			},
			"11327": {
				name: "1600mm Crystalline Carbonide Restrained Plates",
				iconID: 79,
				attributes: {
					"30": 500,
					"50": 30,
					"796": 3000000,
					"1159": 4000
				}
			},
			"11329": {
				name: "1600mm Reinforced Nanofiber Plates I",
				iconID: 79,
				attributes: {
					"30": 500,
					"50": 26,
					"796": 3500000,
					"1159": 3300
				}
			},
			"20353": {
				name: "1600mm Steel Plates II",
				iconID: 79,
				attributes: {
					"30": 550,
					"50": 35,
					"796": 3750000,
					"1159": 4800
				}
			},
			"23785": {
				name: "'Bailey' 1600mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 470,
					"50": 27,
					"796": 3500000,
					"1159": 4500
				}
			},
			"28780": {
				name: "Syndicate 1600mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 495,
					"50": 35,
					"796": 2500000,
					"1159": 5000
				}
			},
			"31900": {
				name: "Imperial Navy 1600mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 575,
					"50": 27,
					"796": 3000000,
					"1159": 5250
				}
			},
			"31902": {
				name: "Federation Navy 1600mm Steel Plates",
				iconID: 79,
				attributes: {
					"30": 550,
					"50": 30,
					"796": 2250000,
					"1159": 5000
				}
			}
		}
	},
	"47824": {
		typeID: 47824,
		name: "Small Abyssal Energy Neutralizer",
		group: "Energy Neutralizers",
		category: "Small",
		attributeIds: [
			6,
			30,
			50,
			54,
			97,
			2044
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 45,
				allSourcesMax: 45,
				allComparisonZero: 45,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 27.000001072883606,
				allMax: 62.999998927116394,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 7,
				allSourcesMax: 11,
				allComparisonZero: 11.050000041723251,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 5.600000083446503,
				allMax: 16.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 8,
				allSourcesMax: 10,
				allComparisonZero: 10.700000047683716,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 6.400000095367432,
				allMax: 15,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 4000,
				allSourcesMax: 9000,
				allComparisonZero: 7499.999940395355,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 2400.0000953674316,
				allMax: 12599.999785423279,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 97,
				type: "mutation",
				allSourcesMin: 45,
				allSourcesMax: 55,
				allComparisonZero: 51.49999842047691,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 31.499999463558197,
				allMax: 71.49999737739563,
				name: "Neutralization Amount",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 2000,
				allSourcesMax: 4500,
				allComparisonZero: 3250,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"47821": {
				name: "Decayed Small Energy Neutralizer Mutaplasmid",
				iconID: 21987,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"97": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47822": {
				name: "Unstable Small Energy Neutralizer Mutaplasmid",
				iconID: 22009,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"97": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47823": {
				name: "Gravid Small Energy Neutralizer Mutaplasmid",
				iconID: 21998,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"97": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"533": {
				name: "Small Energy Neutralizer I",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 4000,
					"97": 45,
					"2044": 2000
				}
			},
			"4471": {
				name: "Small Infectious Scoped Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 4500,
					"97": 50,
					"2044": 2250
				}
			},
			"4473": {
				name: "Small Rudimentary Energy Destabilizer I",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 4000,
					"97": 50,
					"2044": 2000
				}
			},
			"4475": {
				name: "Small Unstable Power Fluctuator I",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 4000,
					"97": 50,
					"2044": 2000
				}
			},
			"4477": {
				name: "Small Gremlin Compact Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 7,
					"50": 8,
					"54": 4000,
					"97": 50,
					"2044": 2000
				}
			},
			"13003": {
				name: "Small Energy Neutralizer II",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 10,
					"50": 10,
					"54": 5000,
					"97": 55,
					"2044": 2500
				}
			},
			"14160": {
				name: "Dark Blood Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 6000,
					"97": 55,
					"2044": 3000
				}
			},
			"14162": {
				name: "True Sansha Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 6000,
					"97": 55,
					"2044": 3000
				}
			},
			"15794": {
				name: "Ammatar Navy Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 6000,
					"97": 55,
					"2044": 3000
				}
			},
			"15800": {
				name: "Imperial Navy Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 8,
					"50": 10,
					"54": 6000,
					"97": 55,
					"2044": 3000
				}
			},
			"23815": {
				name: "Small 'Caltrop' Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 7,
					"50": 8,
					"54": 5000,
					"97": 55,
					"2044": 2500
				}
			},
			"37622": {
				name: "Corpii C-Type Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 9,
					"50": 10,
					"54": 7000,
					"97": 55,
					"2044": 3500
				}
			},
			"37623": {
				name: "Corpii B-Type Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 10,
					"50": 10,
					"54": 8000,
					"97": 55,
					"2044": 4000
				}
			},
			"37624": {
				name: "Corpii A-Type Small Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 45,
					"30": 11,
					"50": 10,
					"54": 9000,
					"97": 55,
					"2044": 4500
				}
			}
		}
	},
	"47828": {
		typeID: 47828,
		name: "Medium Abyssal Energy Neutralizer",
		group: "Energy Neutralizers",
		category: "Medium",
		attributeIds: [
			6,
			30,
			50,
			54,
			97,
			2044
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 150,
				allSourcesMax: 150,
				allComparisonZero: 150,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 90.00000357627869,
				allMax: 209.9999964237213,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 160,
				allSourcesMax: 228,
				allComparisonZero: 235.00000095367432,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 128.00000190734863,
				allMax: 342,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 20,
				allComparisonZero: 21.40000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 30,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 8000,
				allSourcesMax: 16500,
				allComparisonZero: 13949.999898672104,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 4800.000190734863,
				allMax: 23099.999606609344,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 97,
				type: "mutation",
				allSourcesMin: 150,
				allSourcesMax: 180,
				allComparisonZero: 169.4999948143959,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 104.99999821186066,
				allMax: 233.99999141693115,
				name: "Neutralization Amount",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 4000,
				allSourcesMax: 8250,
				allComparisonZero: 6125,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"47825": {
				name: "Decayed Medium Energy Neutralizer Mutaplasmid",
				iconID: 21987,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"97": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47826": {
				name: "Unstable Medium Energy Neutralizer Mutaplasmid",
				iconID: 22009,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"97": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47827": {
				name: "Gravid Medium Energy Neutralizer Mutaplasmid",
				iconID: 21998,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"97": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"12265": {
				name: "Medium Energy Neutralizer I",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 8000,
					"97": 150,
					"2044": 4000
				}
			},
			"12267": {
				name: "Medium Energy Neutralizer II",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 200,
					"50": 20,
					"54": 10000,
					"97": 180,
					"2044": 5000
				}
			},
			"14164": {
				name: "Dark Blood Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 12000,
					"97": 180,
					"2044": 6000
				}
			},
			"14166": {
				name: "True Sansha Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 12000,
					"97": 180,
					"2044": 6000
				}
			},
			"15796": {
				name: "Ammatar Navy Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 12000,
					"97": 180,
					"2044": 6000
				}
			},
			"15802": {
				name: "Imperial Navy Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 12000,
					"97": 180,
					"2044": 6000
				}
			},
			"16465": {
				name: "Medium Rudimentary Energy Destabilizer I",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 8000,
					"97": 165,
					"2044": 4000
				}
			},
			"16467": {
				name: "Medium Gremlin Compact Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 160,
					"50": 16,
					"54": 8000,
					"97": 165,
					"2044": 4000
				}
			},
			"16469": {
				name: "Medium Infectious Scoped Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 9000,
					"97": 165,
					"2044": 4500
				}
			},
			"16471": {
				name: "Medium Unstable Power Fluctuator I",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 175,
					"50": 20,
					"54": 8000,
					"97": 165,
					"2044": 4000
				}
			},
			"23817": {
				name: "Medium 'Ditch' Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 160,
					"50": 16,
					"54": 10000,
					"97": 180,
					"2044": 5000
				}
			},
			"37625": {
				name: "Corpum C-Type Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 193,
					"50": 20,
					"54": 13500,
					"97": 180,
					"2044": 6750
				}
			},
			"37626": {
				name: "Corpum B-Type Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 210,
					"50": 20,
					"54": 15000,
					"97": 180,
					"2044": 7500
				}
			},
			"37627": {
				name: "Corpum A-Type Medium Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 150,
					"30": 228,
					"50": 20,
					"54": 16500,
					"97": 180,
					"2044": 8250
				}
			}
		}
	},
	"47832": {
		typeID: 47832,
		name: "Heavy Abyssal Energy Neutralizer",
		group: "Energy Neutralizers",
		category: "Heavy",
		attributeIds: [
			6,
			30,
			50,
			54,
			97,
			2044
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 500,
				allComparisonZero: 500,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 300.00001192092896,
				allMax: 699.999988079071,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1800,
				allSourcesMax: 2800,
				allComparisonZero: 2820.000010728836,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1440.0000214576721,
				allMax: 4200,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 32,
				allSourcesMax: 40,
				allComparisonZero: 42.80000019073486,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 25.600000381469727,
				allMax: 60,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 16000,
				allSourcesMax: 32000,
				allComparisonZero: 27199.999809265137,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 9600.000381469727,
				allMax: 44799.99923706055,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 97,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 650,
				allComparisonZero: 597.4999815225601,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 349.9999940395355,
				allMax: 844.9999690055847,
				name: "Neutralization Amount",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 8000,
				allSourcesMax: 16000,
				allComparisonZero: 12000,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"47829": {
				name: "Decayed Heavy Energy Neutralizer Mutaplasmid",
				iconID: 21987,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"97": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"47830": {
				name: "Unstable Heavy Energy Neutralizer Mutaplasmid",
				iconID: 22009,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"97": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"47831": {
				name: "Gravid Heavy Energy Neutralizer Mutaplasmid",
				iconID: 21998,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"97": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"12269": {
				name: "Heavy Energy Neutralizer I",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 16000,
					"97": 500,
					"2044": 8000
				}
			},
			"12271": {
				name: "Heavy Energy Neutralizer II",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2250,
					"50": 40,
					"54": 20000,
					"97": 600,
					"2044": 10000
				}
			},
			"14168": {
				name: "Dark Blood Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 24000,
					"97": 600,
					"2044": 12000
				}
			},
			"14170": {
				name: "True Sansha Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 24000,
					"97": 600,
					"2044": 12000
				}
			},
			"14832": {
				name: "Brokara's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2200,
					"50": 40,
					"54": 26000,
					"97": 650,
					"2044": 13000
				}
			},
			"14834": {
				name: "Tairei's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2200,
					"50": 40,
					"54": 26000,
					"97": 650,
					"2044": 13000
				}
			},
			"14836": {
				name: "Selynne's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2400,
					"50": 40,
					"54": 28000,
					"97": 650,
					"2044": 14000
				}
			},
			"14838": {
				name: "Raysere's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2400,
					"50": 40,
					"54": 28000,
					"97": 650,
					"2044": 14000
				}
			},
			"14840": {
				name: "Vizan's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2600,
					"50": 40,
					"54": 30000,
					"97": 650,
					"2044": 15000
				}
			},
			"14842": {
				name: "Ahremen's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2600,
					"50": 40,
					"54": 30000,
					"97": 650,
					"2044": 15000
				}
			},
			"14844": {
				name: "Chelm's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2800,
					"50": 40,
					"54": 32000,
					"97": 650,
					"2044": 16000
				}
			},
			"14846": {
				name: "Draclira's Modified Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2800,
					"50": 40,
					"54": 32000,
					"97": 650,
					"2044": 16000
				}
			},
			"15798": {
				name: "Ammatar Navy Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 24000,
					"97": 600,
					"2044": 12000
				}
			},
			"15804": {
				name: "Imperial Navy Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 24000,
					"97": 600,
					"2044": 12000
				}
			},
			"16473": {
				name: "Heavy Rudimentary Energy Destabilizer I",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 16000,
					"97": 525,
					"2044": 8000
				}
			},
			"16475": {
				name: "Heavy Gremlin Compact Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 1800,
					"50": 32,
					"54": 16000,
					"97": 550,
					"2044": 8000
				}
			},
			"16477": {
				name: "Heavy Infectious Scoped Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 18000,
					"97": 550,
					"2044": 9000
				}
			},
			"16479": {
				name: "Heavy Unstable Power Fluctuator I",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2000,
					"50": 40,
					"54": 16000,
					"97": 600,
					"2044": 8000
				}
			},
			"23819": {
				name: "Heavy 'Moat' Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 1800,
					"50": 32,
					"54": 20000,
					"97": 600,
					"2044": 10000
				}
			},
			"37628": {
				name: "Corpus C-Type Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2200,
					"50": 40,
					"54": 26000,
					"97": 600,
					"2044": 13000
				}
			},
			"37629": {
				name: "Corpus B-Type Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2400,
					"50": 40,
					"54": 28000,
					"97": 600,
					"2044": 14000
				}
			},
			"37630": {
				name: "Corpus A-Type Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2600,
					"50": 40,
					"54": 30000,
					"97": 600,
					"2044": 15000
				}
			},
			"37631": {
				name: "Corpus X-Type Heavy Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 500,
					"30": 2800,
					"50": 40,
					"54": 32000,
					"97": 600,
					"2044": 16000
				}
			}
		}
	},
	"47836": {
		typeID: 47836,
		name: "Medium Abyssal Ancillary Shield Booster",
		group: "Ancil. Shield Boosters",
		category: "Medium",
		attributeIds: [
			6,
			30,
			50,
			68,
			73,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 198,
				allSourcesMax: 198,
				allComparisonZero: 198,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 118.80000472068787,
				allMax: 277.19999527931213,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 12,
				allSourcesMax: 12,
				allComparisonZero: 13.800000071525574,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 9.600000143051147,
				allMax: 18,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 50,
				allSourcesMax: 50,
				allComparisonZero: 57.500000298023224,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 40.00000059604645,
				allMax: 75,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 146,
				allSourcesMax: 146,
				allComparisonZero: 146.00000435113907,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 116.80000174045563,
				allMax: 175.2000069618225,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 3000,
				allSourcesMax: 3000,
				allComparisonZero: 3000.000089406967,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 2400.000035762787,
				allMax: 3600.0001430511475,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47835": {
				name: "Unstable Medium Ancillary Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"32772": {
				name: "Medium Ancillary Shield Booster",
				iconID: 10935,
				attributes: {
					"6": 198,
					"30": 12,
					"50": 50,
					"68": 146,
					"73": 3000,
					"1795": 60000
				}
			}
		}
	},
	"47838": {
		typeID: 47838,
		name: "Large Abyssal Ancillary Shield Booster",
		group: "Ancil. Shield Boosters",
		category: "Large",
		attributeIds: [
			6,
			30,
			50,
			68,
			73,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 528,
				allSourcesMax: 528,
				allComparisonZero: 528,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 316.800012588501,
				allMax: 739.199987411499,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 150,
				allSourcesMax: 150,
				allComparisonZero: 172.50000089406967,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 120.00000178813934,
				allMax: 225,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 100,
				allSourcesMax: 100,
				allComparisonZero: 115.00000059604645,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 80.0000011920929,
				allMax: 150,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 390,
				allSourcesMax: 390,
				allComparisonZero: 390.00001162290573,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 312.0000046491623,
				allMax: 468.00001859664917,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 4000,
				allSourcesMax: 4000,
				allComparisonZero: 4000.0001192092896,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 3200.000047683716,
				allMax: 4800.000190734863,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47837": {
				name: "Unstable Large Ancillary Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"4391": {
				name: "Large Ancillary Shield Booster",
				iconID: 10935,
				attributes: {
					"6": 528,
					"30": 150,
					"50": 100,
					"68": 390,
					"73": 4000,
					"1795": 60000
				}
			}
		}
	},
	"47840": {
		typeID: 47840,
		name: "X-Large Abyssal Ancillary Shield Booster",
		group: "Ancil. Shield Boosters",
		category: "X-Large",
		attributeIds: [
			6,
			30,
			50,
			68,
			73,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 1320,
				allSourcesMax: 1320,
				allComparisonZero: 1320,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 792.0000314712524,
				allMax: 1847.9999685287476,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 500,
				allComparisonZero: 575.0000029802322,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 400.0000059604645,
				allMax: 750,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 200,
				allSourcesMax: 200,
				allComparisonZero: 230.0000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 160.0000023841858,
				allMax: 300,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 980,
				allSourcesMax: 980,
				allComparisonZero: 980.0000292062759,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 784.0000116825104,
				allMax: 1176.0000467300415,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 5000,
				allSourcesMax: 5000,
				allComparisonZero: 5000.000149011612,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 4000.000059604645,
				allMax: 6000.000238418579,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47839": {
				name: "Unstable X-Large Ancillary Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"32780": {
				name: "X-Large Ancillary Shield Booster",
				iconID: 10935,
				attributes: {
					"6": 1320,
					"30": 500,
					"50": 200,
					"68": 980,
					"73": 5000,
					"1795": 60000
				}
			}
		}
	},
	"47842": {
		typeID: 47842,
		name: "Small Abyssal Ancillary Armor Repairer",
		group: "Ancil. Armor Repairers",
		category: "Small",
		attributeIds: [
			6,
			30,
			50,
			73,
			84,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 40,
				allSourcesMax: 40,
				allComparisonZero: 40,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 24.000000953674316,
				allMax: 55.999999046325684,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 5,
				allSourcesMax: 5,
				allComparisonZero: 5.750000029802322,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 4.000000059604645,
				allMax: 7.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 5,
				allSourcesMax: 5,
				allComparisonZero: 5.750000029802322,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 4.000000059604645,
				allMax: 7.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 6000,
				allSourcesMax: 6000,
				allComparisonZero: 6000.000178813934,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 4800.000071525574,
				allMax: 7200.000286102295,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 52,
				allSourcesMax: 52,
				allComparisonZero: 52.000001549720764,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 41.600000619888306,
				allMax: 62.40000247955322,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47841": {
				name: "Unstable Small Ancillary Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"33076": {
				name: "Small Ancillary Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 40,
					"30": 5,
					"50": 5,
					"73": 6000,
					"84": 52,
					"1795": 60000
				}
			}
		}
	},
	"47844": {
		typeID: 47844,
		name: "Medium Abyssal Ancillary Armor Repairer",
		group: "Ancil. Armor Repairers",
		category: "Medium",
		attributeIds: [
			6,
			30,
			50,
			73,
			84,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 160,
				allSourcesMax: 160,
				allComparisonZero: 160,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 96.00000381469727,
				allMax: 223.99999618530273,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 120,
				allSourcesMax: 120,
				allComparisonZero: 138.00000071525574,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 96.00000143051147,
				allMax: 180,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 25,
				allSourcesMax: 25,
				allComparisonZero: 28.750000149011612,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 20.000000298023224,
				allMax: 37.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 12000,
				allSourcesMax: 12000,
				allComparisonZero: 12000.000357627869,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 9600.000143051147,
				allMax: 14400.00057220459,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 207,
				allSourcesMax: 207,
				allComparisonZero: 207.00000616908073,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 165.6000024676323,
				allMax: 248.40000987052917,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47843": {
				name: "Unstable Medium Ancillary Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"33101": {
				name: "Medium Ancillary Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 160,
					"30": 120,
					"50": 25,
					"73": 12000,
					"84": 207,
					"1795": 60000
				}
			}
		}
	},
	"47846": {
		typeID: 47846,
		name: "Large Abyssal Ancillary Armor Repairer",
		group: "Ancil. Armor Repairers",
		category: "Large",
		attributeIds: [
			6,
			30,
			50,
			73,
			84,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 400,
				allSourcesMax: 400,
				allComparisonZero: 400,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 240.00000953674316,
				allMax: 559.9999904632568,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1800,
				allSourcesMax: 1800,
				allComparisonZero: 2070.000010728836,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1440.0000214576721,
				allMax: 2700,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 50,
				allSourcesMax: 50,
				allComparisonZero: 57.500000298023224,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 40.00000059604645,
				allMax: 75,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 15000,
				allSourcesMax: 15000,
				allComparisonZero: 15000.000447034836,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 12000.000178813934,
				allMax: 18000.000715255737,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 518,
				allSourcesMax: 518,
				allComparisonZero: 518.000015437603,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 414.4000061750412,
				allMax: 621.6000247001648,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"47845": {
				name: "Unstable Large Ancillary Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"33103": {
				name: "Large Ancillary Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 400,
					"30": 1800,
					"50": 50,
					"73": 15000,
					"84": 518,
					"1795": 60000
				}
			}
		}
	},
	"48419": {
		typeID: 48419,
		name: "Small Abyssal Energy Nosferatu",
		group: "Energy Nosferatus",
		category: "Small",
		attributeIds: [
			30,
			50,
			54,
			90,
			2044
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 7,
				allSourcesMax: 11,
				allComparisonZero: 11.050000041723251,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 5.600000083446503,
				allMax: 16.5,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 12,
				allSourcesMax: 15,
				allComparisonZero: 16.050000071525574,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 9.600000143051147,
				allMax: 22.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 4000,
				allSourcesMax: 9000,
				allComparisonZero: 7499.999940395355,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 2400.0000953674316,
				allMax: 12599.999785423279,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 90,
				type: "mutation",
				allSourcesMin: 8,
				allSourcesMax: 10,
				allComparisonZero: 9.299999713897705,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 5.599999904632568,
				allMax: 12.999999523162842,
				name: "Energy transfer amount",
				iconID: 1033,
				unitID: 120,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 2000,
				allSourcesMax: 4500,
				allComparisonZero: 3250,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"48416": {
				name: "Decayed Small Energy Nosferatu Mutaplasmid",
				iconID: 21988,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"90": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48417": {
				name: "Gravid Small Energy Nosferatu Mutaplasmid",
				iconID: 21999,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"90": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48418": {
				name: "Unstable Small Energy Nosferatu Mutaplasmid",
				iconID: 22010,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"90": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"530": {
				name: "Small Energy Nosferatu I",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 4000,
					"90": 8,
					"2044": 2000
				}
			},
			"5137": {
				name: "Small Knave Scoped Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 4500,
					"90": 9,
					"2044": 2250
				}
			},
			"5141": {
				name: "Small Ghoul Compact Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 7,
					"50": 12,
					"54": 4000,
					"90": 9,
					"2044": 2000
				}
			},
			"13001": {
				name: "Small Energy Nosferatu II",
				iconID: 1029,
				attributes: {
					"30": 10,
					"50": 15,
					"54": 5000,
					"90": 10,
					"2044": 2500
				}
			},
			"14148": {
				name: "Dark Blood Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 6000,
					"90": 10,
					"2044": 3000
				}
			},
			"14150": {
				name: "True Sansha Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 6000,
					"90": 10,
					"2044": 3000
				}
			},
			"15875": {
				name: "Ammatar Navy Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 6000,
					"90": 10,
					"2044": 3000
				}
			},
			"15881": {
				name: "Imperial Navy Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 8,
					"50": 15,
					"54": 6000,
					"90": 10,
					"2044": 3000
				}
			},
			"19101": {
				name: "Corpii C-Type Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 9,
					"50": 15,
					"54": 7000,
					"90": 10,
					"2044": 3500
				}
			},
			"19103": {
				name: "Corpii B-Type Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 10,
					"50": 15,
					"54": 8000,
					"90": 10,
					"2044": 4000
				}
			},
			"19105": {
				name: "Corpii A-Type Small Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 11,
					"50": 15,
					"54": 9000,
					"90": 10,
					"2044": 4500
				}
			},
			"23821": {
				name: "Small 'Upir' Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 7,
					"50": 12,
					"54": 5000,
					"90": 10,
					"2044": 2500
				}
			}
		}
	},
	"48423": {
		typeID: 48423,
		name: "Medium Abyssal Energy Nosferatu",
		group: "Energy Nosferatus",
		category: "Medium",
		attributeIds: [
			30,
			50,
			54,
			90,
			2044
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 160,
				allSourcesMax: 228,
				allComparisonZero: 235.00000095367432,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 128.00000190734863,
				allMax: 342,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 20,
				allSourcesMax: 25,
				allComparisonZero: 26.75000011920929,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 16.00000023841858,
				allMax: 37.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 8000,
				allSourcesMax: 16500,
				allComparisonZero: 13949.999898672104,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 4800.000190734863,
				allMax: 23099.999606609344,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 90,
				type: "mutation",
				allSourcesMin: 30,
				allSourcesMax: 36,
				allComparisonZero: 33.89999896287918,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 20.99999964237213,
				allMax: 46.79999828338623,
				name: "Energy transfer amount",
				iconID: 1033,
				unitID: 120,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 4000,
				allSourcesMax: 8250,
				allComparisonZero: 6125,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"48420": {
				name: "Decayed Medium Energy Nosferatu Mutaplasmid",
				iconID: 21988,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"90": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48421": {
				name: "Gravid Medium Energy Nosferatu Mutaplasmid",
				iconID: 21999,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"90": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48422": {
				name: "Unstable Medium Energy Nosferatu Mutaplasmid",
				iconID: 22010,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"90": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"12257": {
				name: "Medium Energy Nosferatu I",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 8000,
					"90": 30,
					"2044": 4000
				}
			},
			"12259": {
				name: "Medium Energy Nosferatu II",
				iconID: 1029,
				attributes: {
					"30": 200,
					"50": 25,
					"54": 10000,
					"90": 36,
					"2044": 5000
				}
			},
			"14156": {
				name: "Dark Blood Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 12000,
					"90": 36,
					"2044": 6000
				}
			},
			"14158": {
				name: "True Sansha Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 12000,
					"90": 36,
					"2044": 6000
				}
			},
			"15877": {
				name: "Ammatar Navy Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 12000,
					"90": 36,
					"2044": 6000
				}
			},
			"15883": {
				name: "Imperial Navy Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 12000,
					"90": 36,
					"2044": 6000
				}
			},
			"16505": {
				name: "Medium Ghoul Compact Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 160,
					"50": 20,
					"54": 8000,
					"90": 33,
					"2044": 4000
				}
			},
			"16507": {
				name: "Medium Knave Scoped Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 175,
					"50": 25,
					"54": 9000,
					"90": 33,
					"2044": 4500
				}
			},
			"19107": {
				name: "Corpum C-Type Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 193,
					"50": 25,
					"54": 13500,
					"90": 36,
					"2044": 6750
				}
			},
			"19109": {
				name: "Corpum B-Type Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 210,
					"50": 25,
					"54": 15000,
					"90": 36,
					"2044": 7500
				}
			},
			"19111": {
				name: "Corpum A-Type Medium Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 228,
					"50": 25,
					"54": 16500,
					"90": 36,
					"2044": 8250
				}
			},
			"23824": {
				name: "Medium 'Strigoi' Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 160,
					"50": 20,
					"54": 10000,
					"90": 36,
					"2044": 5000
				}
			}
		}
	},
	"48427": {
		typeID: 48427,
		name: "Heavy Abyssal Energy Nosferatu",
		group: "Energy Nosferatus",
		category: "Heavy",
		attributeIds: [
			30,
			50,
			54,
			90,
			2044
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 1800,
				allSourcesMax: 2800,
				allComparisonZero: 2820.000010728836,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 1440.0000214576721,
				allMax: 4200,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 40,
				allSourcesMax: 50,
				allComparisonZero: 53.50000023841858,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 32.00000047683716,
				allMax: 75,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 16000,
				allSourcesMax: 32000,
				allComparisonZero: 27199.999809265137,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 9600.000381469727,
				allMax: 44799.99923706055,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 90,
				type: "mutation",
				allSourcesMin: 100,
				allSourcesMax: 130,
				allComparisonZero: 119.49999630451202,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 69.9999988079071,
				allMax: 168.99999380111694,
				name: "Energy transfer amount",
				iconID: 1033,
				unitID: 120,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 8000,
				allSourcesMax: 16000,
				allComparisonZero: 12000,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"48424": {
				name: "Decayed Heavy Energy Nosferatu Mutaplasmid",
				iconID: 21988,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"90": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48425": {
				name: "Gravid Heavy Energy Nosferatu Mutaplasmid",
				iconID: 21999,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"90": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48426": {
				name: "Unstable Heavy Energy Nosferatu Mutaplasmid",
				iconID: 22010,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"90": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"12261": {
				name: "Heavy Energy Nosferatu I",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 16000,
					"90": 100,
					"2044": 8000
				}
			},
			"12263": {
				name: "Heavy Energy Nosferatu II",
				iconID: 1029,
				attributes: {
					"30": 2250,
					"50": 50,
					"54": 20000,
					"90": 120,
					"2044": 10000
				}
			},
			"14152": {
				name: "Dark Blood Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 24000,
					"90": 120,
					"2044": 12000
				}
			},
			"14154": {
				name: "True Sansha Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 24000,
					"90": 120,
					"2044": 12000
				}
			},
			"14816": {
				name: "Brokara's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2200,
					"50": 50,
					"54": 26000,
					"90": 130,
					"2044": 13000
				}
			},
			"14818": {
				name: "Tairei's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2200,
					"50": 50,
					"54": 26000,
					"90": 130,
					"2044": 13000
				}
			},
			"14820": {
				name: "Selynne's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2400,
					"50": 50,
					"54": 28000,
					"90": 130,
					"2044": 14000
				}
			},
			"14822": {
				name: "Raysere's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2400,
					"50": 50,
					"54": 28000,
					"90": 130,
					"2044": 14000
				}
			},
			"14824": {
				name: "Vizan's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2600,
					"50": 50,
					"54": 30000,
					"90": 130,
					"2044": 15000
				}
			},
			"14826": {
				name: "Ahremen's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2600,
					"50": 50,
					"54": 30000,
					"90": 130,
					"2044": 15000
				}
			},
			"14828": {
				name: "Chelm's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2800,
					"50": 50,
					"54": 32000,
					"90": 130,
					"2044": 16000
				}
			},
			"14830": {
				name: "Draclira's Modified Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2800,
					"50": 50,
					"54": 32000,
					"90": 130,
					"2044": 16000
				}
			},
			"15879": {
				name: "Ammatar Navy Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 24000,
					"90": 120,
					"2044": 12000
				}
			},
			"15885": {
				name: "Imperial Navy Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 24000,
					"90": 120,
					"2044": 12000
				}
			},
			"16497": {
				name: "Heavy Ghoul Compact Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 1800,
					"50": 40,
					"54": 16000,
					"90": 110,
					"2044": 8000
				}
			},
			"16499": {
				name: "Heavy Knave Scoped Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2000,
					"50": 50,
					"54": 18000,
					"90": 110,
					"2044": 9000
				}
			},
			"19113": {
				name: "Corpus C-Type Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2200,
					"50": 50,
					"54": 26000,
					"90": 120,
					"2044": 13000
				}
			},
			"19115": {
				name: "Corpus B-Type Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2400,
					"50": 50,
					"54": 28000,
					"90": 120,
					"2044": 14000
				}
			},
			"19117": {
				name: "Corpus A-Type Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2600,
					"50": 50,
					"54": 30000,
					"90": 120,
					"2044": 15000
				}
			},
			"19119": {
				name: "Corpus X-Type Heavy Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 2800,
					"50": 50,
					"54": 32000,
					"90": 120,
					"2044": 16000
				}
			},
			"23829": {
				name: "Heavy 'Vrykolakas' Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 1800,
					"50": 40,
					"54": 20000,
					"90": 120,
					"2044": 10000
				}
			}
		}
	},
	"48431": {
		typeID: 48431,
		name: "Small Abyssal Cap Battery",
		group: "Cap Batteries",
		category: "Small",
		attributeIds: [
			30,
			50,
			67,
			2267
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 5,
				allSourcesMax: 10,
				allComparisonZero: 9.500000029802322,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 4.000000059604645,
				allMax: 15,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 12,
				allSourcesMax: 24,
				allComparisonZero: 22.800000071525574,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 9.600000143051147,
				allMax: 36,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 67,
				type: "mutation",
				allSourcesMin: 120,
				allSourcesMax: 168,
				allComparisonZero: 151.19999527931213,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 83.99999856948853,
				allMax: 218.39999198913574,
				name: "Capacitor Bonus",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2267,
				type: "mutation",
				allSourcesMin: -28,
				allSourcesMax: -20,
				allComparisonZero: -22.799999356269836,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: -19.59999966621399,
				allMax: -25.999999046325684,
				name: "Capacitor Warfare Resistance Bonus",
				iconID: 89,
				unitID: 105,
				highIsGood: false
			}
		],
		mutators: {
			"48428": {
				name: "Decayed Small Cap Battery Mutaplasmid",
				iconID: 22029,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"67": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"2267": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48429": {
				name: "Gravid Small Cap Battery Mutaplasmid",
				iconID: 22030,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"67": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"2267": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48430": {
				name: "Unstable Small Cap Battery Mutaplasmid",
				iconID: 22031,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"67": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"2267": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"1185": {
				name: "Small Cap Battery I",
				iconID: 89,
				attributes: {
					"30": 8,
					"50": 20,
					"67": 120,
					"2267": -20
				}
			},
			"3488": {
				name: "Small Cap Battery II",
				iconID: 89,
				attributes: {
					"30": 10,
					"50": 24,
					"67": 150,
					"2267": -25
				}
			},
			"4787": {
				name: "Small Compact Pb-Acid Cap Battery",
				iconID: 89,
				attributes: {
					"30": 6,
					"50": 16,
					"67": 132,
					"2267": -22
				}
			},
			"23801": {
				name: "'Crucible' Small Cap Battery",
				iconID: 89,
				attributes: {
					"30": 5,
					"50": 12,
					"67": 150,
					"2267": -25
				}
			},
			"41212": {
				name: "Republic Fleet Small Cap Battery",
				iconID: 89,
				attributes: {
					"30": 6,
					"50": 16,
					"67": 168,
					"2267": -27
				}
			},
			"41213": {
				name: "Domination Small Cap Battery",
				iconID: 89,
				attributes: {
					"30": 6,
					"50": 16,
					"67": 168,
					"2267": -27
				}
			},
			"41214": {
				name: "Thukker Small Cap Battery",
				iconID: 89,
				attributes: {
					"30": 5,
					"50": 17,
					"67": 162,
					"2267": -28
				}
			}
		}
	},
	"48435": {
		typeID: 48435,
		name: "Medium Abyssal Cap Battery",
		group: "Cap Batteries",
		category: "Medium",
		attributeIds: [
			30,
			50,
			67,
			2267
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 45,
				allSourcesMax: 90,
				allComparisonZero: 85.5000002682209,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 36.0000005364418,
				allMax: 135,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 21,
				allSourcesMax: 42,
				allComparisonZero: 39.900000125169754,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 16.800000250339508,
				allMax: 63,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 67,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 700,
				allComparisonZero: 629.9999803304672,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 349.9999940395355,
				allMax: 909.9999666213989,
				name: "Capacitor Bonus",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2267,
				type: "mutation",
				allSourcesMin: -28,
				allSourcesMax: -20,
				allComparisonZero: -22.799999356269836,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: -19.59999966621399,
				allMax: -25.999999046325684,
				name: "Capacitor Warfare Resistance Bonus",
				iconID: 89,
				unitID: 105,
				highIsGood: false
			}
		],
		mutators: {
			"48432": {
				name: "Decayed Medium Cap Battery Mutaplasmid",
				iconID: 22029,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"67": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"2267": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48433": {
				name: "Gravid Medium Cap Battery Mutaplasmid",
				iconID: 22030,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"67": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"2267": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48434": {
				name: "Unstable Medium Cap Battery Mutaplasmid",
				iconID: 22031,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"67": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"2267": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"2018": {
				name: "Medium Cap Battery I",
				iconID: 89,
				attributes: {
					"30": 75,
					"50": 35,
					"67": 500,
					"2267": -20
				}
			},
			"3496": {
				name: "Medium Cap Battery II",
				iconID: 89,
				attributes: {
					"30": 90,
					"50": 42,
					"67": 625,
					"2267": -25
				}
			},
			"6073": {
				name: "Medium Compact Pb-Acid Cap Battery",
				iconID: 89,
				attributes: {
					"30": 60,
					"50": 28,
					"67": 550,
					"2267": -22
				}
			},
			"23803": {
				name: "'Censer' Medium Cap Battery",
				iconID: 89,
				attributes: {
					"30": 45,
					"50": 21,
					"67": 625,
					"2267": -25
				}
			},
			"41215": {
				name: "Republic Fleet Medium Cap Battery",
				iconID: 89,
				attributes: {
					"30": 60,
					"50": 28,
					"67": 700,
					"2267": -27
				}
			},
			"41216": {
				name: "Domination Medium Cap Battery",
				iconID: 89,
				attributes: {
					"30": 60,
					"50": 28,
					"67": 700,
					"2267": -27
				}
			},
			"41217": {
				name: "Thukker Medium Cap Battery",
				iconID: 89,
				attributes: {
					"30": 52,
					"50": 29,
					"67": 675,
					"2267": -28
				}
			}
		}
	},
	"48439": {
		typeID: 48439,
		name: "Large Abyssal Cap Battery",
		group: "Cap Batteries",
		category: "Large",
		attributeIds: [
			30,
			50,
			67,
			2267
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 240,
				allSourcesMax: 480,
				allComparisonZero: 456.0000014305115,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 192.00000286102295,
				allMax: 720,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 30,
				allSourcesMax: 60,
				allComparisonZero: 57.000000178813934,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 24.00000035762787,
				allMax: 90,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 67,
				type: "mutation",
				allSourcesMin: 1300,
				allSourcesMax: 1820,
				allComparisonZero: 1637.9999488592148,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 909.9999845027924,
				allMax: 2365.999913215637,
				name: "Capacitor Bonus",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2267,
				type: "mutation",
				allSourcesMin: -28,
				allSourcesMax: -20,
				allComparisonZero: -22.799999356269836,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: -19.59999966621399,
				allMax: -25.999999046325684,
				name: "Capacitor Warfare Resistance Bonus",
				iconID: 89,
				unitID: 105,
				highIsGood: false
			}
		],
		mutators: {
			"48436": {
				name: "Decayed Large Cap Battery Mutaplasmid",
				iconID: 22029,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"67": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"2267": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"48437": {
				name: "Gravid Large Cap Battery Mutaplasmid",
				iconID: 22030,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"67": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					},
					"2267": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			},
			"48438": {
				name: "Unstable Large Cap Battery Mutaplasmid",
				iconID: 22031,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"67": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"2267": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"2020": {
				name: "Large Cap Battery I",
				iconID: 89,
				attributes: {
					"30": 400,
					"50": 50,
					"67": 1300,
					"2267": -20
				}
			},
			"3504": {
				name: "Large Cap Battery II",
				iconID: 89,
				attributes: {
					"30": 480,
					"50": 60,
					"67": 1625,
					"2267": -25
				}
			},
			"4871": {
				name: "Large Compact Pb-Acid Cap Battery",
				iconID: 89,
				attributes: {
					"30": 320,
					"50": 40,
					"67": 1430,
					"2267": -22
				}
			},
			"23805": {
				name: "'Thurifer' Large Cap Battery",
				iconID: 89,
				attributes: {
					"30": 240,
					"50": 30,
					"67": 1625,
					"2267": -25
				}
			},
			"41218": {
				name: "Republic Fleet Large Cap Battery",
				iconID: 89,
				attributes: {
					"30": 320,
					"50": 40,
					"67": 1820,
					"2267": -27
				}
			},
			"41219": {
				name: "Domination Large Cap Battery",
				iconID: 89,
				attributes: {
					"30": 320,
					"50": 40,
					"67": 1820,
					"2267": -27
				}
			},
			"41220": {
				name: "Thukker Large Cap Battery",
				iconID: 89,
				attributes: {
					"30": 280,
					"50": 42,
					"67": 1755,
					"2267": -28
				}
			}
		}
	},
	"49722": {
		typeID: 49722,
		name: "Abyssal Magnetic Field Stabilizer",
		group: "Damage Modules",
		category: "Mag. Field Stab.",
		attributeIds: [
			50,
			64,
			204
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 33,
				allComparisonZero: 31.15000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 49.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.055,
				allSourcesMax: 1.145,
				allComparisonZero: 1.100899999141693,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 1.033900020122528,
				allMax: 1.167899978160858,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 204,
				type: "mutation",
				allSourcesMin: 0.89,
				allSourcesMax: 0.945,
				allComparisonZero: 0.9181874993443488,
				allMutatorsMax: 1.024999976158142,
				allMutatorsMin: 0.9750000238418579,
				allMin: 0.8677500212192536,
				allMax: 0.9686249774694442,
				name: "rate of fire bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			}
		],
		mutators: {
			"49723": {
				name: "Decayed Magnetic Field Stabilizer Mutaplasmid",
				iconID: 22064,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"64": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					},
					"204": {
						max: 1.0099999904632568,
						min: 0.9850000143051147
					}
				}
			},
			"49724": {
				name: "Gravid Magnetic Field Stabilizer Mutaplasmid",
				iconID: 22065,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"64": {
						max: 1.0140000581741333,
						min: 0.9890000224113464
					},
					"204": {
						max: 1.0149999856948853,
						min: 0.9800000190734863
					}
				}
			},
			"49725": {
				name: "Unstable Magnetic Field Stabilizer Mutaplasmid",
				iconID: 22066,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"64": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					},
					"204": {
						max: 1.024999976158142,
						min: 0.9750000238418579
					}
				}
			}
		},
		sources: {
			"9944": {
				name: "Magnetic Field Stabilizer I",
				iconID: 1046,
				attributes: {
					"50": 27,
					"64": 1.07,
					"204": 0.92
				}
			},
			"10188": {
				name: "'Basic' Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 16,
					"64": 1.07,
					"204": 0.93
				}
			},
			"10190": {
				name: "Magnetic Field Stabilizer II",
				iconID: 1046,
				attributes: {
					"50": 30,
					"64": 1.1,
					"204": 0.895
				}
			},
			"11101": {
				name: "Linear Flux Stabilizer I",
				iconID: 1046,
				attributes: {
					"50": 32,
					"64": 1.084,
					"204": 0.91
				}
			},
			"11103": {
				name: "Insulated Stabilizer Array I",
				iconID: 1046,
				attributes: {
					"50": 31,
					"64": 1.077,
					"204": 0.9175
				}
			},
			"11105": {
				name: "Vortex Compact Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.08,
					"204": 0.905
				}
			},
			"11107": {
				name: "Gauss Field Balancer I",
				iconID: 1046,
				attributes: {
					"50": 33,
					"64": 1.091,
					"204": 0.9025
				}
			},
			"11109": {
				name: "Linear Flux Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.06,
					"204": 0.94
				}
			},
			"11111": {
				name: "Insulated Stabilizer Array",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.055,
					"204": 0.945
				}
			},
			"11113": {
				name: "Magnetic Vortex Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.07,
					"204": 0.93
				}
			},
			"11115": {
				name: "Gauss Field Balancer",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.065,
					"204": 0.935
				}
			},
			"13945": {
				name: "Shadow Serpentis Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"15144": {
				name: "Brynn's Modified Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 22,
					"64": 1.13,
					"204": 0.89
				}
			},
			"15146": {
				name: "Tuvan's Modified Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.135,
					"204": 0.89
				}
			},
			"15148": {
				name: "Setele's Modified Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.14,
					"204": 0.89
				}
			},
			"15150": {
				name: "Cormack's Modified Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.145,
					"204": 0.89
				}
			},
			"15416": {
				name: "Naiyon's Modified Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.1375,
					"204": 0.895
				}
			},
			"15895": {
				name: "Federation Navy Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"22917": {
				name: "'Capitalist' Magnetic Field Stabilizer I",
				iconID: 1046,
				attributes: {
					"50": 27,
					"64": 1.09,
					"204": 0.9
				}
			},
			"22919": {
				name: "'Monopoly' Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 18,
					"64": 1.1,
					"204": 0.895
				}
			},
			"44113": {
				name: "Kaatara's Custom Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 29,
					"64": 1.1,
					"204": 0.9
				}
			},
			"44114": {
				name: "Torelle's Custom Magnetic Field Stabilizer",
				iconID: 1046,
				attributes: {
					"50": 29,
					"64": 1.1,
					"204": 0.9
				}
			}
		}
	},
	"49726": {
		typeID: 49726,
		name: "Abyssal Heat Sink",
		group: "Damage Modules",
		category: "Heat Sink",
		attributeIds: [
			50,
			64,
			204
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 33,
				allComparisonZero: 31.15000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 49.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.055,
				allSourcesMax: 1.15,
				allComparisonZero: 1.1034499990940092,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 1.033900020122528,
				allMax: 1.1729999780654907,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 204,
				type: "mutation",
				allSourcesMin: 0.89,
				allSourcesMax: 0.945,
				allComparisonZero: 0.9181874993443488,
				allMutatorsMax: 1.024999976158142,
				allMutatorsMin: 0.9750000238418579,
				allMin: 0.8677500212192536,
				allMax: 0.9686249774694442,
				name: "rate of fire bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			}
		],
		mutators: {
			"49727": {
				name: "Decayed Heat Sink Mutaplasmid",
				iconID: 22064,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"64": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					},
					"204": {
						max: 1.0099999904632568,
						min: 0.9850000143051147
					}
				}
			},
			"49728": {
				name: "Gravid Heat Sink Mutaplasmid",
				iconID: 22065,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"64": {
						max: 1.0140000581741333,
						min: 0.9890000224113464
					},
					"204": {
						max: 1.0149999856948853,
						min: 0.9800000190734863
					}
				}
			},
			"49729": {
				name: "Unstable Heat Sink Mutaplasmid",
				iconID: 22066,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"64": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					},
					"204": {
						max: 1.024999976158142,
						min: 0.9750000238418579
					}
				}
			}
		},
		sources: {
			"1893": {
				name: "'Basic' Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 16,
					"64": 1.07,
					"204": 0.93
				}
			},
			"2363": {
				name: "Heat Sink I",
				iconID: 1046,
				attributes: {
					"50": 27,
					"64": 1.07,
					"204": 0.92
				}
			},
			"2364": {
				name: "Heat Sink II",
				iconID: 1046,
				attributes: {
					"50": 30,
					"64": 1.1,
					"204": 0.895
				}
			},
			"5845": {
				name: "Heat Exhaust System",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.055,
					"204": 0.945
				}
			},
			"5846": {
				name: "Thermal Exhaust System I",
				iconID: 1046,
				attributes: {
					"50": 31,
					"64": 1.077,
					"204": 0.9175
				}
			},
			"5849": {
				name: "Extruded Compact Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.08,
					"204": 0.905
				}
			},
			"5854": {
				name: "Stamped Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.07,
					"204": 0.93
				}
			},
			"5855": {
				name: "'Boreas' Coolant System",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.065,
					"204": 0.935
				}
			},
			"5856": {
				name: "C3S Convection Thermal Radiator",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.06,
					"204": 0.94
				}
			},
			"5857": {
				name: "'Skadi' Coolant System I",
				iconID: 1046,
				attributes: {
					"50": 33,
					"64": 1.091,
					"204": 0.9025
				}
			},
			"5858": {
				name: "C4S Coiled Circuit Thermal Radiator",
				iconID: 1046,
				attributes: {
					"50": 32,
					"64": 1.084,
					"204": 0.91
				}
			},
			"13941": {
				name: "Dark Blood Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"13943": {
				name: "True Sansha Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"14800": {
				name: "Brokara's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 22,
					"64": 1.13,
					"204": 0.89
				}
			},
			"14802": {
				name: "Tairei's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 22,
					"64": 1.13,
					"204": 0.89
				}
			},
			"14804": {
				name: "Selynne's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.135,
					"204": 0.89
				}
			},
			"14806": {
				name: "Raysere's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.135,
					"204": 0.89
				}
			},
			"14808": {
				name: "Vizan's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.14,
					"204": 0.89
				}
			},
			"14810": {
				name: "Ahremen's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.14,
					"204": 0.89
				}
			},
			"14812": {
				name: "Chelm's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.145,
					"204": 0.89
				}
			},
			"14814": {
				name: "Draclira's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.145,
					"204": 0.89
				}
			},
			"15397": {
				name: "Luther Veron's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.15,
					"204": 0.895
				}
			},
			"15435": {
				name: "Makur's Modified Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.15,
					"204": 0.895
				}
			},
			"15808": {
				name: "Ammatar Navy Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"15810": {
				name: "Imperial Navy Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"23900": {
				name: "'Mangonel' Heat Sink I",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.085,
					"204": 0.905
				}
			},
			"23902": {
				name: "'Trebuchet' Heat Sink I",
				iconID: 1046,
				attributes: {
					"50": 18,
					"64": 1.1,
					"204": 0.895
				}
			},
			"44111": {
				name: "Tahron's Custom Heat Sink",
				iconID: 1046,
				attributes: {
					"50": 29,
					"64": 1.1,
					"204": 0.9
				}
			}
		}
	},
	"49730": {
		typeID: 49730,
		name: "Abyssal Gyrostabilizer",
		group: "Damage Modules",
		category: "Gyrostabilizer",
		attributeIds: [
			50,
			64,
			204
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 33,
				allComparisonZero: 31.15000009536743,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.800000190734863,
				allMax: 49.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.055,
				allSourcesMax: 1.15,
				allComparisonZero: 1.1034499990940092,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 1.033900020122528,
				allMax: 1.1729999780654907,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 204,
				type: "mutation",
				allSourcesMin: 0.89,
				allSourcesMax: 0.945,
				allComparisonZero: 0.9181874993443488,
				allMutatorsMax: 1.024999976158142,
				allMutatorsMin: 0.9750000238418579,
				allMin: 0.8677500212192536,
				allMax: 0.9686249774694442,
				name: "rate of fire bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			}
		],
		mutators: {
			"49731": {
				name: "Decayed Gyrostabilizer Mutaplasmid",
				iconID: 22064,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"64": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					},
					"204": {
						max: 1.0099999904632568,
						min: 0.9850000143051147
					}
				}
			},
			"49732": {
				name: "Gravid Gyrostabilizer Mutaplasmid",
				iconID: 22065,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"64": {
						max: 1.0140000581741333,
						min: 0.9890000224113464
					},
					"204": {
						max: 1.0149999856948853,
						min: 0.9800000190734863
					}
				}
			},
			"49733": {
				name: "Unstable Gyrostabilizer Mutaplasmid",
				iconID: 22066,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"64": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					},
					"204": {
						max: 1.024999976158142,
						min: 0.9750000238418579
					}
				}
			}
		},
		sources: {
			"518": {
				name: "'Basic' Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 16,
					"64": 1.07,
					"204": 0.93
				}
			},
			"519": {
				name: "Gyrostabilizer II",
				iconID: 1046,
				attributes: {
					"50": 30,
					"64": 1.1,
					"204": 0.895
				}
			},
			"520": {
				name: "Gyrostabilizer I",
				iconID: 1046,
				attributes: {
					"50": 27,
					"64": 1.07,
					"204": 0.92
				}
			},
			"5913": {
				name: "Hydraulic Stabilization Actuator",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.065,
					"204": 0.935
				}
			},
			"5915": {
				name: "Lateral Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.055,
					"204": 0.945
				}
			},
			"5917": {
				name: "Stabilized Weapon Mounts",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.07,
					"204": 0.93
				}
			},
			"5919": {
				name: "F-M2 Weapon Inertial Suspensor",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.06,
					"204": 0.94
				}
			},
			"5929": {
				name: "Pneumatic Stabilization Actuator I",
				iconID: 1046,
				attributes: {
					"50": 33,
					"64": 1.091,
					"204": 0.9025
				}
			},
			"5931": {
				name: "Cross-Lateral Gyrostabilizer I",
				iconID: 1046,
				attributes: {
					"50": 31,
					"64": 1.077,
					"204": 0.9175
				}
			},
			"5933": {
				name: "Counterbalanced Compact Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.08,
					"204": 0.905
				}
			},
			"5935": {
				name: "F-M3 Munition Inertial Suspensor",
				iconID: 1046,
				attributes: {
					"50": 32,
					"64": 1.084,
					"204": 0.91
				}
			},
			"13939": {
				name: "Domination Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"14536": {
				name: "Mizuro's Modified Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 22,
					"64": 1.13,
					"204": 0.89
				}
			},
			"14538": {
				name: "Hakim's Modified Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 24,
					"64": 1.135,
					"204": 0.89
				}
			},
			"14540": {
				name: "Gotan's Modified Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.14,
					"204": 0.89
				}
			},
			"14542": {
				name: "Tobias' Modified Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.145,
					"204": 0.89
				}
			},
			"15447": {
				name: "Shaqil's Modified Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 28,
					"64": 1.15,
					"204": 0.895
				}
			},
			"15806": {
				name: "Republic Fleet Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 20,
					"64": 1.12,
					"204": 0.89
				}
			},
			"21486": {
				name: "'Kindred' Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 18,
					"64": 1.1,
					"204": 0.895
				}
			},
			"21488": {
				name: "Monophonic Stabilization Actuator I",
				iconID: 1046,
				attributes: {
					"50": 26,
					"64": 1.1,
					"204": 0.925
				}
			},
			"44112": {
				name: "Vadari's Custom Gyrostabilizer",
				iconID: 1046,
				attributes: {
					"50": 29,
					"64": 1.1,
					"204": 0.9
				}
			}
		}
	},
	"49734": {
		typeID: 49734,
		name: "Abyssal Entropic Radiation Sink",
		group: "Damage Modules",
		category: "Entropic Sink",
		attributeIds: [
			50,
			64,
			204
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 23,
				allSourcesMax: 30,
				allComparisonZero: 31.700000137090683,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 18.400000274181366,
				allMax: 45,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.09,
				allSourcesMax: 1.15,
				allComparisonZero: 1.1205999994277955,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 1.0682000207901001,
				allMax: 1.1729999780654907,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 204,
				type: "mutation",
				allSourcesMin: 0.92,
				allSourcesMax: 0.96,
				allComparisonZero: 0.9404999995231629,
				allMutatorsMax: 1.024999976158142,
				allMutatorsMin: 0.9750000238418579,
				allMin: 0.8970000219345093,
				allMax: 0.9839999771118164,
				name: "rate of fire bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			}
		],
		mutators: {
			"49735": {
				name: "Decayed Entropic Radiation Sink Mutaplasmid",
				iconID: 22064,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"64": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					},
					"204": {
						max: 1.0099999904632568,
						min: 0.9850000143051147
					}
				}
			},
			"49736": {
				name: "Gravid Entropic Radiation Sink Mutaplasmid",
				iconID: 22065,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"64": {
						max: 1.0140000581741333,
						min: 0.9890000224113464
					},
					"204": {
						max: 1.0149999856948853,
						min: 0.9800000190734863
					}
				}
			},
			"49737": {
				name: "Unstable Entropic Radiation Sink Mutaplasmid",
				iconID: 22066,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"64": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					},
					"204": {
						max: 1.024999976158142,
						min: 0.9750000238418579
					}
				}
			}
		},
		sources: {
			"47908": {
				name: "Entropic Radiation Sink I",
				iconID: 1046,
				attributes: {
					"50": 27,
					"64": 1.09,
					"204": 0.96
				}
			},
			"47909": {
				name: "Compact Entropic Radiation Sink",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.1,
					"204": 0.95
				}
			},
			"47911": {
				name: "Entropic Radiation Sink II",
				iconID: 1046,
				attributes: {
					"50": 30,
					"64": 1.13,
					"204": 0.94
				}
			},
			"52242": {
				name: "Zorya's Entropic Radiation Sink",
				iconID: 1046,
				attributes: {
					"50": 25,
					"64": 1.15,
					"204": 0.92
				}
			},
			"52244": {
				name: "Veles Entropic Radiation Sink",
				iconID: 1046,
				attributes: {
					"50": 23,
					"64": 1.14,
					"204": 0.93
				}
			}
		}
	},
	"49738": {
		typeID: 49738,
		name: "Abyssal Ballistic Control System",
		group: "Damage Modules",
		category: "Ballistic Control",
		attributeIds: [
			50,
			204,
			213
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 22,
				allSourcesMax: 42,
				allComparisonZero: 40.30000013113022,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 17.600000262260437,
				allMax: 63,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 204,
				type: "mutation",
				allSourcesMin: 0.89,
				allSourcesMax: 0.93,
				allComparisonZero: 0.9104999995231629,
				allMutatorsMax: 1.024999976158142,
				allMutatorsMin: 0.9750000238418579,
				allMin: 0.8677500212192536,
				allMax: 0.9532499778270722,
				name: "rate of fire bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			},
			{
				id: 213,
				type: "mutation",
				allSourcesMin: 1.07,
				allSourcesMax: 1.145,
				allComparisonZero: 1.1082499992847443,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 1.0486000204086305,
				allMax: 1.167899978160858,
				name: "Missile Damage Bonus",
				iconID: 1397,
				unitID: 109,
				highIsGood: true
			}
		],
		mutators: {
			"49739": {
				name: "Decayed Ballistic Control System Mutaplasmid",
				iconID: 22069,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"204": {
						max: 1.0099999904632568,
						min: 0.9850000143051147
					},
					"213": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					}
				}
			},
			"49740": {
				name: "Gravid Ballistic Control System Mutaplasmid",
				iconID: 22068,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"204": {
						max: 1.0149999856948853,
						min: 0.9800000190734863
					},
					"213": {
						max: 1.0140000581741333,
						min: 0.9890000224113464
					}
				}
			},
			"49741": {
				name: "Unstable Ballistic Control System Mutaplasmid",
				iconID: 22067,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"204": {
						max: 1.024999976158142,
						min: 0.9750000238418579
					},
					"213": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					}
				}
			}
		},
		sources: {
			"12274": {
				name: "Ballistic Control System I",
				iconID: 21440,
				attributes: {
					"50": 35,
					"204": 0.92,
					"213": 1.07
				}
			},
			"13935": {
				name: "Domination Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 24,
					"204": 0.89,
					"213": 1.12
				}
			},
			"13937": {
				name: "Dread Guristas Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 24,
					"204": 0.89,
					"213": 1.12
				}
			},
			"14528": {
				name: "Hakim's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 29,
					"204": 0.89,
					"213": 1.135
				}
			},
			"14530": {
				name: "Mizuro's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 26,
					"204": 0.89,
					"213": 1.13
				}
			},
			"14532": {
				name: "Gotan's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 31,
					"204": 0.89,
					"213": 1.14
				}
			},
			"14534": {
				name: "Tobias' Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 34,
					"204": 0.89,
					"213": 1.145
				}
			},
			"14684": {
				name: "Kaikka's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 26,
					"204": 0.89,
					"213": 1.13
				}
			},
			"14686": {
				name: "Thon's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 29,
					"204": 0.89,
					"213": 1.135
				}
			},
			"14688": {
				name: "Vepas' Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 31,
					"204": 0.89,
					"213": 1.14
				}
			},
			"14690": {
				name: "Estamel's Modified Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 34,
					"204": 0.89,
					"213": 1.145
				}
			},
			"15681": {
				name: "Caldari Navy Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 24,
					"204": 0.89,
					"213": 1.12
				}
			},
			"15683": {
				name: "Republic Fleet Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 24,
					"204": 0.89,
					"213": 1.12
				}
			},
			"16457": {
				name: "Crosslink Compact Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 31,
					"204": 0.905,
					"213": 1.08
				}
			},
			"16459": {
				name: "Muon Coil Bolt Array I",
				iconID: 21440,
				attributes: {
					"50": 39,
					"204": 0.91,
					"213": 1.084
				}
			},
			"16461": {
				name: "Multiphasic Bolt Array I",
				iconID: 21440,
				attributes: {
					"50": 40,
					"204": 0.9025,
					"213": 1.091
				}
			},
			"16463": {
				name: "'Pandemonium' Ballistic Enhancement",
				iconID: 21440,
				attributes: {
					"50": 42,
					"204": 0.895,
					"213": 1.098
				}
			},
			"21482": {
				name: "Ballistic 'Purge' Targeting System I",
				iconID: 21440,
				attributes: {
					"50": 30,
					"204": 0.925,
					"213": 1.1
				}
			},
			"21484": {
				name: "'Full Duplex' Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 22,
					"204": 0.895,
					"213": 1.1
				}
			},
			"22291": {
				name: "Ballistic Control System II",
				iconID: 21440,
				attributes: {
					"50": 40,
					"204": 0.895,
					"213": 1.1
				}
			},
			"28563": {
				name: "Khanid Navy Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 24,
					"204": 0.89,
					"213": 1.12
				}
			},
			"46270": {
				name: "Kaatara's Custom Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 38,
					"204": 0.9,
					"213": 1.1
				}
			},
			"47447": {
				name: "C3-A 'Hivaa Saitsuo' Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 37,
					"204": 0.93,
					"213": 1.07
				}
			},
			"47448": {
				name: "C3-X 'Hivaa Saitsuo' Ballistic Control System",
				iconID: 21440,
				attributes: {
					"50": 42,
					"204": 0.9,
					"213": 1.1
				}
			}
		}
	},
	"52227": {
		typeID: 52227,
		name: "Abyssal Damage Control",
		group: "Damage Control",
		category: "Standard",
		attributeIds: [
			50,
			974,
			975,
			976,
			977
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 15,
				allSourcesMax: 36,
				allComparisonZero: 33.00000008940697,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.000000178813934,
				allMax: 54,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 974,
				type: "mutation",
				allSourcesMin: 0.475,
				allSourcesMax: 0.75,
				allComparisonZero: 0.653749979287386,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.3324999943375587,
				allMax: 0.9749999642372131,
				name: "Structure EM Damage Resistance",
				iconID: 1396,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 975,
				type: "mutation",
				allSourcesMin: 0.475,
				allSourcesMax: 0.75,
				allComparisonZero: 0.653749979287386,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.3324999943375587,
				allMax: 0.9749999642372131,
				name: "Structure Explosive Damage Resistance",
				iconID: 1395,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 976,
				type: "mutation",
				allSourcesMin: 0.475,
				allSourcesMax: 0.75,
				allComparisonZero: 0.653749979287386,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.3324999943375587,
				allMax: 0.9749999642372131,
				name: "Structure Kinetic Damage Resistance",
				iconID: 1393,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 977,
				type: "mutation",
				allSourcesMin: 0.475,
				allSourcesMax: 0.75,
				allComparisonZero: 0.653749979287386,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.3324999943375587,
				allMax: 0.9749999642372131,
				name: "Structure Thermal Damage Resistance",
				iconID: 1394,
				unitID: 108,
				highIsGood: false
			}
		],
		mutators: {
			"52224": {
				name: "Decayed Damage Control Mutaplasmid",
				iconID: 24129,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"974": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"975": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"976": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"977": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"52225": {
				name: "Gravid Damage Control Mutaplasmid",
				iconID: 24131,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"974": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"975": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"976": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"977": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			},
			"52226": {
				name: "Unstable Damage Control Mutaplasmid",
				iconID: 24133,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"974": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"975": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"976": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"977": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"521": {
				name: "'Basic' Damage Control",
				iconID: 77,
				attributes: {
					"50": 15,
					"974": 0.75,
					"975": 0.75,
					"976": 0.75,
					"977": 0.75
				}
			},
			"2046": {
				name: "Damage Control I",
				iconID: 77,
				attributes: {
					"50": 25,
					"974": 0.7,
					"975": 0.7,
					"976": 0.7,
					"977": 0.7
				}
			},
			"2048": {
				name: "Damage Control II",
				iconID: 77,
				attributes: {
					"50": 30,
					"974": 0.6,
					"975": 0.6,
					"976": 0.6,
					"977": 0.6
				}
			},
			"5839": {
				name: "IFFA Compact Damage Control",
				iconID: 77,
				attributes: {
					"50": 20,
					"974": 0.65,
					"975": 0.65,
					"976": 0.65,
					"977": 0.65
				}
			},
			"23418": {
				name: "'Radical' Damage Control",
				iconID: 77,
				attributes: {
					"50": 16,
					"974": 0.6,
					"975": 0.6,
					"976": 0.6,
					"977": 0.6
				}
			},
			"41200": {
				name: "Shadow Serpentis Damage Control",
				iconID: 77,
				attributes: {
					"50": 18,
					"974": 0.575,
					"975": 0.575,
					"976": 0.575,
					"977": 0.575
				}
			},
			"41201": {
				name: "Syndicate Damage Control",
				iconID: 77,
				attributes: {
					"50": 18,
					"974": 0.575,
					"975": 0.575,
					"976": 0.575,
					"977": 0.575
				}
			},
			"41202": {
				name: "Sentient Damage Control",
				iconID: 77,
				attributes: {
					"50": 18,
					"974": 0.575,
					"975": 0.575,
					"976": 0.575,
					"977": 0.575
				}
			},
			"41203": {
				name: "Brynn's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 30,
					"974": 0.55,
					"975": 0.55,
					"976": 0.55,
					"977": 0.55
				}
			},
			"41204": {
				name: "Unit D-34343's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 30,
					"974": 0.55,
					"975": 0.55,
					"976": 0.55,
					"977": 0.55
				}
			},
			"41205": {
				name: "Tuvan's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 32,
					"974": 0.525,
					"975": 0.525,
					"976": 0.525,
					"977": 0.525
				}
			},
			"41206": {
				name: "Unit F-435454's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 32,
					"974": 0.525,
					"975": 0.525,
					"976": 0.525,
					"977": 0.525
				}
			},
			"41207": {
				name: "Setele's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 34,
					"974": 0.5,
					"975": 0.5,
					"976": 0.5,
					"977": 0.5
				}
			},
			"41208": {
				name: "Unit P-343554's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 34,
					"974": 0.5,
					"975": 0.5,
					"976": 0.5,
					"977": 0.5
				}
			},
			"41210": {
				name: "Cormack's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 36,
					"974": 0.475,
					"975": 0.475,
					"976": 0.475,
					"977": 0.475
				}
			},
			"41211": {
				name: "Unit W-634's Modified Damage Control",
				iconID: 77,
				attributes: {
					"50": 36,
					"974": 0.475,
					"975": 0.475,
					"976": 0.475,
					"977": 0.475
				}
			}
		}
	},
	"52230": {
		typeID: 52230,
		name: "Abyssal Assault Damage Control",
		group: "Damage Control",
		category: "Assault",
		attributeIds: [
			50,
			73,
			974,
			975,
			976,
			977
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 24,
				allSourcesMax: 35,
				allComparisonZero: 35.85000014305115,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 19.200000286102295,
				allMax: 52.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 8775,
				allSourcesMax: 10800,
				allComparisonZero: 9990.000309795141,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 7020.000104606152,
				allMax: 12960.00051498413,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 974,
				type: "mutation",
				allSourcesMin: 0.7,
				allSourcesMax: 0.75,
				allComparisonZero: 0.7324999779462814,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.4899999916553497,
				allMax: 0.9749999642372131,
				name: "Structure EM Damage Resistance",
				iconID: 1396,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 975,
				type: "mutation",
				allSourcesMin: 0.7,
				allSourcesMax: 0.75,
				allComparisonZero: 0.7324999779462814,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.4899999916553497,
				allMax: 0.9749999642372131,
				name: "Structure Explosive Damage Resistance",
				iconID: 1395,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 976,
				type: "mutation",
				allSourcesMin: 0.7,
				allSourcesMax: 0.75,
				allComparisonZero: 0.7324999779462814,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.4899999916553497,
				allMax: 0.9749999642372131,
				name: "Structure Kinetic Damage Resistance",
				iconID: 1393,
				unitID: 108,
				highIsGood: false
			},
			{
				id: 977,
				type: "mutation",
				allSourcesMin: 0.7,
				allSourcesMax: 0.75,
				allComparisonZero: 0.7324999779462814,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.4899999916553497,
				allMax: 0.9749999642372131,
				name: "Structure Thermal Damage Resistance",
				iconID: 1394,
				unitID: 108,
				highIsGood: false
			}
		],
		mutators: {
			"52228": {
				name: "Decayed Assault Damage Control Mutaplasmid",
				iconID: 24128,
				mutationValues: {
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"73": {
						highIsGood: 1,
						min: 0.949999988079071,
						max: 1.0750000476837158
					},
					"974": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"975": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"976": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					},
					"977": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"52229": {
				name: "Gravid Assault Damage Control Mutaplasmid",
				iconID: 24130,
				mutationValues: {
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"73": {
						highIsGood: 1,
						min: 0.8999999761581421,
						max: 1.149999976158142
					},
					"974": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"975": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"976": {
						max: 1.100000023841858,
						min: 0.800000011920929
					},
					"977": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			},
			"52231": {
				name: "Unstable Assault Damage Control Mutaplasmid",
				iconID: 24132,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						highIsGood: 1,
						min: 0.800000011920929,
						max: 1.2000000476837158
					},
					"974": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"975": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"976": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					},
					"977": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"47254": {
				name: "Assault Damage Control I",
				iconID: 21860,
				attributes: {
					"50": 28,
					"73": 8775,
					"974": 0.75,
					"975": 0.75,
					"976": 0.75,
					"977": 0.75
				}
			},
			"47255": {
				name: "EFFA Compact Assault Damage Control",
				iconID: 21860,
				attributes: {
					"50": 24,
					"73": 8775,
					"974": 0.75,
					"975": 0.75,
					"976": 0.75,
					"977": 0.75
				}
			},
			"47256": {
				name: "FFR Enduring Assault Damage Control",
				iconID: 21860,
				attributes: {
					"50": 28,
					"73": 8775,
					"974": 0.75,
					"975": 0.75,
					"976": 0.75,
					"977": 0.75
				}
			},
			"47257": {
				name: "Assault Damage Control II",
				iconID: 21860,
				attributes: {
					"50": 35,
					"73": 10125,
					"974": 0.7,
					"975": 0.7,
					"976": 0.7,
					"977": 0.7
				}
			},
			"47258": {
				name: "Shadow Serpentis Assault Damage Control",
				iconID: 21860,
				attributes: {
					"50": 24,
					"73": 10800,
					"974": 0.7,
					"975": 0.7,
					"976": 0.7,
					"977": 0.7
				}
			}
		}
	},
	"56303": {
		typeID: 56303,
		name: "Heavy Abyssal Warp Scrambler",
		group: "Warp Scramblers",
		category: "Heavy Warp Scramblers",
		attributeIds: [
			6,
			50,
			54,
			105
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 16,
				allSourcesMax: 45,
				allComparisonZero: 63.44999980926514,
				allMutatorsMax: 2.5,
				allMutatorsMin: 0.8999999761581421,
				allMin: 14.399999618530273,
				allMax: 112.5,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 30,
				allSourcesMax: 60,
				allComparisonZero: 57.000000178813934,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 24.00000035762787,
				allMax: 90,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 8500,
				allSourcesMax: 15000,
				allComparisonZero: 12400.000408291817,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 6800.000101327896,
				allMax: 18000.000715255737,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 105,
				type: "base-module",
				allSourcesMin: 6,
				allSourcesMax: 10,
				allComparisonZero: 8,
				name: "Warp Scramble Strength",
				iconID: 111,
				highIsGood: true
			}
		],
		mutators: {
			"56269": {
				name: "Decayed Heavy Warp Scrambler Mutaplasmid",
				iconID: 21994,
				mutationValues: {
					"6": {
						max: 1.7999999523162842,
						min: 1.399999976158142
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.0750000476837158,
						min: 0.949999988079071
					}
				}
			},
			"56270": {
				name: "Unstable Heavy Warp Scrambler Mutaplasmid",
				iconID: 22018,
				mutationValues: {
					"6": {
						max: 2.5,
						min: 0.8999999761581421
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"56271": {
				name: "Gravid Heavy Warp Scrambler Mutaplasmid",
				iconID: 22005,
				mutationValues: {
					"6": {
						max: 2,
						min: 1
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"14664": {
				name: "Mizuro's Modified Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 30,
					"50": 30,
					"54": 12750,
					"105": 10
				}
			},
			"14666": {
				name: "Hakim's Modified Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 30,
					"50": 32,
					"54": 13500,
					"105": 10
				}
			},
			"14668": {
				name: "Gotan's Modified Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 30,
					"50": 34,
					"54": 14250,
					"105": 10
				}
			},
			"14670": {
				name: "Tobias' Modified Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 30,
					"50": 36,
					"54": 15000,
					"105": 10
				}
			},
			"40750": {
				name: "Heavy Warp Scrambler I",
				iconID: 3433,
				attributes: {
					"6": 40,
					"50": 50,
					"54": 8500,
					"105": 6
				}
			},
			"40752": {
				name: "Heavy Initiated Compact Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 40,
					"50": 40,
					"54": 8500,
					"105": 6
				}
			},
			"40754": {
				name: "Heavy J5b Enduring Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 16,
					"50": 50,
					"54": 8500,
					"105": 6
				}
			},
			"40756": {
				name: "Heavy Faint Epsilon Scoped Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 40,
					"50": 50,
					"54": 9250,
					"105": 6
				}
			},
			"40758": {
				name: "Heavy Warp Scrambler II",
				iconID: 3433,
				attributes: {
					"6": 45,
					"50": 60,
					"54": 10000,
					"105": 6
				}
			},
			"40762": {
				name: "Shadow Serpentis Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 35,
					"50": 40,
					"54": 11250,
					"105": 8
				}
			},
			"40764": {
				name: "Domination Heavy Warp Scrambler",
				iconID: 3433,
				attributes: {
					"6": 45,
					"50": 50,
					"54": 12250,
					"105": 8
				}
			}
		}
	},
	"56304": {
		typeID: 56304,
		name: "Heavy Abyssal Warp Disruptor",
		group: "Warp Disruptors",
		category: "Heavy Warp Disruptors",
		attributeIds: [
			6,
			50,
			54
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 50,
				allSourcesMax: 225,
				allComparisonZero: 303.74999940395355,
				allMutatorsMax: 2.5,
				allMutatorsMin: 0.8999999761581421,
				allMin: 44.999998807907104,
				allMax: 562.5,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 46,
				allSourcesMax: 75,
				allComparisonZero: 74.65000027418137,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 36.80000054836273,
				allMax: 112.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 22000,
				allSourcesMax: 40000,
				allComparisonZero: 32800.001084804535,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 17600.000262260437,
				allMax: 48000.00190734863,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"56272": {
				name: "Unstable Heavy Warp Disruptor Mutaplasmid",
				iconID: 22016,
				mutationValues: {
					"6": {
						max: 2.5,
						min: 0.8999999761581421
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"56273": {
				name: "Gravid Heavy Warp Disruptor Mutaplasmid",
				iconID: 22004,
				mutationValues: {
					"6": {
						max: 2,
						min: 1
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			},
			"56274": {
				name: "Decayed Heavy Warp Disruptor Mutaplasmid",
				iconID: 21993,
				mutationValues: {
					"6": {
						max: 1.7999999523162842,
						min: 1.399999976158142
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.0750000476837158,
						min: 0.949999988079071
					}
				}
			}
		},
		sources: {
			"14656": {
				name: "Mizuro's Modified Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 50,
					"50": 46,
					"54": 31000
				}
			},
			"14658": {
				name: "Hakim's Modified Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 60,
					"50": 48,
					"54": 34000
				}
			},
			"14660": {
				name: "Gotan's Modified Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 70,
					"50": 50,
					"54": 37000
				}
			},
			"14662": {
				name: "Tobias' Modified Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 80,
					"50": 52,
					"54": 40000
				}
			},
			"40730": {
				name: "Heavy Warp Disruptor I",
				iconID: 111,
				attributes: {
					"6": 200,
					"50": 63,
					"54": 22000
				}
			},
			"40731": {
				name: "Heavy Fleeting Compact Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 200,
					"50": 50,
					"54": 22000
				}
			},
			"40732": {
				name: "Heavy J5 Enduring Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 150,
					"50": 63,
					"54": 22000
				}
			},
			"40733": {
				name: "Heavy Faint Scoped Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 200,
					"50": 63,
					"54": 24000
				}
			},
			"40734": {
				name: "Heavy Warp Disruptor II",
				iconID: 111,
				attributes: {
					"6": 225,
					"50": 75,
					"54": 26000
				}
			},
			"40736": {
				name: "Shadow Serpentis Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 175,
					"50": 50,
					"54": 28000
				}
			},
			"40737": {
				name: "Domination Heavy Warp Disruptor",
				iconID: 111,
				attributes: {
					"6": 225,
					"50": 63,
					"54": 30000
				}
			}
		}
	},
	"56305": {
		typeID: 56305,
		name: "10000MN Abyssal Afterburner",
		group: "Afterburners",
		category: "10000MN",
		attributeIds: [
			6,
			20,
			30,
			50
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 7200,
				allSourcesMax: 8000,
				allComparisonZero: 7759.999990463257,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 4320.000171661377,
				allMax: 11199.999809265137,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 115,
				allSourcesMax: 145,
				allComparisonZero: 133.0000041425228,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 92.00000137090683,
				allMax: 174.0000069141388,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 30000,
				allSourcesMax: 40000,
				allComparisonZero: 42000.000178813934,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 24000.00035762787,
				allMax: 60000,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 43,
				allSourcesMax: 83,
				allComparisonZero: 79.45000025629997,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 34.400000512599945,
				allMax: 124.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			}
		],
		mutators: {
			"56275": {
				name: "Decayed 10000MN Afterburner Mutaplasmid",
				iconID: 21984,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					}
				}
			},
			"56276": {
				name: "Unstable 10000MN Afterburner Mutaplasmid",
				iconID: 22006,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					}
				}
			},
			"56277": {
				name: "Gravid 10000MN Afterburner Mutaplasmid",
				iconID: 21995,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.149999976158142,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					}
				}
			}
		},
		sources: {
			"41236": {
				name: "10000MN Afterburner I",
				iconID: 96,
				attributes: {
					"6": 8000,
					"20": 115,
					"30": 35000,
					"50": 75
				}
			},
			"41237": {
				name: "10000MN Y-S8 Compact Afterburner",
				iconID: 96,
				attributes: {
					"6": 8000,
					"20": 125,
					"30": 30000,
					"50": 43
				}
			},
			"41238": {
				name: "10000MN Monopropellant Enduring Afterburner",
				iconID: 96,
				attributes: {
					"6": 7200,
					"20": 125,
					"30": 35000,
					"50": 43
				}
			},
			"41239": {
				name: "10000MN Afterburner II",
				iconID: 96,
				attributes: {
					"6": 8000,
					"20": 135,
					"30": 40000,
					"50": 75
				}
			},
			"41240": {
				name: "Domination 10000MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 8000,
					"20": 145,
					"30": 40000,
					"50": 75
				}
			},
			"41241": {
				name: "Shadow Serpentis 10000MN Afterburner",
				iconID: 96,
				attributes: {
					"6": 8000,
					"20": 145,
					"30": 35000,
					"50": 83
				}
			}
		}
	},
	"56306": {
		typeID: 56306,
		name: "50000MN Abyssal Microwarpdrive",
		group: "Microwarpdrives",
		category: "50000MN",
		attributeIds: [
			6,
			20,
			30,
			50,
			554,
			147
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 9000,
				allSourcesMax: 11000,
				allComparisonZero: 10399.999976158142,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 5400.000214576721,
				allMax: 15399.999737739563,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 20,
				type: "mutation",
				allSourcesMin: 500,
				allSourcesMax: 512,
				allComparisonZero: 506.60000014305115,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 449.99998807907104,
				allMax: 563.2000122070312,
				name: "Maximum Velocity Bonus",
				iconID: 1389,
				unitID: 124,
				highIsGood: true
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 80000,
				allComparisonZero: 84000.00035762787,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 48000.00071525574,
				allMax: 120000,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 85,
				allSourcesMax: 110,
				allComparisonZero: 116.50000050663948,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 68.00000101327896,
				allMax: 165,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 554,
				type: "mutation",
				allSourcesMin: 450,
				allSourcesMax: 500,
				allComparisonZero: 482.49998539686203,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 314.99999463558197,
				allMax: 649.9999761581421,
				name: "Signature Radius Modifier",
				iconID: 1390,
				unitID: 124,
				highIsGood: false
			},
			{
				id: 147,
				type: "base-module",
				allSourcesMin: 0.75,
				allSourcesMax: 0.9,
				allComparisonZero: 0.825,
				name: "Capacitor Capacity Bonus",
				iconID: 1400,
				unitID: 109,
				highIsGood: true
			}
		],
		mutators: {
			"56278": {
				name: "Decayed 50000MN Microwarpdrive Mutaplasmid",
				iconID: 21986,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"20": {
						max: 1.034999966621399,
						min: 0.9700000286102295
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"554": {
						max: 1.0499999523162842,
						min: 0.8999999761581421
					}
				}
			},
			"56279": {
				name: "Unstable 50000MN Microwarpdrive Mutaplasmid",
				iconID: 22008,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"20": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"554": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"56280": {
				name: "Gravid 50000MN Microwarpdrive Mutaplasmid",
				iconID: 21997,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"20": {
						max: 1.0700000524520874,
						min: 0.949999988079071
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"554": {
						max: 1.100000023841858,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"41249": {
				name: "50000MN Microwarpdrive I",
				iconID: 10149,
				attributes: {
					"6": 10000,
					"20": 500,
					"30": 70000,
					"50": 100,
					"147": 0.75,
					"554": 500
				}
			},
			"41250": {
				name: "50000MN Y-T8 Compact Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 10000,
					"20": 505,
					"30": 60000,
					"50": 85,
					"147": 0.75,
					"554": 500
				}
			},
			"41251": {
				name: "50000MN Quad LiF Restrained Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 10000,
					"20": 505,
					"30": 70000,
					"50": 100,
					"147": 0.8,
					"554": 450
				}
			},
			"41252": {
				name: "50000MN Cold-Gas Enduring Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 9000,
					"20": 505,
					"30": 70000,
					"50": 100,
					"147": 0.75,
					"554": 500
				}
			},
			"41253": {
				name: "50000MN Microwarpdrive II",
				iconID: 10149,
				attributes: {
					"6": 11000,
					"20": 510,
					"30": 80000,
					"50": 100,
					"147": 0.8,
					"554": 500
				}
			},
			"41254": {
				name: "Domination 50000MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 10000,
					"20": 512,
					"30": 80000,
					"50": 100,
					"147": 0.9,
					"554": 450
				}
			},
			"41255": {
				name: "Shadow Serpentis 50000MN Microwarpdrive",
				iconID: 10149,
				attributes: {
					"6": 10000,
					"20": 512,
					"30": 70000,
					"50": 110,
					"147": 0.9,
					"554": 475
				}
			}
		}
	},
	"56307": {
		typeID: 56307,
		name: "Capital Abyssal Armor Repairer",
		group: "Armor Repairers",
		category: "Capital",
		attributeIds: [
			6,
			30,
			50,
			73,
			84
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 1900,
				allSourcesMax: 2880,
				allComparisonZero: 2585.9999883174896,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 1140.00004529953,
				allMax: 4031.999931335449,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 112500,
				allSourcesMax: 137500,
				allComparisonZero: 148125.00067055225,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 90000.00134110451,
				allMax: 206250,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 60,
				allSourcesMax: 83,
				allComparisonZero: 86.25000035762787,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 48.00000071525574,
				allMax: 124.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 30000,
				allSourcesMax: 30000,
				allComparisonZero: 30000,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 26999.999284744263,
				allMax: 33000.00071525574,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 9600,
				allSourcesMax: 13440,
				allComparisonZero: 11904.00037765503,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 7680.000114440918,
				allMax: 16128.00064086914,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"56281": {
				name: "Decayed Capital Armor Repairer Mutaplasmid",
				iconID: 21990,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					},
					"84": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"56282": {
				name: "Unstable Capital Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"56283": {
				name: "Gravid Capital Armor Repairer Mutaplasmid",
				iconID: 22001,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					},
					"84": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"3534": {
				name: "CONCORD Capital Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 2400,
					"30": 118750,
					"50": 65,
					"73": 30000,
					"84": 13000
				}
			},
			"20701": {
				name: "Capital Armor Repairer I",
				iconID: 80,
				attributes: {
					"6": 2400,
					"30": 125000,
					"50": 75,
					"73": 30000,
					"84": 9600
				}
			},
			"41498": {
				name: "Capital I-a Enduring Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 1920,
					"30": 125000,
					"50": 75,
					"73": 30000,
					"84": 10560
				}
			},
			"41499": {
				name: "Capital ACM Compact Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 2400,
					"30": 112500,
					"50": 60,
					"73": 30000,
					"84": 10560
				}
			},
			"41500": {
				name: "Capital Armor Repairer II",
				iconID: 80,
				attributes: {
					"6": 2880,
					"30": 137500,
					"50": 83,
					"73": 30000,
					"84": 11520
				}
			},
			"41501": {
				name: "Dark Blood Capital Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 2500,
					"30": 118750,
					"50": 65,
					"73": 30000,
					"84": 13440
				}
			},
			"41502": {
				name: "Shadow Serpentis Capital Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 1900,
					"30": 112500,
					"50": 60,
					"73": 30000,
					"84": 12500
				}
			}
		}
	},
	"56308": {
		typeID: 56308,
		name: "Capital Abyssal Ancillary Armor Repairer",
		group: "Ancil. Armor Repairers",
		category: "Capital",
		attributeIds: [
			6,
			30,
			50,
			73,
			84,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 1600,
				allSourcesMax: 1600,
				allComparisonZero: 1600,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 960.0000381469727,
				allMax: 2239.9999618530273,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 125000,
				allSourcesMax: 125000,
				allComparisonZero: 143750.00074505806,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 100000.00149011612,
				allMax: 187500,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 75,
				allSourcesMax: 75,
				allComparisonZero: 86.25000044703484,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 60.00000089406967,
				allMax: 112.5,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 20000,
				allSourcesMax: 20000,
				allComparisonZero: 20000.000596046448,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 16000.00023841858,
				allMax: 24000.000953674316,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 84,
				type: "mutation",
				allSourcesMin: 4800,
				allSourcesMax: 4800,
				allComparisonZero: 4800.0001430511475,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 3840.000057220459,
				allMax: 5760.000228881836,
				name: "Armor Hitpoints Repaired",
				iconID: 80,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"56284": {
				name: "Unstable Capital Ancillary Armor Repairer Mutaplasmid",
				iconID: 22012,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"84": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"41503": {
				name: "Capital Ancillary Armor Repairer",
				iconID: 80,
				attributes: {
					"6": 1600,
					"30": 125000,
					"50": 75,
					"73": 20000,
					"84": 4800,
					"1795": 60000
				}
			}
		}
	},
	"56309": {
		typeID: 56309,
		name: "Capital Abyssal Shield Booster",
		group: "Shield Boosters",
		category: "Capital",
		attributeIds: [
			6,
			30,
			50,
			68,
			73
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 1900,
				allSourcesMax: 2880,
				allComparisonZero: 2585.9999883174896,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 1140.00004529953,
				allMax: 4031.999931335449,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 67500,
				allSourcesMax: 82500,
				allComparisonZero: 88875.00040233135,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 54000.000804662704,
				allMax: 123750,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 240,
				allSourcesMax: 330,
				allComparisonZero: 343.5000014305115,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 192.00000286102295,
				allMax: 495,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 7200,
				allSourcesMax: 10000,
				allComparisonZero: 8880.000281333923,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 5760.0000858306885,
				allMax: 12000.000476837158,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 10000,
				allSourcesMax: 10000,
				allComparisonZero: 10000,
				allMutatorsMax: 1.100000023841858,
				allMutatorsMin: 0.8999999761581421,
				allMin: 8999.99976158142,
				allMax: 11000.00023841858,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"56285": {
				name: "Decayed Capital Shield Booster Mutaplasmid",
				iconID: 21991,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"68": {
						max: 1.100000023841858,
						min: 0.949999988079071
					},
					"73": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"56286": {
				name: "Unstable Capital Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.100000023841858,
						min: 0.8999999761581421
					}
				}
			},
			"56287": {
				name: "Gravid Capital Shield Booster Mutaplasmid",
				iconID: 22002,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"68": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					},
					"73": {
						max: 1.0499999523162842,
						min: 0.925000011920929
					}
				}
			}
		},
		sources: {
			"3542": {
				name: "CONCORD Capital Shield Booster",
				iconID: 84,
				attributes: {
					"6": 2400,
					"30": 71250,
					"50": 260,
					"68": 9750,
					"73": 10000
				}
			},
			"20703": {
				name: "Capital Shield Booster I",
				iconID: 84,
				attributes: {
					"6": 2400,
					"30": 75000,
					"50": 300,
					"68": 7200,
					"73": 10000
				}
			},
			"41505": {
				name: "Capital C-5L Compact Shield Booster",
				iconID: 84,
				attributes: {
					"6": 2400,
					"30": 67500,
					"50": 240,
					"68": 7920,
					"73": 10000
				}
			},
			"41506": {
				name: "Capital Clarity Ward Enduring Shield Booster",
				iconID: 84,
				attributes: {
					"6": 1920,
					"30": 75000,
					"50": 300,
					"68": 7920,
					"73": 10000
				}
			},
			"41507": {
				name: "Capital Shield Booster II",
				iconID: 84,
				attributes: {
					"6": 2880,
					"30": 82500,
					"50": 330,
					"68": 8640,
					"73": 10000
				}
			},
			"41508": {
				name: "True Sansha Capital Shield Booster",
				iconID: 84,
				attributes: {
					"6": 1900,
					"30": 67500,
					"50": 240,
					"68": 9400,
					"73": 10000
				}
			},
			"41509": {
				name: "Dread Guristas Capital Shield Booster",
				iconID: 84,
				attributes: {
					"6": 2500,
					"30": 71250,
					"50": 260,
					"68": 10000,
					"73": 10000
				}
			},
			"41510": {
				name: "Domination Capital Shield Booster",
				iconID: 84,
				attributes: {
					"6": 1900,
					"30": 67500,
					"50": 240,
					"68": 9400,
					"73": 10000
				}
			}
		}
	},
	"56310": {
		typeID: 56310,
		name: "Capital Abyssal Ancillary Shield Booster",
		group: "Ancil. Shield Boosters",
		category: "Capital",
		attributeIds: [
			6,
			30,
			50,
			68,
			73,
			1795
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 4000,
				allSourcesMax: 4000,
				allComparisonZero: 4000,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 2400.0000953674316,
				allMax: 5599.999904632568,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 75000,
				allSourcesMax: 75000,
				allComparisonZero: 86250.00044703484,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 60000.00089406967,
				allMax: 112500,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 300,
				allSourcesMax: 300,
				allComparisonZero: 345.00000178813934,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 240.0000035762787,
				allMax: 450,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 68,
				type: "mutation",
				allSourcesMin: 6800,
				allSourcesMax: 6800,
				allComparisonZero: 6800.000202655792,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 5440.000081062317,
				allMax: 8160.000324249268,
				name: "Shield Bonus",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 73,
				type: "mutation",
				allSourcesMin: 5000,
				allSourcesMax: 5000,
				allComparisonZero: 5000.000149011612,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 4000.000059604645,
				allMax: 6000.000238418579,
				name: "Activation time / duration",
				iconID: 1392,
				unitID: 101,
				highIsGood: false
			},
			{
				id: 1795,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 60000,
				allComparisonZero: 59999.99821186066,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 77999.99713897705,
				name: "Reload Time",
				iconID: 1397,
				unitID: 101,
				highIsGood: false
			}
		],
		mutators: {
			"56288": {
				name: "Unstable Capital Ancillary Shield Booster Mutaplasmid",
				iconID: 22013,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"68": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"73": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					},
					"1795": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"41504": {
				name: "Capital Ancillary Shield Booster",
				iconID: 10935,
				attributes: {
					"6": 4000,
					"30": 75000,
					"50": 300,
					"68": 6800,
					"73": 5000,
					"1795": 60000
				}
			}
		}
	},
	"56311": {
		typeID: 56311,
		name: "Capital Abyssal Energy Nosferatu",
		group: "Energy Nosferatus",
		category: "Capital",
		attributeIds: [
			30,
			50,
			54,
			90,
			2044
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 72000,
				allSourcesMax: 100000,
				allComparisonZero: 103800.00042915344,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 57600.000858306885,
				allMax: 150000,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 80,
				allSourcesMax: 100,
				allComparisonZero: 107.00000047683716,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 64.00000095367432,
				allMax: 150,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 30000,
				allSourcesMax: 40000,
				allComparisonZero: 36999.99988079071,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 18000.000715255737,
				allMax: 55999.99904632568,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 90,
				type: "mutation",
				allSourcesMin: 700,
				allSourcesMax: 800,
				allComparisonZero: 764.9999767541885,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 489.99999165534973,
				allMax: 1039.9999618530273,
				name: "Energy transfer amount",
				iconID: 1033,
				unitID: 120,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 15000,
				allSourcesMax: 20000,
				allComparisonZero: 17500,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"56289": {
				name: "Decayed Capital Energy Nosferatu Mutaplasmid",
				iconID: 21988,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"90": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"56290": {
				name: "Unstable Capital Energy Nosferatu Mutaplasmid",
				iconID: 22010,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"90": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"56291": {
				name: "Gravid Capital Energy Nosferatu Mutaplasmid",
				iconID: 21999,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"90": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"40665": {
				name: "Capital Energy Nosferatu I",
				iconID: 1029,
				attributes: {
					"30": 80000,
					"50": 100,
					"54": 30000,
					"90": 700,
					"2044": 15000
				}
			},
			"40666": {
				name: "Capital Ghoul Compact Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 72000,
					"50": 80,
					"54": 30000,
					"90": 750,
					"2044": 15000
				}
			},
			"40667": {
				name: "Capital Knave Scoped Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 80000,
					"50": 100,
					"54": 33000,
					"90": 750,
					"2044": 16500
				}
			},
			"40668": {
				name: "Capital Energy Nosferatu II",
				iconID: 1029,
				attributes: {
					"30": 100000,
					"50": 100,
					"54": 36000,
					"90": 800,
					"2044": 18000
				}
			},
			"40669": {
				name: "True Sansha Capital Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 100000,
					"50": 100,
					"54": 40000,
					"90": 800,
					"2044": 20000
				}
			},
			"40670": {
				name: "Dark Blood Capital Energy Nosferatu",
				iconID: 1029,
				attributes: {
					"30": 100000,
					"50": 100,
					"54": 40000,
					"90": 800,
					"2044": 20000
				}
			}
		}
	},
	"56312": {
		typeID: 56312,
		name: "Capital Abyssal Energy Neutralizer",
		group: "Energy Neutralizers",
		category: "Capital",
		attributeIds: [
			6,
			30,
			50,
			54,
			97,
			2044
		],
		attributes: [
			{
				id: 6,
				type: "mutation",
				allSourcesMin: 3600,
				allSourcesMax: 3600,
				allComparisonZero: 3600,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 2160.0000858306885,
				allMax: 5039.9999141693115,
				name: "Activation Cost",
				iconID: 1400,
				unitID: 114,
				highIsGood: false
			},
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 70000,
				allSourcesMax: 100000,
				allComparisonZero: 103000.00041723251,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 56000.00083446503,
				allMax: 150000,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 72,
				allSourcesMax: 90,
				allComparisonZero: 96.30000042915344,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 57.600000858306885,
				allMax: 135,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 30000,
				allSourcesMax: 40000,
				allComparisonZero: 36999.99988079071,
				allMutatorsMax: 1.399999976158142,
				allMutatorsMin: 0.6000000238418579,
				allMin: 18000.000715255737,
				allMax: 55999.99904632568,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 97,
				type: "mutation",
				allSourcesMin: 3600,
				allSourcesMax: 4400,
				allComparisonZero: 4119.999873638153,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 2519.9999570846558,
				allMax: 5719.99979019165,
				name: "Neutralization Amount",
				iconID: 1400,
				unitID: 114,
				highIsGood: true
			},
			{
				id: 2044,
				type: "base-module",
				allSourcesMin: 15000,
				allSourcesMax: 20000,
				allComparisonZero: 17500,
				name: "Effectiveness Falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			}
		],
		mutators: {
			"56292": {
				name: "Decayed Capital Energy Neutralizer Mutaplasmid",
				iconID: 21987,
				mutationValues: {
					"6": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"50": {
						max: 1.25,
						min: 0.949999988079071
					},
					"54": {
						max: 1.2000000476837158,
						min: 0.8500000238418579
					},
					"97": {
						max: 1.100000023841858,
						min: 0.949999988079071
					}
				}
			},
			"56293": {
				name: "Unstable Capital Energy Neutralizer Mutaplasmid",
				iconID: 22009,
				mutationValues: {
					"6": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"50": {
						max: 1.5,
						min: 0.800000011920929
					},
					"54": {
						max: 1.399999976158142,
						min: 0.6000000238418579
					},
					"97": {
						max: 1.2999999523162842,
						min: 0.699999988079071
					}
				}
			},
			"56294": {
				name: "Gravid Capital Energy Neutralizer Mutaplasmid",
				iconID: 21998,
				mutationValues: {
					"6": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"50": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"54": {
						max: 1.2999999523162842,
						min: 0.800000011920929
					},
					"97": {
						max: 1.2000000476837158,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"40659": {
				name: "Capital Energy Neutralizer I",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 80000,
					"50": 90,
					"54": 30000,
					"97": 3600,
					"2044": 15000
				}
			},
			"40660": {
				name: "Capital Gremlin Compact Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 70000,
					"50": 72,
					"54": 30000,
					"97": 4000,
					"2044": 15000
				}
			},
			"40661": {
				name: "Capital Infectious Scoped Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 80000,
					"50": 90,
					"54": 33000,
					"97": 4000,
					"2044": 16500
				}
			},
			"40662": {
				name: "Capital Energy Neutralizer II",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 90000,
					"50": 90,
					"54": 36000,
					"97": 4400,
					"2044": 18000
				}
			},
			"40663": {
				name: "True Sansha Capital Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 100000,
					"50": 90,
					"54": 40000,
					"97": 4400,
					"2044": 20000
				}
			},
			"40664": {
				name: "Dark Blood Capital Energy Neutralizer",
				iconID: 1283,
				attributes: {
					"6": 3600,
					"30": 100000,
					"50": 90,
					"54": 40000,
					"97": 4400,
					"2044": 20000
				}
			}
		}
	},
	"56313": {
		typeID: 56313,
		name: "Abyssal Siege Module",
		group: "Siege Module",
		category: "Siege Module",
		attributeIds: [
			30,
			2306,
			2307,
			2346,
			2347
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 100000,
				allSourcesMax: 105000,
				allComparisonZero: 118750.00059604645,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.800000011920929,
				allMin: 80000.0011920929,
				allMax: 157500,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 2306,
				type: "mutation",
				allSourcesMin: 165,
				allSourcesMax: 200,
				allComparisonZero: 182.9425011575222,
				allMutatorsMax: 1.0267000198364258,
				allMutatorsMin: 0.9729999899864197,
				allMin: 160.54499834775925,
				allMax: 205.34000396728516,
				name: "Siege Missile Damage Bonus",
				iconID: 1397,
				unitID: 105,
				highIsGood: true
			},
			{
				id: 2307,
				type: "mutation",
				allSourcesMin: 700,
				allSourcesMax: 840,
				allComparisonZero: 771.399998664856,
				allMutatorsMax: 1.0199999809265137,
				allMutatorsMin: 0.9800000190734863,
				allMin: 686.0000133514404,
				allMax: 856.7999839782715,
				name: "Turret Damage Bonus",
				iconID: 1432,
				unitID: 105,
				highIsGood: true
			},
			{
				id: 2346,
				type: "mutation",
				allSourcesMin: -50,
				allSourcesMax: -50,
				allComparisonZero: -49.37499910593033,
				allMutatorsMax: 0.949999988079071,
				allMutatorsMin: 1.024999976158142,
				allMin: -51.249998807907104,
				allMax: -47.49999940395355,
				name: "Armor Repairer / Shield Booster Duration Bonus",
				iconID: 2104,
				unitID: 105,
				highIsGood: false
			},
			{
				id: 2347,
				type: "mutation",
				allSourcesMin: 100,
				allSourcesMax: 100,
				allComparisonZero: 100.00000298023224,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 80.0000011920929,
				allMax: 120.00000476837158,
				name: "Armor Repairer / Shield Booster Amount Bonus",
				iconID: 2104,
				unitID: 105,
				highIsGood: true
			}
		],
		mutators: {
			"56299": {
				name: "Decayed Siege Module Mutaplasmid",
				iconID: 22064,
				mutationValues: {
					"30": {
						max: 1.25,
						min: 0.949999988079071
					},
					"2306": {
						max: 1.0099999904632568,
						min: 0.9943000078201294
					},
					"2307": {
						max: 1.0080000162124634,
						min: 0.9950000047683716
					},
					"2346": {
						max: 0.949999988079071,
						min: 1.024999976158142
					},
					"2347": {
						max: 1.024999976158142,
						min: 0.949999988079071
					}
				}
			},
			"56300": {
				name: "Unstable Siege Module Mutaplasmid",
				iconID: 22066,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.800000011920929
					},
					"2306": {
						max: 1.0267000198364258,
						min: 0.9732999801635742
					},
					"2307": {
						max: 1.0199999809265137,
						min: 0.9800000190734863
					},
					"2346": {
						max: 0.8999999761581421,
						min: 1.100000023841858
					},
					"2347": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			},
			"56301": {
				name: "Gravid Siege Module Mutaplasmid",
				iconID: 22065,
				mutationValues: {
					"30": {
						max: 1.2999999523162842,
						min: 0.8500000238418579
					},
					"2306": {
						max: 1.0187000036239624,
						min: 0.9729999899864197
					},
					"2307": {
						max: 1.0140000581741333,
						min: 0.9800000190734863
					},
					"2346": {
						max: 0.925000011920929,
						min: 1.0499999523162842
					},
					"2347": {
						max: 1.149999976158142,
						min: 0.8999999761581421
					}
				}
			}
		},
		sources: {
			"4292": {
				name: "Siege Module II",
				iconID: 2851,
				attributes: {
					"30": 105000,
					"2306": 200,
					"2307": 840,
					"2346": -50,
					"2347": 100
				}
			},
			"20280": {
				name: "Siege Module I",
				iconID: 2851,
				attributes: {
					"30": 100000,
					"2306": 165,
					"2307": 700,
					"2346": -50,
					"2347": 100
				}
			}
		}
	},
	"60478": {
		typeID: 60478,
		name: "Light Mutated Drone",
		group: "Drones",
		category: "Light",
		attributeIds: [
			9,
			37,
			54,
			64,
			158,
			160,
			263,
			265
		],
		attributes: [
			{
				id: 9,
				type: "mutation",
				allSourcesMin: 130,
				allSourcesMax: 360,
				allComparisonZero: 279.49999064207077,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 90.99999845027924,
				allMax: 467.9999828338623,
				name: "Structure Hitpoints",
				iconID: 67,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 37,
				type: "mutation",
				allSourcesMin: 2800,
				allSourcesMax: 5544,
				allComparisonZero: 4583.599851131439,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1959.999966621399,
				allMax: 7207.1997356414795,
				name: "Maximum Velocity",
				iconID: 1389,
				unitID: 11,
				highIsGood: true
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 2100,
				allSourcesMax: 2400,
				allComparisonZero: 2294.9999302625656,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1469.9999749660492,
				allMax: 3119.999885559082,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.3,
				allSourcesMax: 2.112,
				allComparisonZero: 1.7222000426054,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.9099999845027924,
				allMax: 2.534400100708008,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 158,
				type: "mutation",
				allSourcesMin: 2000,
				allSourcesMax: 2000,
				allComparisonZero: 1999.9999403953552,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1399.999976158142,
				allMax: 2599.9999046325684,
				name: "Accuracy falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 160,
				type: "mutation",
				allSourcesMin: 1.815,
				allSourcesMax: 3.564,
				allComparisonZero: 2.9518499042093755,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1.2704999783635138,
				allMax: 4.633199830055237,
				name: "Turret Tracking",
				iconID: 1398,
				highIsGood: true
			},
			{
				id: 263,
				type: "mutation",
				allSourcesMin: 40,
				allSourcesMax: 432,
				allComparisonZero: 294.7999894618988,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 27.999999523162842,
				allMax: 561.5999794006348,
				name: "Shield Capacity",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 265,
				type: "mutation",
				allSourcesMin: 70,
				allSourcesMax: 456,
				allComparisonZero: 320.8999887108803,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 48.99999916553497,
				allMax: 592.7999782562256,
				name: "Armor Hitpoints",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"60460": {
				name: "Exigent Light Drone Navigation Mutaplasmid",
				iconID: 24894,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.2999999523162842,
						min: 1
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.2999999523162842,
						min: 1
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60461": {
				name: "Exigent Light Drone Firepower Mutaplasmid",
				iconID: 24892,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.2000000476837158,
						min: 1
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60462": {
				name: "Exigent Light Drone Durability Mutaplasmid",
				iconID: 24895,
				mutationValues: {
					"9": {
						max: 1.2999999523162842,
						min: 1
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.2999999523162842,
						min: 1
					},
					"265": {
						max: 1.2999999523162842,
						min: 1
					}
				}
			},
			"60471": {
				name: "Exigent Light Drone Projection Mutaplasmid",
				iconID: 24893,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.2999999523162842,
						min: 1
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.2999999523162842,
						min: 1
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"2203": {
				name: "Acolyte I",
				iconID: 1084,
				attributes: {
					"9": 170,
					"37": 3850,
					"54": 2400,
					"64": 1.4,
					"158": 2000,
					"160": 2.49,
					"263": 40,
					"265": 190
				}
			},
			"2205": {
				name: "Acolyte II",
				attributes: {
					"9": 204,
					"37": 4620,
					"54": 2400,
					"64": 1.68,
					"158": 2000,
					"160": 2.988,
					"263": 48,
					"265": 228
				}
			},
			"2454": {
				name: "Hobgoblin I",
				attributes: {
					"9": 200,
					"37": 2800,
					"54": 2100,
					"64": 1.6,
					"158": 2000,
					"160": 1.815,
					"263": 50,
					"265": 90
				}
			},
			"2456": {
				name: "Hobgoblin II",
				attributes: {
					"9": 240,
					"37": 3360,
					"54": 2100,
					"64": 1.92,
					"158": 2000,
					"160": 2.178,
					"263": 60,
					"265": 108
				}
			},
			"2464": {
				name: "Hornet I",
				attributes: {
					"9": 150,
					"37": 3150,
					"54": 2400,
					"64": 1.5,
					"158": 2000,
					"160": 2.04,
					"263": 180,
					"265": 70
				}
			},
			"2466": {
				name: "Hornet II",
				attributes: {
					"9": 180,
					"37": 3780,
					"54": 2400,
					"64": 1.8,
					"158": 2000,
					"160": 2.448,
					"263": 216,
					"265": 84
				}
			},
			"2486": {
				name: "Warrior I",
				attributes: {
					"9": 130,
					"37": 4200,
					"54": 2100,
					"64": 1.3,
					"158": 2000,
					"160": 2.7,
					"263": 100,
					"265": 90
				}
			},
			"2488": {
				name: "Warrior II",
				attributes: {
					"9": 156,
					"37": 5040,
					"54": 2100,
					"64": 1.56,
					"158": 2000,
					"160": 3.24,
					"263": 120,
					"265": 108
				}
			},
			"28262": {
				name: "'Integrated' Acolyte",
				iconID: 1084,
				attributes: {
					"9": 187,
					"37": 4235,
					"54": 2400,
					"64": 1.61,
					"158": 2000,
					"160": 2.739,
					"263": 44,
					"265": 209
				}
			},
			"28264": {
				name: "'Augmented' Acolyte",
				attributes: {
					"9": 306,
					"37": 5082,
					"54": 2400,
					"64": 1.848,
					"158": 2000,
					"160": 2.988,
					"263": 72,
					"265": 342
				}
			},
			"28274": {
				name: "'Integrated' Hobgoblin",
				attributes: {
					"9": 220,
					"37": 3080,
					"54": 2100,
					"64": 1.84,
					"158": 2000,
					"160": 1.9965,
					"263": 55,
					"265": 99
				}
			},
			"28276": {
				name: "'Augmented' Hobgoblin",
				attributes: {
					"9": 360,
					"37": 3696,
					"54": 2100,
					"64": 2.112,
					"158": 2000,
					"160": 2.178,
					"263": 90,
					"265": 162
				}
			},
			"28278": {
				name: "'Integrated' Hornet",
				attributes: {
					"9": 165,
					"37": 3465,
					"54": 2400,
					"64": 1.725,
					"158": 2000,
					"160": 2.244,
					"263": 198,
					"265": 77
				}
			},
			"28280": {
				name: "'Augmented' Hornet",
				attributes: {
					"9": 270,
					"37": 4158,
					"54": 2400,
					"64": 1.98,
					"158": 2000,
					"160": 2.448,
					"263": 324,
					"265": 126
				}
			},
			"28302": {
				name: "'Integrated' Warrior",
				attributes: {
					"9": 143,
					"37": 4620,
					"54": 2100,
					"64": 1.495,
					"158": 2000,
					"160": 2.97,
					"263": 110,
					"265": 99
				}
			},
			"28304": {
				name: "'Augmented' Warrior",
				attributes: {
					"9": 234,
					"37": 5544,
					"54": 2100,
					"64": 1.716,
					"158": 2000,
					"160": 3.24,
					"263": 180,
					"265": 162
				}
			},
			"31864": {
				name: "Imperial Navy Acolyte",
				iconID: 1084,
				attributes: {
					"9": 170,
					"37": 4620,
					"54": 2400,
					"64": 1.68,
					"158": 2000,
					"160": 3.2868,
					"263": 96,
					"265": 456
				}
			},
			"31872": {
				name: "Caldari Navy Hornet",
				attributes: {
					"9": 150,
					"37": 3780,
					"54": 2400,
					"64": 1.8,
					"158": 2000,
					"160": 2.6928,
					"263": 432,
					"265": 168
				}
			},
			"31880": {
				name: "Federation Navy Hobgoblin",
				attributes: {
					"9": 200,
					"37": 3360,
					"54": 2100,
					"64": 1.92,
					"158": 2000,
					"160": 2.3958,
					"263": 120,
					"265": 216
				}
			},
			"31888": {
				name: "Republic Fleet Warrior",
				attributes: {
					"9": 130,
					"37": 5040,
					"54": 2100,
					"64": 1.56,
					"158": 2000,
					"160": 3.564,
					"263": 240,
					"265": 216
				}
			}
		}
	},
	"60479": {
		typeID: 60479,
		name: "Medium Mutated Drone",
		group: "Drones",
		category: "Medium",
		attributeIds: [
			9,
			37,
			54,
			64,
			158,
			160,
			263,
			265
		],
		attributes: [
			{
				id: 9,
				type: "mutation",
				allSourcesMin: 260,
				allSourcesMax: 720,
				allComparisonZero: 558.9999812841415,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 181.99999690055847,
				allMax: 935.9999656677246,
				name: "Structure Hitpoints",
				iconID: 67,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 37,
				type: "mutation",
				allSourcesMin: 1680,
				allSourcesMax: 3300,
				allComparisonZero: 2732.9999113082886,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1175.9999799728394,
				allMax: 4289.999842643738,
				name: "Maximum Velocity",
				iconID: 1389,
				unitID: 11,
				highIsGood: true
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 4200,
				allSourcesMax: 4800,
				allComparisonZero: 4589.999860525131,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 2939.9999499320984,
				allMax: 6239.999771118164,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.3,
				allSourcesMax: 2.112,
				allComparisonZero: 1.7222000426054,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.9099999845027924,
				allMax: 2.534400100708008,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 158,
				type: "mutation",
				allSourcesMin: 3000,
				allSourcesMax: 3000,
				allComparisonZero: 2999.999910593033,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 2099.999964237213,
				allMax: 3899.9998569488525,
				name: "Accuracy falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 160,
				type: "mutation",
				allSourcesMin: 0.58,
				allSourcesMax: 1.1484,
				allComparisonZero: 0.949459969162941,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.40599999308586115,
				allMax: 1.4929199452400208,
				name: "Turret Tracking",
				iconID: 1398,
				highIsGood: true
			},
			{
				id: 263,
				type: "mutation",
				allSourcesMin: 80,
				allSourcesMax: 864,
				allComparisonZero: 589.5999789237976,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 55.999999046325684,
				allMax: 1123.1999588012695,
				name: "Shield Capacity",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 265,
				type: "mutation",
				allSourcesMin: 140,
				allSourcesMax: 912,
				allComparisonZero: 641.7999774217606,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 97.99999833106995,
				allMax: 1185.5999565124512,
				name: "Armor Hitpoints",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"60472": {
				name: "Exigent Medium Drone Navigation Mutaplasmid",
				iconID: 24894,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.2999999523162842,
						min: 1
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.2999999523162842,
						min: 1
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60473": {
				name: "Exigent Medium Drone Firepower Mutaplasmid",
				iconID: 24892,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.2000000476837158,
						min: 1
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60474": {
				name: "Exigent Medium Drone Durability Mutaplasmid",
				iconID: 24895,
				mutationValues: {
					"9": {
						max: 1.2999999523162842,
						min: 1
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.2999999523162842,
						min: 1
					},
					"265": {
						max: 1.2999999523162842,
						min: 1
					}
				}
			},
			"60475": {
				name: "Exigent Medium Drone Projection Mutaplasmid",
				iconID: 24893,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.2999999523162842,
						min: 1
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.2999999523162842,
						min: 1
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"2173": {
				name: "Infiltrator I",
				attributes: {
					"9": 340,
					"37": 2300,
					"54": 4800,
					"64": 1.4,
					"158": 3000,
					"160": 0.8,
					"263": 80,
					"265": 380
				}
			},
			"2175": {
				name: "Infiltrator II",
				attributes: {
					"9": 408,
					"37": 2760,
					"54": 4800,
					"64": 1.68,
					"158": 3000,
					"160": 0.96,
					"263": 96,
					"265": 456
				}
			},
			"2183": {
				name: "Hammerhead I",
				attributes: {
					"9": 400,
					"37": 1680,
					"54": 4200,
					"64": 1.6,
					"158": 3000,
					"160": 0.58,
					"263": 100,
					"265": 180
				}
			},
			"2185": {
				name: "Hammerhead II",
				attributes: {
					"9": 480,
					"37": 2016,
					"54": 4200,
					"64": 1.92,
					"158": 3000,
					"160": 0.696,
					"263": 120,
					"265": 216
				}
			},
			"15508": {
				name: "Vespa I",
				attributes: {
					"9": 300,
					"37": 1890,
					"54": 4800,
					"64": 1.5,
					"158": 3000,
					"160": 0.65,
					"263": 360,
					"265": 140
				}
			},
			"15510": {
				name: "Valkyrie I",
				attributes: {
					"9": 260,
					"37": 2500,
					"54": 4200,
					"64": 1.3,
					"158": 3000,
					"160": 0.87,
					"263": 200,
					"265": 180
				}
			},
			"21638": {
				name: "Vespa II",
				attributes: {
					"9": 360,
					"37": 2268,
					"54": 4800,
					"64": 1.8,
					"158": 3000,
					"160": 0.78,
					"263": 432,
					"265": 168
				}
			},
			"21640": {
				name: "Valkyrie II",
				attributes: {
					"9": 312,
					"37": 3000,
					"54": 4200,
					"64": 1.56,
					"158": 3000,
					"160": 1.044,
					"263": 240,
					"265": 216
				}
			},
			"28270": {
				name: "'Integrated' Hammerhead",
				attributes: {
					"9": 440,
					"37": 1848,
					"54": 4200,
					"64": 1.84,
					"158": 3000,
					"160": 0.638,
					"263": 110,
					"265": 198
				}
			},
			"28272": {
				name: "'Augmented' Hammerhead",
				attributes: {
					"9": 720,
					"37": 2218,
					"54": 4200,
					"64": 2.112,
					"158": 3000,
					"160": 0.696,
					"263": 180,
					"265": 324
				}
			},
			"28282": {
				name: "'Integrated' Infiltrator",
				attributes: {
					"9": 374,
					"37": 2530,
					"54": 4800,
					"64": 1.61,
					"158": 3000,
					"160": 0.88,
					"263": 88,
					"265": 418
				}
			},
			"28284": {
				name: "'Augmented' Infiltrator",
				attributes: {
					"9": 612,
					"37": 3036,
					"54": 4800,
					"64": 1.848,
					"158": 3000,
					"160": 0.96,
					"263": 144,
					"265": 684
				}
			},
			"28294": {
				name: "'Integrated' Valkyrie",
				attributes: {
					"9": 286,
					"37": 2750,
					"54": 4200,
					"64": 1.495,
					"158": 3000,
					"160": 0.957,
					"263": 220,
					"265": 198
				}
			},
			"28296": {
				name: "'Augmented' Valkyrie",
				attributes: {
					"9": 468,
					"37": 3300,
					"54": 4200,
					"64": 1.716,
					"158": 3000,
					"160": 1.044,
					"263": 360,
					"265": 324
				}
			},
			"28298": {
				name: "'Integrated' Vespa",
				attributes: {
					"9": 330,
					"37": 2079,
					"54": 4800,
					"64": 1.725,
					"158": 3000,
					"160": 0.715,
					"263": 396,
					"265": 154
				}
			},
			"28300": {
				name: "'Augmented' Vespa",
				attributes: {
					"9": 540,
					"37": 2495,
					"54": 4800,
					"64": 1.98,
					"158": 3000,
					"160": 0.78,
					"263": 648,
					"265": 252
				}
			},
			"31866": {
				name: "Imperial Navy Infiltrator",
				attributes: {
					"9": 340,
					"37": 2760,
					"54": 4800,
					"64": 1.68,
					"158": 3000,
					"160": 1.056,
					"263": 192,
					"265": 912
				}
			},
			"31874": {
				name: "Caldari Navy Vespa",
				attributes: {
					"9": 300,
					"37": 2268,
					"54": 4800,
					"64": 1.8,
					"158": 3000,
					"160": 0.858,
					"263": 864,
					"265": 336
				}
			},
			"31882": {
				name: "Federation Navy Hammerhead",
				attributes: {
					"9": 400,
					"37": 2016,
					"54": 4200,
					"64": 1.92,
					"158": 3000,
					"160": 0.7656,
					"263": 240,
					"265": 432
				}
			},
			"31890": {
				name: "Republic Fleet Valkyrie",
				attributes: {
					"9": 260,
					"37": 3000,
					"54": 4200,
					"64": 1.56,
					"158": 3000,
					"160": 1.1484,
					"263": 480,
					"265": 432
				}
			}
		}
	},
	"60480": {
		typeID: 60480,
		name: "Heavy Mutated Drone",
		group: "Drones",
		category: "Heavy",
		attributeIds: [
			9,
			37,
			54,
			64,
			158,
			160,
			263,
			265
		],
		attributes: [
			{
				id: 9,
				type: "mutation",
				allSourcesMin: 520,
				allSourcesMax: 1440,
				allComparisonZero: 1117.999962568283,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 363.99999380111694,
				allMax: 1871.9999313354492,
				name: "Structure Hitpoints",
				iconID: 67,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 37,
				type: "mutation",
				allSourcesMin: 1000,
				allSourcesMax: 1980,
				allComparisonZero: 1636.9999468326569,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 699.999988079071,
				allMax: 2573.9999055862427,
				name: "Maximum Velocity",
				iconID: 1389,
				unitID: 11,
				highIsGood: true
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 4200,
				allSourcesMax: 4800,
				allComparisonZero: 4589.999860525131,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 2939.9999499320984,
				allMax: 6239.999771118164,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.3,
				allSourcesMax: 2.112,
				allComparisonZero: 1.7222000426054,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.9099999845027924,
				allMax: 2.534400100708008,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 158,
				type: "mutation",
				allSourcesMin: 5000,
				allSourcesMax: 5000,
				allComparisonZero: 4999.999850988388,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 3499.999940395355,
				allMax: 6499.999761581421,
				name: "Accuracy falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 160,
				type: "mutation",
				allSourcesMin: 0.45,
				allSourcesMax: 0.9372,
				allComparisonZero: 0.7666799749732017,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.314999994635582,
				allMax: 1.2183599553108215,
				name: "Turret Tracking",
				iconID: 1398,
				highIsGood: true
			},
			{
				id: 263,
				type: "mutation",
				allSourcesMin: 160,
				allSourcesMax: 1728,
				allComparisonZero: 1179.1999578475952,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 111.99999809265137,
				allMax: 2246.399917602539,
				name: "Shield Capacity",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 265,
				type: "mutation",
				allSourcesMin: 280,
				allSourcesMax: 1824,
				allComparisonZero: 1283.5999548435211,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 195.9999966621399,
				allMax: 2371.1999130249023,
				name: "Armor Hitpoints",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"60463": {
				name: "Exigent Heavy Drone Navigation Mutaplasmid",
				iconID: 24894,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.2999999523162842,
						min: 1
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.2999999523162842,
						min: 1
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60464": {
				name: "Exigent Heavy Drone Firepower Mutaplasmid",
				iconID: 24892,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.2000000476837158,
						min: 1
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60465": {
				name: "Exigent Heavy Drone Durability Mutaplasmid",
				iconID: 24895,
				mutationValues: {
					"9": {
						max: 1.2999999523162842,
						min: 1
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.2999999523162842,
						min: 1
					},
					"265": {
						max: 1.2999999523162842,
						min: 1
					}
				}
			},
			"60466": {
				name: "Exigent Heavy Drone Projection Mutaplasmid",
				iconID: 24893,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.2999999523162842,
						min: 1
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.2999999523162842,
						min: 1
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"1201": {
				name: "Wasp I",
				attributes: {
					"9": 600,
					"37": 1125,
					"54": 4800,
					"64": 1.5,
					"158": 5000,
					"160": 0.535,
					"263": 720,
					"265": 280
				}
			},
			"2193": {
				name: "Praetor I",
				attributes: {
					"9": 680,
					"37": 1380,
					"54": 4800,
					"64": 1.4,
					"158": 5000,
					"160": 0.63,
					"263": 160,
					"265": 760
				}
			},
			"2195": {
				name: "Praetor II",
				attributes: {
					"9": 816,
					"37": 1656,
					"54": 4800,
					"64": 1.68,
					"158": 5000,
					"160": 0.756,
					"263": 192,
					"265": 912
				}
			},
			"2436": {
				name: "Wasp II",
				attributes: {
					"9": 720,
					"37": 1350,
					"54": 4800,
					"64": 1.8,
					"158": 5000,
					"160": 0.642,
					"263": 864,
					"265": 336
				}
			},
			"2444": {
				name: "Ogre I",
				attributes: {
					"9": 800,
					"37": 1000,
					"54": 4200,
					"64": 1.6,
					"158": 5000,
					"160": 0.45,
					"263": 200,
					"265": 360
				}
			},
			"2446": {
				name: "Ogre II",
				attributes: {
					"9": 960,
					"37": 1200,
					"54": 4200,
					"64": 1.92,
					"158": 5000,
					"160": 0.54,
					"263": 240,
					"265": 432
				}
			},
			"2476": {
				name: "Berserker I",
				attributes: {
					"9": 520,
					"37": 1500,
					"54": 4200,
					"64": 1.3,
					"158": 5000,
					"160": 0.71,
					"263": 400,
					"265": 360
				}
			},
			"2478": {
				name: "Berserker II",
				attributes: {
					"9": 624,
					"37": 1800,
					"54": 4200,
					"64": 1.56,
					"158": 5000,
					"160": 0.852,
					"263": 480,
					"265": 432
				}
			},
			"28266": {
				name: "'Integrated' Berserker",
				attributes: {
					"9": 572,
					"37": 1650,
					"54": 4200,
					"64": 1.495,
					"158": 5000,
					"160": 0.781,
					"263": 440,
					"265": 396
				}
			},
			"28268": {
				name: "'Augmented' Berserker",
				attributes: {
					"9": 936,
					"37": 1980,
					"54": 4200,
					"64": 1.716,
					"158": 5000,
					"160": 0.852,
					"263": 720,
					"265": 648
				}
			},
			"28286": {
				name: "'Integrated' Ogre",
				attributes: {
					"9": 880,
					"37": 1100,
					"54": 4200,
					"64": 1.84,
					"158": 5000,
					"160": 0.495,
					"263": 220,
					"265": 396
				}
			},
			"28288": {
				name: "'Augmented' Ogre",
				attributes: {
					"9": 1440,
					"37": 1320,
					"54": 4200,
					"64": 2.112,
					"158": 5000,
					"160": 0.54,
					"263": 360,
					"265": 648
				}
			},
			"28290": {
				name: "'Integrated' Praetor",
				attributes: {
					"9": 748,
					"37": 1518,
					"54": 4800,
					"64": 1.61,
					"158": 5000,
					"160": 0.693,
					"263": 176,
					"265": 836
				}
			},
			"28292": {
				name: "'Augmented' Praetor",
				attributes: {
					"9": 1224,
					"37": 1822,
					"54": 4800,
					"64": 1.848,
					"158": 5000,
					"160": 0.756,
					"263": 288,
					"265": 1368
				}
			},
			"28306": {
				name: "'Integrated' Wasp",
				attributes: {
					"9": 660,
					"37": 1238,
					"54": 4800,
					"64": 1.725,
					"158": 5000,
					"160": 0.5885,
					"263": 792,
					"265": 308
				}
			},
			"28308": {
				name: "'Augmented' Wasp",
				attributes: {
					"9": 1080,
					"37": 1485,
					"54": 4800,
					"64": 1.98,
					"158": 5000,
					"160": 0.642,
					"263": 1296,
					"265": 504
				}
			},
			"31870": {
				name: "Imperial Navy Praetor",
				attributes: {
					"9": 680,
					"37": 1656,
					"54": 4800,
					"64": 1.68,
					"158": 5000,
					"160": 0.8316,
					"263": 384,
					"265": 1824
				}
			},
			"31876": {
				name: "Caldari Navy Wasp",
				attributes: {
					"9": 600,
					"37": 1350,
					"54": 4800,
					"64": 1.8,
					"158": 5000,
					"160": 0.7062,
					"263": 1728,
					"265": 672
				}
			},
			"31884": {
				name: "Federation Navy Ogre",
				attributes: {
					"9": 800,
					"37": 1200,
					"54": 4200,
					"64": 1.92,
					"158": 5000,
					"160": 0.594,
					"263": 480,
					"265": 864
				}
			},
			"31892": {
				name: "Republic Fleet Berserker",
				attributes: {
					"9": 520,
					"37": 1800,
					"54": 4200,
					"64": 1.56,
					"158": 5000,
					"160": 0.9372,
					"263": 960,
					"265": 864
				}
			}
		}
	},
	"60481": {
		typeID: 60481,
		name: "Sentry Mutated Drone",
		group: "Drones",
		category: "Sentry",
		attributeIds: [
			9,
			54,
			64,
			158,
			160,
			263,
			265
		],
		attributes: [
			{
				id: 9,
				type: "mutation",
				allSourcesMin: 1440,
				allSourcesMax: 1728,
				allComparisonZero: 1627.1999502182007,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 1007.9999828338623,
				allMax: 2246.399917602539,
				name: "Structure Hitpoints",
				iconID: 67,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 54,
				type: "mutation",
				allSourcesMin: 15000,
				allSourcesMax: 60000,
				allComparisonZero: 44249.99848008156,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 10499.999821186066,
				allMax: 77999.99713897705,
				name: "Optimal Range",
				iconID: 1391,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 64,
				type: "mutation",
				allSourcesMin: 1.4,
				allSourcesMax: 1.65,
				allComparisonZero: 1.4800000309944152,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.9799999833106994,
				allMax: 1.980000078678131,
				name: "Damage Modifier",
				iconID: 1432,
				unitID: 104,
				highIsGood: true
			},
			{
				id: 158,
				type: "mutation",
				allSourcesMin: 10000,
				allSourcesMax: 54000,
				allComparisonZero: 38599.99865293503,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 6999.99988079071,
				allMax: 70199.99742507935,
				name: "Accuracy falloff",
				iconID: 1399,
				unitID: 1,
				highIsGood: true
			},
			{
				id: 160,
				type: "mutation",
				allSourcesMin: 0.01,
				allSourcesMax: 0.03528,
				allComparisonZero: 0.02643199909925461,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 0.006999999880790711,
				allMax: 0.04586399831771851,
				name: "Turret Tracking",
				iconID: 1398,
				highIsGood: true
			},
			{
				id: 263,
				type: "mutation",
				allSourcesMin: 450,
				allSourcesMax: 2304,
				allComparisonZero: 1655.0999423861504,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 314.99999463558197,
				allMax: 2995.1998901367188,
				name: "Shield Capacity",
				iconID: 1384,
				unitID: 113,
				highIsGood: true
			},
			{
				id: 265,
				type: "mutation",
				allSourcesMin: 450,
				allSourcesMax: 2304,
				allComparisonZero: 1655.0999423861504,
				allMutatorsMax: 1.2999999523162842,
				allMutatorsMin: 0.699999988079071,
				allMin: 314.99999463558197,
				allMax: 2995.1998901367188,
				name: "Armor Hitpoints",
				iconID: 1383,
				unitID: 113,
				highIsGood: true
			}
		],
		mutators: {
			"60467": {
				name: "Exigent Sentry Drone Precision Mutaplasmid",
				iconID: 24894,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.2999999523162842,
						min: 1
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60468": {
				name: "Exigent Sentry Drone Firepower Mutaplasmid",
				iconID: 24892,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.2000000476837158,
						min: 1
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			},
			"60469": {
				name: "Exigent Sentry Drone Durability Mutaplasmid",
				iconID: 24895,
				mutationValues: {
					"9": {
						max: 1.2999999523162842,
						min: 1
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.2999999523162842,
						min: 1
					},
					"265": {
						max: 1.2999999523162842,
						min: 1
					}
				}
			},
			"60470": {
				name: "Exigent Sentry Drone Projection Mutaplasmid",
				iconID: 24893,
				mutationValues: {
					"9": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"37": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"54": {
						max: 1.2999999523162842,
						min: 1
					},
					"64": {
						max: 1.100000023841858,
						min: 0.699999988079071
					},
					"158": {
						max: 1.2999999523162842,
						min: 1
					},
					"160": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"263": {
						max: 1.149999976158142,
						min: 0.699999988079071
					},
					"265": {
						max: 1.149999976158142,
						min: 0.699999988079071
					}
				}
			}
		},
		sources: {
			"23525": {
				name: "Curator I",
				attributes: {
					"9": 1440,
					"54": 35000,
					"64": 1.55,
					"158": 10000,
					"160": 0.02,
					"263": 450,
					"265": 960
				}
			},
			"23559": {
				name: "Warden I",
				attributes: {
					"9": 1440,
					"54": 50000,
					"64": 1.4,
					"158": 35000,
					"160": 0.01,
					"263": 960,
					"265": 450
				}
			},
			"23561": {
				name: "Garde I",
				attributes: {
					"9": 1440,
					"54": 15000,
					"64": 1.65,
					"158": 25000,
					"160": 0.028,
					"263": 600,
					"265": 800
				}
			},
			"23563": {
				name: "Bouncer I",
				attributes: {
					"9": 1440,
					"54": 30000,
					"64": 1.45,
					"158": 45000,
					"160": 0.014,
					"263": 800,
					"265": 600
				}
			},
			"28209": {
				name: "Warden II",
				attributes: {
					"9": 1728,
					"54": 60000,
					"64": 1.4,
					"158": 42000,
					"160": 0.012,
					"263": 1152,
					"265": 540
				}
			},
			"28211": {
				name: "Garde II",
				attributes: {
					"9": 1728,
					"54": 18000,
					"64": 1.65,
					"158": 30000,
					"160": 0.0336,
					"263": 720,
					"265": 960
				}
			},
			"28213": {
				name: "Curator II",
				attributes: {
					"9": 1728,
					"54": 42000,
					"64": 1.55,
					"158": 12000,
					"160": 0.024,
					"263": 540,
					"265": 1152
				}
			},
			"28215": {
				name: "Bouncer II",
				attributes: {
					"9": 1728,
					"54": 36000,
					"64": 1.45,
					"158": 54000,
					"160": 0.0168,
					"263": 960,
					"265": 720
				}
			},
			"31868": {
				name: "Imperial Navy Curator",
				attributes: {
					"9": 1440,
					"54": 42000,
					"64": 1.55,
					"158": 12000,
					"160": 0.0252,
					"263": 1080,
					"265": 2304
				}
			},
			"31878": {
				name: "Caldari Navy Warden",
				attributes: {
					"9": 1440,
					"54": 60000,
					"64": 1.4,
					"158": 42000,
					"160": 0.0126,
					"263": 2304,
					"265": 1080
				}
			},
			"31886": {
				name: "Federation Navy Garde",
				attributes: {
					"9": 1440,
					"54": 18000,
					"64": 1.65,
					"158": 30000,
					"160": 0.03528,
					"263": 1440,
					"265": 1920
				}
			},
			"31894": {
				name: "Republic Fleet Bouncer",
				attributes: {
					"9": 1440,
					"54": 36000,
					"64": 1.45,
					"158": 54000,
					"160": 0.01764,
					"263": 1920,
					"265": 1440
				}
			}
		}
	},
	"60482": {
		typeID: 60482,
		name: "Mutated Drone Damage Amplifier",
		group: "Damage Modules",
		category: "Drone Amp.",
		attributeIds: [
			50,
			1255
		],
		attributes: [
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 20,
				allSourcesMax: 30,
				allComparisonZero: 29.49999988079071,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 13.999999761581421,
				allMax: 45,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 1255,
				type: "mutation",
				allSourcesMin: 15,
				allSourcesMax: 26.5,
				allComparisonZero: 21.900000721216202,
				allMutatorsMax: 1.2000000476837158,
				allMutatorsMin: 0.800000011920929,
				allMin: 12.000000178813934,
				allMax: 31.80000126361847,
				name: "Drone Damage Bonus",
				iconID: 0,
				unitID: 105,
				highIsGood: true
			}
		],
		mutators: {
			"60476": {
				name: "Radical Drone Damage Amplifier Mutaplasmid",
				iconID: 24905,
				mutationValues: {
					"50": {
						max: 1.5,
						min: 0.699999988079071
					},
					"1255": {
						max: 1.2000000476837158,
						min: 0.800000011920929
					}
				}
			}
		},
		sources: {
			"4393": {
				name: "Drone Damage Amplifier I",
				iconID: 10934,
				attributes: {
					"50": 27,
					"1255": 15
				}
			},
			"4405": {
				name: "Drone Damage Amplifier II",
				iconID: 10934,
				attributes: {
					"50": 30,
					"1255": 20.5
				}
			},
			"32919": {
				name: "Unit D-34343's Modified Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 22,
					"1255": 24.5
				}
			},
			"32921": {
				name: "Unit F-435454's Modified Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 24,
					"1255": 25.15
				}
			},
			"32923": {
				name: "Unit P-343554's Modified Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 26,
					"1255": 25.8
				}
			},
			"32925": {
				name: "Unit W-634's Modified Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 28,
					"1255": 26.5
				}
			},
			"33842": {
				name: "Federation Navy Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 20,
					"1255": 23.8
				}
			},
			"33844": {
				name: "Imperial Navy Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 20,
					"1255": 23.8
				}
			},
			"33846": {
				name: "Dread Guristas Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 20,
					"1255": 23.8
				}
			},
			"33848": {
				name: "Sentient Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 20,
					"1255": 23.8
				}
			},
			"41034": {
				name: "AE-K Compact Drone Damage Amplifier",
				iconID: 10934,
				attributes: {
					"50": 25,
					"1255": 17
				}
			}
		}
	},
	"60483": {
		typeID: 60483,
		name: "Mutated Fighter Support Unit",
		group: "Fighter Support Unit",
		category: "Fighter Support Unit",
		attributeIds: [
			30,
			50,
			2335,
			2336,
			2337,
			2338
		],
		attributes: [
			{
				id: 30,
				type: "mutation",
				allSourcesMin: 60000,
				allSourcesMax: 90000,
				allComparisonZero: 88499.99964237213,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 41999.99928474426,
				allMax: 135000,
				name: "Powergrid Usage",
				iconID: 70,
				unitID: 107,
				highIsGood: false
			},
			{
				id: 50,
				type: "mutation",
				allSourcesMin: 50,
				allSourcesMax: 80,
				allComparisonZero: 77.49999970197678,
				allMutatorsMax: 1.5,
				allMutatorsMin: 0.699999988079071,
				allMin: 34.99999940395355,
				allMax: 120,
				name: "CPU usage",
				iconID: 1405,
				unitID: 106,
				highIsGood: false
			},
			{
				id: 2335,
				type: "mutation",
				allSourcesMin: 1.05,
				allSourcesMax: 1.076,
				allComparisonZero: 1.0631559682488443,
				allMutatorsMax: 1.0119999647140503,
				allMutatorsMin: 0.9879999756813049,
				allMin: 1.0373999744653701,
				allMax: 1.0889119620323182,
				name: "Fighter Shield Bonus",
				iconID: 1384,
				unitID: 109,
				highIsGood: true
			},
			{
				id: 2336,
				type: "mutation",
				allSourcesMin: 1.05,
				allSourcesMax: 1.076,
				allComparisonZero: 1.0631559682488443,
				allMutatorsMax: 1.0119999647140503,
				allMutatorsMin: 0.9879999756813049,
				allMin: 1.0373999744653701,
				allMax: 1.0889119620323182,
				name: "Fighter Velocity Bonus",
				iconID: 1389,
				unitID: 109,
				highIsGood: true
			},
			{
				id: 2337,
				type: "mutation",
				allSourcesMin: 0.924,
				allSourcesMax: 0.95,
				allComparisonZero: 0.995541983962059,
				allMutatorsMax: 1.1319999694824219,
				allMutatorsMin: 0.9909999966621399,
				allMin: 0.9156839969158173,
				allMax: 1.0753999710083006,
				name: "Fighter ROF Bonus",
				iconID: 1389,
				unitID: 111,
				highIsGood: false
			},
			{
				id: 2338,
				type: "mutation",
				allSourcesMin: 0.924,
				allSourcesMax: 0.95,
				allComparisonZero: 0.9371559720039367,
				allMutatorsMax: 1.0119999647140503,
				allMutatorsMin: 0.9879999756813049,
				allMin: 0.9129119775295258,
				allMax: 0.9613999664783477,
				name: "Fighter Shield Recharge Bonus",
				iconID: 1392,
				unitID: 111,
				highIsGood: false
			}
		],
		mutators: {
			"60477": {
				name: "Radical Fighter Support Unit Mutaplasmid",
				iconID: 24905,
				mutationValues: {
					"30": {
						max: 1.5,
						min: 0.699999988079071
					},
					"50": {
						max: 1.5,
						min: 0.699999988079071
					},
					"2335": {
						max: 1.0119999647140503,
						min: 0.9879999756813049
					},
					"2336": {
						max: 1.0119999647140503,
						min: 0.9879999756813049
					},
					"2337": {
						max: 1.1319999694824219,
						min: 0.9909999966621399
					},
					"2338": {
						max: 1.0119999647140503,
						min: 0.9879999756813049
					}
				}
			}
		},
		sources: {
			"24283": {
				name: "Fighter Support Unit I",
				iconID: 2987,
				attributes: {
					"30": 75000,
					"50": 75,
					"2335": 1.05,
					"2336": 1.05,
					"2337": 0.95,
					"2338": 0.95
				}
			},
			"32951": {
				name: "Unit D-34343's Modified Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 75000,
					"50": 62,
					"2335": 1.07,
					"2336": 1.07,
					"2337": 0.93,
					"2338": 0.93
				}
			},
			"32953": {
				name: "Unit F-435454's Modified Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 75000,
					"50": 59,
					"2335": 1.072,
					"2336": 1.072,
					"2337": 0.928,
					"2338": 0.928
				}
			},
			"32955": {
				name: "Unit P-343554's Modified Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 75000,
					"50": 53,
					"2335": 1.074,
					"2336": 1.074,
					"2337": 0.926,
					"2338": 0.926
				}
			},
			"32957": {
				name: "Unit W-634's Modified Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 75000,
					"50": 50,
					"2335": 1.076,
					"2336": 1.076,
					"2337": 0.924,
					"2338": 0.924
				}
			},
			"41414": {
				name: "Hermes Compact Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 60000,
					"50": 60,
					"2335": 1.055,
					"2336": 1.055,
					"2337": 0.945,
					"2338": 0.945
				}
			},
			"41415": {
				name: "Fighter Support Unit II",
				iconID: 2987,
				attributes: {
					"30": 90000,
					"50": 75,
					"2335": 1.06,
					"2336": 1.06,
					"2337": 0.94,
					"2338": 0.94
				}
			},
			"41417": {
				name: "Sentient Fighter Support Unit",
				iconID: 2987,
				attributes: {
					"30": 80000,
					"50": 80,
					"2335": 1.065,
					"2336": 1.065,
					"2337": 0.935,
					"2338": 0.935
				}
			}
		}
	}
};
var sde = {
	abyssalTypes: abyssalTypes
};

const inventoryToInventoryCardDTO = (data) => {
  const dataCopy = deepCopy(data);
  data.data = dataCopy;
  const abyssalTypeData = sde.abyssalTypes[data.typeID];
  const mutator = abyssalTypeData.mutators[data.mutatorTypeID];
  const source = abyssalTypeData.sources[data.sourceTypeID];
  // console.log('abyssalTypeData', abyssalTypeData, mutator, source)

  data.attributes = cloneSimpleList(abyssalTypeData.attributes);
  // console.log('data.attributes', data.attributes)
  for (const attribute of data.attributes) {
  // for (const attribute of data.attributes.filter(a => a.type === 'mutation')) {
    // const attribute = data.attributes.find(a => a.id === parseInt(attributeId))
    if (attribute.type === 'mutation') {
      attribute.value = data.attributesRaw[attribute.id];
      attribute.sourceValue = source.attributes[attribute.id];
      attribute.diff = attribute.value - attribute.sourceValue;
      attribute.isGood = (attribute.diff > 0) === attribute.highIsGood;
      // if (attribute.type === 'mutation') {
      attribute.mutationMin = attribute.sourceValue * (attribute.isGood ? mutator.mutationValues[attribute.id].max : mutator.mutationValues[attribute.id].min);
      attribute.mutationMax = attribute.sourceValue * (attribute.isGood ? mutator.mutationValues[attribute.id].min : mutator.mutationValues[attribute.id].max);
      attribute.zeroDiff = Math.abs((attribute.highIsGood ? attribute.mutationMin : attribute.mutationMax) - attribute.sourceValue);
      attribute.perc = Math.round(100 * (Math.abs(attribute.diff) / attribute.zeroDiff));
      // }
      attribute.allDiff = attribute.value - attribute.allComparisonZero;
      attribute.allIsGood = (attribute.allDiff > 0) === attribute.highIsGood;
      attribute.allMin = attribute.isGood ? attribute.allMax : attribute.allMin;
      attribute.allMax = attribute.isGood ? attribute.allMin : attribute.allMax;
      attribute.allZeroDiff = Math.abs((attribute.highIsGood ? attribute.allMin : attribute.allMax) - attribute.allComparisonZero);
      attribute.allPerc = Math.round(100 * (Math.abs(attribute.allDiff) / attribute.allZeroDiff));
    }
    if (attribute.type === 'base-module') {
      attribute.value = data.attributesRaw[attribute.id];
      attribute.sourceValue = attribute.allComparisonZero;
      attribute.diff = attribute.value - attribute.allComparisonZero;
      attribute.isGood = (attribute.diff > 0) === attribute.highIsGood;

      attribute.min = attribute.isGood ? attribute.allSourcesMax : attribute.allSourcesMin;
      attribute.max = attribute.isGood ? attribute.allSourcesMin : attribute.allSourcesMax;
      attribute.zeroDiff = Math.abs((attribute.highIsGood ? attribute.allSourcesMin : attribute.allSourcesMax) - attribute.allComparisonZero);
      attribute.perc = Math.round(100 * (Math.abs(attribute.diff) / attribute.zeroDiff));
    }
  }
  data.attributes.sort((a, b) => a.name.localeCompare(b.name));
  data.baseAttributes = [];

  data.typeName = abyssalTypeData.name;
  data.group = abyssalTypeData.group;
  data.category = abyssalTypeData.category;

  data.mutatorTypeName = mutator.name;
  data.sourceTypeName = source.name;

  return data
};

const askForSellerScopePermission = () => {
  const html = `
    <div class="container">
        <div class="row">
            <div class="col text-center my-2">
                <h1>Abyssal Board</h1>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <div class="alert alert-warning" role="alert">
                    <p>In order to sell with us, we need to ask for permission to view your assets.</p>
                    <p>Click below to log in with EVE Online Single Sign On and it will ask for these specfic permissions</p>
                    <button class="btn p-0 border-0 login-seller">
                        <img src="https://web.ccpgamescdn.com/eveonlineassets/developers/eve-sso-login-white-small.png"
                            alt="EVE SSO Login Buttons Small Black">
                    </button>
                </div>
                <div class="alert alert-info" role="alert">
                    <p>Scopes used:</p>
                    <ul>
                        <li><b>esi-assets.read_assets.v1</b> - Identifies the assets in your characters.
                        These are filtered by abyssal types and presented to you for you to automatically create a listing</li>
                    </ul>

                    <p><i>Note: No information is sent or used by Abyssal Board other than identifying and validating the items for sale.
                    This includes refresh tokens. They are all persisted in your browser and not on any Abyss Board servers. We have no way of refreshing your tokens ourselves.
                    All source code is available.</a></p>
                </div>
            </div>
        </div>
    </div>
    `;
  document.querySelector('.content').innerHTML = html;

  document.querySelector('.login-seller').addEventListener('click', () => {
    triggerLoginFlow(true);
  });
};

const renderSellerPlaceholder = (userDetails) => {
  let html = `
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="d-grid gap-2 d-md-flex justify-content-between my-2">
                    <h1>Hi ${userDetails.characterName}! Here are your mod listings!</h1>
                    <a href="/sell/inventory" class="btn btn-primary align-self-center" type="button"><i class="bi bi-plus-lg"></i> Add new mod listings</a>
                </div>
            </div>
        </div>
        <div class="payment-content">
        </div>
        <div class="inventory-content">
        </div>
        <div class="placeholder-content">

            <div class="row mt-4">
                <div class="col placeholder-glow">
                    <span class="placeholder col-3"></span>
                    <span class="placeholder col-6"></span>
                    <span class="placeholder col-2"></span>
                </div>
            </div>
            <div class="row">
        `;
  for (let i = 0; i < 8; i++) {
    html += `
                <div class="col-3 mt-4">
                    <div class="card" aria-hidden="true">
                        <svg class="bd-placeholder-img card-img-top" width="100%" height="180" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder" preserveAspectRatio="xMidYMid slice" focusable="false">
                            <title>Placeholder</title>
                            <rect width="100%" height="100%" fill="#868e96"></rect>
                        </svg>
                        <div class="card-body">
                            <h5 class="card-title placeholder-glow">
                            <span class="placeholder col-6"></span>
                            </h5>
                            <p class="card-text placeholder-glow">
                            <span class="placeholder col-7"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-4"></span>
                            <span class="placeholder col-6"></span>
                            <span class="placeholder col-8"></span>
                            </p>
                            <a class="btn btn-secondary disabled placeholder col-6 float-end" aria-disabled="true"></a>
                        </div>
                    </div>
                </div>
    `;
  }

  html += `
            </div>
            <div class="row mt-4">
                <div class="col placeholder-glow">
                    <span class="placeholder col-6"></span>
                    <span class="placeholder col-3"></span>
                    <span class="placeholder col-2"></span>
                </div>
            </div>
        </div>
    </div>
    `;
  document.querySelector('.content').innerHTML = html;
};

const renderSellerListing = (listedItems) => {
  let html = '';
  if (listedItems.length === 0) {
    html = `
        <div class="row mt-4">
            <div class="col">
                <div class="alert alert-info" role="alert">
                    <p class="m-0">No items listed - Click on the <code>Add new mod listings</code> button to select one to sell</p>
                </div>
            </div>
        </div>
        `;
  } else {
    html += `
    <div class="row row-cols-lg-auto g-3 align-items-center flex-row-reverse px-2">
      <div class="col-12">
        <input class="form-control ms-2 data-search" type="search" placeholder="Search listings">
      </div>
      <div class="col-12">
        <select class="form-select filter-status">
            <option value="AWAITING_PAYMENT,ON_SALE" selected>Filter: Active</option>
            <option value="AWAITING_PAYMENT,ON_SALE,COMPLETE">Filter: All</option>
            <option value="ON_SALE">Filter: On Sale</option>
            <option value="AWAITING_PAYMENT">Filter: Awaiting Payment</option>
            <option value="COMPLETE">Filter: Complete / Sold</option>
        </select>
      </div>
    </div>
`;
    html += `
        <div class="row mt-4 all-items-filtered" style="display:none;">
            <div class="col">
                <div class="alert alert-info" role="alert">
                    <p class="m-0">Some listed mods are hidden - Use <code>Filter: All</code> to see all item</p>
                </div>
            </div>
        </div>
        `;
    html += '<div class="row mb-3">';
    for (const listedItem of listedItems) {
      html += `
        <div class="col-3 mt-4">
            ${renderInventoryCard(listedItem)}
        </div>`;
    }
    html += '</div>';
  }
  document.querySelector('.inventory-content').innerHTML = html;
  document.querySelector('.placeholder-content').remove();
  if (listedItems.length > 0) {
    document.querySelector('.data-search').addEventListener('input', function () {
      const value = this.value;
      console.log('value', value);
      filterCards$1();
    });
    document.querySelector('.filter-status').addEventListener('change', function () {
      const value = this.value;
      console.log('value', value);
      filterCards$1();
    });
    filterCards$1();
  }

  for (const invAwaitingEle of [...document.querySelectorAll('.inventory-item.awaiting-payment')]) {
    invAwaitingEle.addEventListener('click', async () => {
      const itemID = parseInt(invAwaitingEle.getAttribute('data-item-id'));
      const payment = payments.find(p => p.inventory.includes(itemID));
      const otherInventories = payment.inventory.filter(pi => pi !== itemID);
      console.log('awaiting-payment', itemID, payment, otherInventories);

      const otherInvWording = otherInventories.length > 0 ? `<p><i><b>Note:</b> This mod was listed at the same time with ${otherInventories.length} other mod${otherInventories.length > 1 ? 's' : ''}. The listing fee due balance will be updated to include only the remaining items</i></p>` : '';
      await showModalAlert('Cancel Listing', `
      <p>It doesn't look as though you've paid a listing fee yet, so nothing is lost!</p>
      <p>If you cancel this listing, it'll disappear from this screen along with any payment reminders, if you want to relist it, simply add a new mod listing as before.</p>
      ${otherInvWording}`, [{
        buttonText: 'Cancel listing',
        style: 'btn-danger',
        cb: async () => {
          console.log('callback', invAwaitingEle, itemID);
          await cancelListing(itemID);
          console.log('listing cancelled');
          window.location.reload();
        }
      }]);
    });
  }
  for (const invOnSaleEle of [...document.querySelectorAll('.inventory-item.on-sale')]) {
    invOnSaleEle.addEventListener('click', async () => {
      const itemID = parseInt(invOnSaleEle.getAttribute('data-item-id'));
      const listingPrice = listedItems.find(i => i.itemID === itemID).listingPrice;
      console.log('on-sale', itemID, listedItems, listingPrice);
      await showModalAlert('Amend Listing', `
      <p>You've already paid the listing fee, if you want to cancel or have sold it elsewhere, the listing fee will not be returned.</p>
      <p>If you cancel this listing, it'll disappear from this screen along but the completed payments will remain visible. If you want to relist it, simply add a new mod listing as before.</p>
      <div class="row align-items-center">
        <div class="col-auto">
          <label for="list-price-modal" class="col-form-label">Listing Price</label>
        </div>
        <div class="col">
          <input type="text" id="list-price-modal" class="form-control list-price-modal" value="${formatToISKString(listingPrice).replace(' ISK', '').trim()}">
        </div>
      </div>

      `, [{
        buttonText: 'Cancel listing',
        style: 'btn-danger',
        cb: async () => {
          console.log('callback', invOnSaleEle, itemID);
          await cancelListing(itemID);
          console.log('listing cancelled');
          window.location.reload();
        }
      }, {
        buttonText: 'Listing complete / sold',
        style: 'btn-success',
        cb: async () => {
          console.log('callback', invOnSaleEle, itemID);
          await amendListing(itemID, { status: 'COMPLETE' });
          console.log('listing complete');
          window.location.reload();
        }
      }, {
        buttonText: 'Update list price',
        style: 'btn-primary',
        cb: async () => {
          console.log('callback', invOnSaleEle, itemID);
          // await amendListing(itemID, { status: 'COMPLETE' })
          const listingPriceString = document.querySelector('.list-price-modal').value;
          const listingPrice = listingPriceStringToInt(listingPriceString);
          console.log('listing complete', listingPriceString, listingPrice);
          await amendListing(itemID, { listingPrice });
          invOnSaleEle.querySelector('.listing-price').innerHTML = `<p>Listing price: <b>${formatToISKString(listingPrice)}</b></p>`;
          document.querySelector('.modal .btn-close').click();
        }
      }]);
    });
  }
};
const renderPaymentsListing = (payments, appConfig) => {
  let html = '';
  if (payments.length === 0) {
    html = `
          <div class="row mt-4">
              <div class="col">
                  <div class="alert alert-info" role="alert">
                      <p class="m-0">You don't have any payments awaiting settling</p>
                  </div>
              </div>
          </div>
          `;
  } else {
    html += `<div class="row">
        <div class="col-12">
            <h4>Outstanding Payments</h4>
            <p>Payments should be made in game to <code>${appConfig.corpName}</code>. Right click, give ISK. Always pay into the <code>${appConfig.corpDivisionName}</code> account with the reason shown below.</p>
            <p>Any issues? Contact us on discord. <i><b>Note:</b> Payments take up to 1 hour to be registered</i></p>
        </div>
    </div>`;

    html += `
        <div class="row row-cols-lg-auto g-3 align-items-center flex-row-reverse px-2 mb-3">
          <div class="col-12">
            <div class="form-check form-switch ms-2">
              <input class="form-check-input show-completed-payments" type="checkbox" role="switch" id="show-completed-payments">
              <label class="form-check-label" for="show-completed-payments">Show completed payments</label>
            </div>
          </div>
        </div>
        <div class="row mb-3">
    `;
    for (const payment of payments) {
      html += `
          <div class="col-3 mb-3"${payment.paid ? ' style="display:none;"' : ''}>
              <div class="card ${payment.paid ? 'border-success' : 'border-danger'} h-100 payment" role="button"${payment.inventory ? ` data-paid="${payment.paid}" data-inventory="${payment.inventory.join(',')}"` : ''}>
                <div class="card-body">
                    <div class="d-flex">
                        <div class="flex-grow-1">
                            <h5 class="">${payment.paid ? 'PAID' : 'Amount Due'}: </h5>
                        </div>
                        <div class="text-end">
                            <h5 class="">${formatToISKString(payment.amount)}</h5>
                        </div>
                    </div>
                    <div class="d-flex">
                        <div class="flex-grow-1">
                            <h6 class="">Reason / Ref: </h6>
                        </div>
                        <div class="text-end">
                            <code class="fs-6">${payment.id}</code>
                        </div>
                    </div>
                    <div class="d-flex">
                        <div class="flex-grow-1">
                            <h6 class="">Type: </h6>
                        </div>
                        <div class="text-end">
                            <span class="">${payment.type} of ${payment.inventory.length} mod${payment.inventory.length > 1 ? 's' : ''}</span>
                        </div>
                    </div>
                </div>
            </div>
        
          </div>`;
    }
    html += '</div>';
  }
  // TODO - Hide paid payments
  document.querySelector('.payment-content').innerHTML = html;

  const showCompletedPaymentsEle = document.querySelector('.show-completed-payments');
  if (showCompletedPaymentsEle) {
    showCompletedPaymentsEle.addEventListener('change', () => {
      const showAll = showCompletedPaymentsEle.checked;
      document.querySelectorAll('.payment').forEach((element) => {
        const isPaid = element.getAttribute('data-paid') === 'true';
        if (isPaid && !showAll) {
          element.parentElement.style.display = 'none';
        } else {
          element.parentElement.style.display = 'block';
        }
      });
    });
  }
  for (const paymentEle of [...document.querySelectorAll('.payment')]) {
    paymentEle.addEventListener('mouseenter', () => {
      const inventory = paymentEle.getAttribute('data-inventory');
      if (inventory === undefined) {
        return
      }
      const inventories = inventory.split(',');
      //   console.log('mouseenter', inventories)
      document.querySelectorAll('.inventory-item').forEach((element) => {
        const itemID = element.getAttribute('data-item-id');
        const shouldHide = !inventories.includes(itemID);
        // console.log('element', element, itemID, shouldHide)
        element.parentElement.style.display = shouldHide ? 'none' : 'block';
      });
    });
    paymentEle.addEventListener('mouseleave', () => {
    //   console.log('mouseleave')
      filterCards$1();
    });
  }
};
const filterCards$1 = () => {
  const searchQuery = document.querySelector('.data-search').value.toLowerCase();
  const allowedStatuses = document.querySelector('.filter-status').value;
  let count = 0;
  let hidden = 0;
  document.querySelectorAll('.inventory-item').forEach((element) => {
    const text = element.querySelector('.type-name').textContent.toLowerCase();
    const status = element.getAttribute('data-status');
    const shouldHide = (searchQuery && !text.includes(searchQuery)) || (!allowedStatuses.includes(status));
    if (shouldHide) hidden++;
    element.parentElement.style.display = shouldHide ? 'none' : 'block';
    count++;
  });
  if (count > 0 && count === hidden) {
    document.querySelector('.all-items-filtered').style.display = 'block';
  } else {
    document.querySelector('.all-items-filtered').style.display = 'none';
  }
  console.log('filterCards', count, hidden);
};
let payments;
const displayPayments = async () => {
  const appConfig = await getAppConfig();
  payments = await getCurrentSellerPayments();
  console.log('payments', payments);
  renderPaymentsListing(payments, appConfig);
};
const displayInventory = async () => {
  const listedItems = (await getCurrentSellerInventory()).map(i => inventoryToInventoryCardDTO(i));
  console.log('listedItems', listedItems);
  renderSellerListing(listedItems);
};
const initSellFlow = async () => {
  if (doesCurrentCharacterHaveSellerScope()) {
    const userDetails = getCurrentUserDetails();
    renderSellerPlaceholder(userDetails);
    console.log('Seller logged in, show sell page');
    await Promise.all([displayPayments(), displayInventory()]);
  } else {
    console.log('No seller scope');
    askForSellerScopePermission();
  }
};

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var ContentType;
(function(ContentType2) {
  ContentType2["Json"] = "application/json";
  ContentType2["FormData"] = "multipart/form-data";
  ContentType2["UrlEncoded"] = "application/x-www-form-urlencoded";
})(ContentType || (ContentType = {}));
class HttpClient {
  constructor(apiConfig = {}) {
    __publicField(this, "baseUrl", "https://esi.evetech.net/latest");
    __publicField(this, "securityData", null);
    __publicField(this, "securityWorker");
    __publicField(this, "abortControllers", /* @__PURE__ */ new Map());
    __publicField(this, "customFetch", (...fetchParams) => fetch(...fetchParams));
    __publicField(this, "baseApiParams", {
      credentials: "same-origin",
      headers: {},
      redirect: "follow",
      referrerPolicy: "no-referrer"
    });
    __publicField(this, "setSecurityData", (data) => {
      this.securityData = data;
    });
    __publicField(this, "contentFormatters", {
      [ContentType.Json]: (input) => input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
      [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(key, property instanceof Blob ? property : typeof property === "object" && property !== null ? JSON.stringify(property) : `${property}`);
        return formData;
      }, new FormData()),
      [ContentType.UrlEncoded]: (input) => this.toQueryString(input)
    });
    __publicField(this, "createAbortSignal", (cancelToken) => {
      if (this.abortControllers.has(cancelToken)) {
        const abortController2 = this.abortControllers.get(cancelToken);
        if (abortController2) {
          return abortController2.signal;
        }
        return void 0;
      }
      const abortController = new AbortController();
      this.abortControllers.set(cancelToken, abortController);
      return abortController.signal;
    });
    __publicField(this, "abortRequest", (cancelToken) => {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        abortController.abort();
        this.abortControllers.delete(cancelToken);
      }
    });
    __publicField(this, "request", async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {
      const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
      const requestParams = this.mergeRequestParams(params, secureParams);
      const queryString = query && this.toQueryString(query);
      const payloadFormatter = this.contentFormatters[type || ContentType.Json];
      const responseFormat = format || requestParams.format;
      return this.customFetch(`${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`, {
        ...requestParams,
        headers: {
          ...type && type !== ContentType.FormData ? { "Content-Type": type } : {},
          ...requestParams.headers || {}
        },
        signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,
        body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
      }).then(async (response) => {
        const r = response;
        r.data = null;
        r.error = null;
        const data = !responseFormat ? r : await response[responseFormat]().then((data2) => {
          if (r.ok) {
            r.data = data2;
          } else {
            r.error = data2;
          }
          return r;
        }).catch((e) => {
          r.error = e;
          return r;
        });
        if (cancelToken) {
          this.abortControllers.delete(cancelToken);
        }
        if (!response.ok)
          throw data;
        return data;
      });
    });
    Object.assign(this, apiConfig);
  }
  encodeQueryParam(key, value) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }
  addQueryParam(query, key) {
    return this.encodeQueryParam(key, query[key]);
  }
  addArrayQueryParam(query, key) {
    const value = query[key];
    return value.map((v) => this.encodeQueryParam(key, v)).join("&");
  }
  toQueryString(rawQuery) {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => typeof query[key] !== "undefined");
    return keys.map((key) => Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)).join("&");
  }
  addQueryParams(rawQuery) {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }
  mergeRequestParams(params1, params2) {
    return {
      ...this.baseApiParams,
      ...params1,
      ...params2 || {},
      headers: {
        ...this.baseApiParams.headers || {},
        ...params1.headers || {},
        ...params2 && params2.headers || {}
      }
    };
  }
}
class Api extends HttpClient {
  constructor() {
    super(...arguments);
    __publicField(this, "alliances", {
      getAlliances: (query, params = {}) => this.request({
        path: `/alliances/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getAlliancesAllianceId: (allianceId, query, params = {}) => this.request({
        path: `/alliances/${allianceId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getAlliancesAllianceIdContacts: (allianceId, query, params = {}) => this.request({
        path: `/alliances/${allianceId}/contacts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getAlliancesAllianceIdContactsLabels: (allianceId, query, params = {}) => this.request({
        path: `/alliances/${allianceId}/contacts/labels/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getAlliancesAllianceIdCorporations: (allianceId, query, params = {}) => this.request({
        path: `/alliances/${allianceId}/corporations/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getAlliancesAllianceIdIcons: (allianceId, query, params = {}) => this.request({
        path: `/alliances/${allianceId}/icons/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "characters", {
      postCharactersAffiliation: (characters, query, params = {}) => this.request({
        path: `/characters/affiliation/`,
        method: "POST",
        query,
        body: characters,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getCharactersCharacterId: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdAgentsResearch: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/agents_research/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdAssets: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/assets/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdAssetsLocations: (characterId, item_ids, query, params = {}) => this.request({
        path: `/characters/${characterId}/assets/locations/`,
        method: "POST",
        query,
        body: item_ids,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdAssetsNames: (characterId, item_ids, query, params = {}) => this.request({
        path: `/characters/${characterId}/assets/names/`,
        method: "POST",
        query,
        body: item_ids,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdAttributes: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/attributes/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdBlueprints: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/blueprints/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdBookmarks: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/bookmarks/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdBookmarksFolders: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/bookmarks/folders/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdCalendar: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/calendar/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdCalendarEventId: (characterId, eventId, query, params = {}) => this.request({
        path: `/characters/${characterId}/calendar/${eventId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      putCharactersCharacterIdCalendarEventId: (characterId, eventId, response, query, params = {}) => this.request({
        path: `/characters/${characterId}/calendar/${eventId}/`,
        method: "PUT",
        query,
        body: response,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      getCharactersCharacterIdCalendarEventIdAttendees: (characterId, eventId, query, params = {}) => this.request({
        path: `/characters/${characterId}/calendar/${eventId}/attendees/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdClones: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/clones/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      deleteCharactersCharacterIdContacts: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contacts/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      getCharactersCharacterIdContacts: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contacts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdContacts: (characterId, query, contact_ids, params = {}) => this.request({
        path: `/characters/${characterId}/contacts/`,
        method: "POST",
        query,
        body: contact_ids,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      putCharactersCharacterIdContacts: (characterId, query, contact_ids, params = {}) => this.request({
        path: `/characters/${characterId}/contacts/`,
        method: "PUT",
        query,
        body: contact_ids,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      getCharactersCharacterIdContactsLabels: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contacts/labels/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdContracts: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contracts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdContractsContractIdBids: (characterId, contractId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contracts/${contractId}/bids/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdContractsContractIdItems: (characterId, contractId, query, params = {}) => this.request({
        path: `/characters/${characterId}/contracts/${contractId}/items/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdCorporationhistory: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/corporationhistory/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdCspa: (characterId, characters, query, params = {}) => this.request({
        path: `/characters/${characterId}/cspa/`,
        method: "POST",
        query,
        body: characters,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdFatigue: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/fatigue/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdFittings: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/fittings/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdFittings: (characterId, fitting, query, params = {}) => this.request({
        path: `/characters/${characterId}/fittings/`,
        method: "POST",
        query,
        body: fitting,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      deleteCharactersCharacterIdFittingsFittingId: (characterId, fittingId, query, params = {}) => this.request({
        path: `/characters/${characterId}/fittings/${fittingId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      getCharactersCharacterIdFleet: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/fleet/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdFwStats: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/fw/stats/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdImplants: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/implants/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdIndustryJobs: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/industry/jobs/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdKillmailsRecent: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/killmails/recent/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdLocation: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/location/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdLoyaltyPoints: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/loyalty/points/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdMail: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdMail: (characterId, mail, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/`,
        method: "POST",
        query,
        body: mail,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdMailLabels: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/labels/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCharactersCharacterIdMailLabels: (characterId, label, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/labels/`,
        method: "POST",
        query,
        body: label,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      deleteCharactersCharacterIdMailLabelsLabelId: (characterId, labelId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/labels/${labelId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      getCharactersCharacterIdMailLists: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/lists/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      deleteCharactersCharacterIdMailMailId: (characterId, mailId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/${mailId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      getCharactersCharacterIdMailMailId: (characterId, mailId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/${mailId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      putCharactersCharacterIdMailMailId: (characterId, mailId, contents, query, params = {}) => this.request({
        path: `/characters/${characterId}/mail/${mailId}/`,
        method: "PUT",
        query,
        body: contents,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      getCharactersCharacterIdMedals: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/medals/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdMining: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/mining/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdNotifications: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/notifications/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdNotificationsContacts: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/notifications/contacts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdOnline: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/online/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdOpportunities: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/opportunities/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdOrders: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/orders/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdOrdersHistory: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/orders/history/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdPlanets: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/planets/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdPlanetsPlanetId: (characterId, planetId, query, params = {}) => this.request({
        path: `/characters/${characterId}/planets/${planetId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdPortrait: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/portrait/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdRoles: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/roles/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdSearch: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/search/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdShip: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/ship/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdSkillqueue: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/skillqueue/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdSkills: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/skills/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdStandings: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/standings/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdTitles: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/titles/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdWallet: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/wallet/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdWalletJournal: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/wallet/journal/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCharactersCharacterIdWalletTransactions: (characterId, query, params = {}) => this.request({
        path: `/characters/${characterId}/wallet/transactions/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    });
    __publicField(this, "contracts", {
      getContractsPublicBidsContractId: (contractId, query, params = {}) => this.request({
        path: `/contracts/public/bids/${contractId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getContractsPublicItemsContractId: (contractId, query, params = {}) => this.request({
        path: `/contracts/public/items/${contractId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getContractsPublicRegionId: (regionId, query, params = {}) => this.request({
        path: `/contracts/public/${regionId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "corporation", {
      getCorporationCorporationIdMiningExtractions: (corporationId, query, params = {}) => this.request({
        path: `/corporation/${corporationId}/mining/extractions/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationCorporationIdMiningObservers: (corporationId, query, params = {}) => this.request({
        path: `/corporation/${corporationId}/mining/observers/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationCorporationIdMiningObserversObserverId: (corporationId, observerId, query, params = {}) => this.request({
        path: `/corporation/${corporationId}/mining/observers/${observerId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    });
    __publicField(this, "corporations", {
      getCorporationsNpccorps: (query, params = {}) => this.request({
        path: `/corporations/npccorps/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCorporationsCorporationId: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdAlliancehistory: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/alliancehistory/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdAssets: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/assets/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postCorporationsCorporationIdAssetsLocations: (corporationId, item_ids, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/assets/locations/`,
        method: "POST",
        query,
        body: item_ids,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      postCorporationsCorporationIdAssetsNames: (corporationId, item_ids, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/assets/names/`,
        method: "POST",
        query,
        body: item_ids,
        secure: true,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdBlueprints: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/blueprints/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdBookmarks: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/bookmarks/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdBookmarksFolders: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/bookmarks/folders/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContacts: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/contacts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContactsLabels: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/contacts/labels/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContainersLogs: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/containers/logs/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContracts: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/contracts/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContractsContractIdBids: (contractId, corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/contracts/${contractId}/bids/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdContractsContractIdItems: (contractId, corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/contracts/${contractId}/items/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdCustomsOffices: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/customs_offices/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdDivisions: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/divisions/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdFacilities: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/facilities/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdFwStats: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/fw/stats/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdIcons: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/icons/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdIndustryJobs: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/industry/jobs/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdKillmailsRecent: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/killmails/recent/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMedals: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/medals/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMedalsIssued: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/medals/issued/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMembers: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/members/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMembersLimit: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/members/limit/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMembersTitles: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/members/titles/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdMembertracking: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/membertracking/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdOrders: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/orders/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdOrdersHistory: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/orders/history/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdRoles: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/roles/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdRolesHistory: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/roles/history/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdShareholders: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/shareholders/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdStandings: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/standings/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdStarbases: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/starbases/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdStarbasesStarbaseId: (corporationId, starbaseId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/starbases/${starbaseId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdStructures: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/structures/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdTitles: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/titles/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdWallets: (corporationId, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/wallets/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdWalletsDivisionJournal: (corporationId, division, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/wallets/${division}/journal/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getCorporationsCorporationIdWalletsDivisionTransactions: (corporationId, division, query, params = {}) => this.request({
        path: `/corporations/${corporationId}/wallets/${division}/transactions/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      })
    });
    __publicField(this, "dogma", {
      getDogmaAttributes: (query, params = {}) => this.request({
        path: `/dogma/attributes/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getDogmaAttributesAttributeId: (attributeId, query, params = {}) => this.request({
        path: `/dogma/attributes/${attributeId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getDogmaDynamicItemsTypeIdItemId: (itemId, typeId, query, params = {}) => this.request({
        path: `/dogma/dynamic/items/${typeId}/${itemId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getDogmaEffects: (query, params = {}) => this.request({
        path: `/dogma/effects/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getDogmaEffectsEffectId: (effectId, query, params = {}) => this.request({
        path: `/dogma/effects/${effectId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "fleets", {
      getFleetsFleetId: (fleetId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      putFleetsFleetId: (fleetId, new_settings, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/`,
        method: "PUT",
        query,
        body: new_settings,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      getFleetsFleetIdMembers: (fleetId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/members/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postFleetsFleetIdMembers: (fleetId, invitation, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/members/`,
        method: "POST",
        query,
        body: invitation,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      deleteFleetsFleetIdMembersMemberId: (fleetId, memberId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/members/${memberId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      putFleetsFleetIdMembersMemberId: (fleetId, memberId, movement, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/members/${memberId}/`,
        method: "PUT",
        query,
        body: movement,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      deleteFleetsFleetIdSquadsSquadId: (fleetId, squadId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/squads/${squadId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      putFleetsFleetIdSquadsSquadId: (fleetId, squadId, naming, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/squads/${squadId}/`,
        method: "PUT",
        query,
        body: naming,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      getFleetsFleetIdWings: (fleetId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/wings/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      postFleetsFleetIdWings: (fleetId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/wings/`,
        method: "POST",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      deleteFleetsFleetIdWingsWingId: (fleetId, wingId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/wings/${wingId}/`,
        method: "DELETE",
        query,
        secure: true,
        ...params
      }),
      putFleetsFleetIdWingsWingId: (fleetId, wingId, naming, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/wings/${wingId}/`,
        method: "PUT",
        query,
        body: naming,
        secure: true,
        type: ContentType.Json,
        ...params
      }),
      postFleetsFleetIdWingsWingIdSquads: (fleetId, wingId, query, params = {}) => this.request({
        path: `/fleets/${fleetId}/wings/${wingId}/squads/`,
        method: "POST",
        query,
        secure: true,
        format: "json",
        ...params
      })
    });
    __publicField(this, "fw", {
      getFwLeaderboards: (query, params = {}) => this.request({
        path: `/fw/leaderboards/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getFwLeaderboardsCharacters: (query, params = {}) => this.request({
        path: `/fw/leaderboards/characters/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getFwLeaderboardsCorporations: (query, params = {}) => this.request({
        path: `/fw/leaderboards/corporations/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getFwStats: (query, params = {}) => this.request({
        path: `/fw/stats/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getFwSystems: (query, params = {}) => this.request({
        path: `/fw/systems/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getFwWars: (query, params = {}) => this.request({
        path: `/fw/wars/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "incursions", {
      getIncursions: (query, params = {}) => this.request({
        path: `/incursions/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "industry", {
      getIndustryFacilities: (query, params = {}) => this.request({
        path: `/industry/facilities/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getIndustrySystems: (query, params = {}) => this.request({
        path: `/industry/systems/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "insurance", {
      getInsurancePrices: (query, params = {}) => this.request({
        path: `/insurance/prices/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "killmails", {
      getKillmailsKillmailIdKillmailHash: (killmailHash, killmailId, query, params = {}) => this.request({
        path: `/killmails/${killmailId}/${killmailHash}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "loyalty", {
      getLoyaltyStoresCorporationIdOffers: (corporationId, query, params = {}) => this.request({
        path: `/loyalty/stores/${corporationId}/offers/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "markets", {
      getMarketsGroups: (query, params = {}) => this.request({
        path: `/markets/groups/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getMarketsGroupsMarketGroupId: (marketGroupId, query, params = {}) => this.request({
        path: `/markets/groups/${marketGroupId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getMarketsPrices: (query, params = {}) => this.request({
        path: `/markets/prices/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getMarketsStructuresStructureId: (structureId, query, params = {}) => this.request({
        path: `/markets/structures/${structureId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getMarketsRegionIdHistory: (regionId, query, params = {}) => this.request({
        path: `/markets/${regionId}/history/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getMarketsRegionIdOrders: (regionId, query, params = {}) => this.request({
        path: `/markets/${regionId}/orders/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getMarketsRegionIdTypes: (regionId, query, params = {}) => this.request({
        path: `/markets/${regionId}/types/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "opportunities", {
      getOpportunitiesGroups: (query, params = {}) => this.request({
        path: `/opportunities/groups/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getOpportunitiesGroupsGroupId: (groupId, query, params = {}) => this.request({
        path: `/opportunities/groups/${groupId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getOpportunitiesTasks: (query, params = {}) => this.request({
        path: `/opportunities/tasks/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getOpportunitiesTasksTaskId: (taskId, query, params = {}) => this.request({
        path: `/opportunities/tasks/${taskId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "route", {
      getRouteOriginDestination: (destination, origin, query, params = {}) => this.request({
        path: `/route/${origin}/${destination}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "search", {
      getSearch: (query, params = {}) => this.request({
        path: `/search/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "sovereignty", {
      getSovereigntyCampaigns: (query, params = {}) => this.request({
        path: `/sovereignty/campaigns/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getSovereigntyMap: (query, params = {}) => this.request({
        path: `/sovereignty/map/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getSovereigntyStructures: (query, params = {}) => this.request({
        path: `/sovereignty/structures/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "status", {
      getStatus: (query, params = {}) => this.request({
        path: `/status/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "ui", {
      postUiAutopilotWaypoint: (query, params = {}) => this.request({
        path: `/ui/autopilot/waypoint/`,
        method: "POST",
        query,
        secure: true,
        ...params
      }),
      postUiOpenwindowContract: (query, params = {}) => this.request({
        path: `/ui/openwindow/contract/`,
        method: "POST",
        query,
        secure: true,
        ...params
      }),
      postUiOpenwindowInformation: (query, params = {}) => this.request({
        path: `/ui/openwindow/information/`,
        method: "POST",
        query,
        secure: true,
        ...params
      }),
      postUiOpenwindowMarketdetails: (query, params = {}) => this.request({
        path: `/ui/openwindow/marketdetails/`,
        method: "POST",
        query,
        secure: true,
        ...params
      }),
      postUiOpenwindowNewmail: (new_mail, query, params = {}) => this.request({
        path: `/ui/openwindow/newmail/`,
        method: "POST",
        query,
        body: new_mail,
        secure: true,
        type: ContentType.Json,
        ...params
      })
    });
    __publicField(this, "universe", {
      getUniverseAncestries: (query, params = {}) => this.request({
        path: `/universe/ancestries/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseAsteroidBeltsAsteroidBeltId: (asteroidBeltId, query, params = {}) => this.request({
        path: `/universe/asteroid_belts/${asteroidBeltId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseBloodlines: (query, params = {}) => this.request({
        path: `/universe/bloodlines/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseCategories: (query, params = {}) => this.request({
        path: `/universe/categories/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseCategoriesCategoryId: (categoryId, query, params = {}) => this.request({
        path: `/universe/categories/${categoryId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseConstellations: (query, params = {}) => this.request({
        path: `/universe/constellations/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseConstellationsConstellationId: (constellationId, query, params = {}) => this.request({
        path: `/universe/constellations/${constellationId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseFactions: (query, params = {}) => this.request({
        path: `/universe/factions/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseGraphics: (query, params = {}) => this.request({
        path: `/universe/graphics/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseGraphicsGraphicId: (graphicId, query, params = {}) => this.request({
        path: `/universe/graphics/${graphicId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseGroups: (query, params = {}) => this.request({
        path: `/universe/groups/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseGroupsGroupId: (groupId, query, params = {}) => this.request({
        path: `/universe/groups/${groupId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      postUniverseIds: (names, query, params = {}) => this.request({
        path: `/universe/ids/`,
        method: "POST",
        query,
        body: names,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getUniverseMoonsMoonId: (moonId, query, params = {}) => this.request({
        path: `/universe/moons/${moonId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      postUniverseNames: (ids, query, params = {}) => this.request({
        path: `/universe/names/`,
        method: "POST",
        query,
        body: ids,
        type: ContentType.Json,
        format: "json",
        ...params
      }),
      getUniversePlanetsPlanetId: (planetId, query, params = {}) => this.request({
        path: `/universe/planets/${planetId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseRaces: (query, params = {}) => this.request({
        path: `/universe/races/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseRegions: (query, params = {}) => this.request({
        path: `/universe/regions/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseRegionsRegionId: (regionId, query, params = {}) => this.request({
        path: `/universe/regions/${regionId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseSchematicsSchematicId: (schematicId, query, params = {}) => this.request({
        path: `/universe/schematics/${schematicId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseStargatesStargateId: (stargateId, query, params = {}) => this.request({
        path: `/universe/stargates/${stargateId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseStarsStarId: (starId, query, params = {}) => this.request({
        path: `/universe/stars/${starId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseStationsStationId: (stationId, query, params = {}) => this.request({
        path: `/universe/stations/${stationId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseStructures: (query, params = {}) => this.request({
        path: `/universe/structures/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseStructuresStructureId: (structureId, query, params = {}) => this.request({
        path: `/universe/structures/${structureId}/`,
        method: "GET",
        query,
        secure: true,
        format: "json",
        ...params
      }),
      getUniverseSystemJumps: (query, params = {}) => this.request({
        path: `/universe/system_jumps/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseSystemKills: (query, params = {}) => this.request({
        path: `/universe/system_kills/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseSystems: (query, params = {}) => this.request({
        path: `/universe/systems/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseSystemsSystemId: (systemId, query, params = {}) => this.request({
        path: `/universe/systems/${systemId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseTypes: (query, params = {}) => this.request({
        path: `/universe/types/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getUniverseTypesTypeId: (typeId, query, params = {}) => this.request({
        path: `/universe/types/${typeId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
    __publicField(this, "wars", {
      getWars: (query, params = {}) => this.request({
        path: `/wars/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getWarsWarId: (warId, query, params = {}) => this.request({
        path: `/wars/${warId}/`,
        method: "GET",
        query,
        format: "json",
        ...params
      }),
      getWarsWarIdKillmails: (warId, query, params = {}) => this.request({
        path: `/wars/${warId}/killmails/`,
        method: "GET",
        query,
        format: "json",
        ...params
      })
    });
  }
}

const esi = new Api();

// TODO - Move a lot of this to dogma-utils.js etc
const getCurrentUserModInventory = async () => {
  let { characterId, accessToken } = getCurrentUserAccessToken();

  let maxPage = 1;
  let pagesFetched = 0;
  let inventory = [];
  let cacheExpires;
  let lastModified;
  do {
    try {
      const req = esi.characters.getCharactersCharacterIdAssets(characterId, { token: accessToken, page: pagesFetched + 1 });
      const res = await req;
      const maxPagesHeader = res.headers.get('X-Pages');
      //   console.log('maxPagesHeader', maxPagesHeader)
      if (maxPagesHeader !== undefined) { maxPage = parseInt(maxPagesHeader); }

      console.log('res.data', res.data);
      inventory.push(...res.data);
      pagesFetched++;
      cacheExpires = new Date(`${res.headers.get('Expires')}`);
      lastModified = new Date(`${res.headers.get('Last-Modified')}`);
    //   console.log('cacheExpires', cacheExpires)
    } catch (error) {
      console.log('res.error', error);
      await refreshTokenAndGetNewUserAccessToken();
      const userDetails = getCurrentUserAccessToken();
      accessToken = userDetails.accessToken;
    }
  } while (pagesFetched < maxPage)

  const abyssTypesFlat = getAbyssModuleTypesFlatIds();
  console.log('abyssTypesFlat', abyssTypesFlat);
  // const abyssModuleTypes = getAbyssModuleTypes()
  inventory = inventory.filter(i => abyssTypesFlat.includes(i.type_id) && ['Hangar', 'Cargo', 'AutoFit'].includes(i.location_flag));

  // .filter(i => i.item_id === 1042480142523)
  // .filter(i => i.item_id === 1037021119109)
  // .filter(i => i.type_id === 47769)

  inventory.sort((a, b) => a.item_id - b.item_id);
  console.log('sde', sde);
  inventory = await Promise.all(inventory.map(async (i) => {
    const dogma = (await esi.dogma.getDogmaDynamicItemsTypeIdItemId(i.item_id, i.type_id)).data;
    // console.log('i.dogma', i, i.itemID, i.typeID, i.dogma)
    const relevantAttributes = sde.abyssalTypes[i.type_id].attributes.map(a => a.id);
    const filteredAttributes = dogma.dogma_attributes.filter(attr => relevantAttributes.includes(attr.attribute_id));// .map(a => { return { id: a.attribute_id, value: a.value } })
    const filteredAttributesObject = filteredAttributes.reduce((acc, attr) => {
      acc[attr.attribute_id] = attr.value;
      return acc
    }, {});

    const data = {
      itemID: i.item_id,
      typeID: i.type_id,
      sourceTypeID: dogma.source_type_id,
      mutatorTypeID: dogma.mutator_type_id,
      attributesRaw: filteredAttributesObject,
      status: 'NONE'
    };

    return inventoryToInventoryCardDTO(data)
  }));
  console.log('inventory', inventory);

  const currentInventory = await getCurrentSellerInventory();
  for (const inventoryItem of inventory) {
    for (const currentInventoryItem of currentInventory) {
      if (inventoryItem.itemID === currentInventoryItem.itemID) {
        inventoryItem.status = currentInventoryItem.status;
        inventoryItem.appraisal = currentInventoryItem.appraisal;
        inventoryItem.listingPrice = currentInventoryItem.listingPrice;
        console.log('currentInventoryItem', inventoryItem, currentInventoryItem);
      }
    }
  }

  return { inventory, cacheExpires, lastModified }
};
// List of modules
// https://github.com/stephenswat/eve-abyssal-market/blob/master/abyssal_modules/models/modules.py

const getTextBetweenStrings = (mainString, startString, endString) => {
  const startIndex = mainString.indexOf(startString);
  if (startIndex === -1) return '' // Start string not found
  const endIndex = mainString.indexOf(endString, startIndex + startString.length);
  if (endIndex === -1) return '' // End string not found
  return mainString.substring(startIndex + startString.length, endIndex)
};
const getValueAndConfidenceFromHtml = (text) => {
  const appraisalText = getTextBetweenStrings(text, 'Estimated Value', 'Contract history');
  const regex = /<dd>(.*?)<\/dd>/g;
  const matches = [];
  let match;
  while ((match = regex.exec(appraisalText)) !== null) {
    matches.push(match[1].replace('(nan)', '').trim());
    // console.log('match', match[1].trim())
  }
  return { value: matches[0], confidence: matches[1] }
};
const getAppraisalForItemId = async (itemID) => {
  try {
    // For now, just use mutaplasmid.space appraisal
    const req = await fetch(`https://thingproxy.freeboard.io/fetch/https://mutaplasmid.space/module/${itemID}/`);
    const text = await req.text();
    const appraisal = getValueAndConfidenceFromHtml(text);
    // console.log('appraisal', appraisal)
    return appraisal
  } catch (error) {
    return { value: 'Unavailable', confidence: 'Unavailable' }
  }
};

const renderInventoryPlaceholder = (userDetails) => {
  let html = `
      <div class="container">
          <div class="row">
              <div class="col">
                  <div class="d-grid gap-2 d-md-flex justify-content-between my-2">
                      <h1>Mods are in your hangers - Available to be listed</h1>
                  </div>
                  <p>EVE Online servers cache this data and it is made available to us up to 60 minutes after requesting.</p>
                  <p class="refresh-time-inventory">This text will update with the next refresh time.</p>
                  <p>Select the mods that you wish to sell and add your listing price. You can update the listing price at any time after it is listed.</p>
                  <p><i><b>Note:</b> Once you send a listing fee payment and you cancel after the mod is on sale or sell the item elsewhere, the listing fee will not be returned.</i></p>
              </div>
          </div>
          <div class="inner-content">
  
              <div class="row mt-4">
                  <div class="col placeholder-glow">
                      <span class="placeholder col-3"></span>
                      <span class="placeholder col-6"></span>
                      <span class="placeholder col-2"></span>
                  </div>
              </div>
              <div class="row">
          `;
  for (let i = 0; i < 8; i++) {
    html += `
                  <div class="col-3 mt-4">
                      <div class="card" aria-hidden="true">
                          <svg class="bd-placeholder-img card-img-top" width="100%" height="180" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder" preserveAspectRatio="xMidYMid slice" focusable="false">
                              <title>Placeholder</title>
                              <rect width="100%" height="100%" fill="#868e96"></rect>
                          </svg>
                          <div class="card-body">
                              <h5 class="card-title placeholder-glow">
                              <span class="placeholder col-6"></span>
                              </h5>
                              <p class="card-text placeholder-glow">
                              <span class="placeholder col-7"></span>
                              <span class="placeholder col-4"></span>
                              <span class="placeholder col-4"></span>
                              <span class="placeholder col-6"></span>
                              <span class="placeholder col-8"></span>
                              </p>
                              <a class="btn btn-secondary disabled placeholder col-6 float-end" aria-disabled="true"></a>
                          </div>
                      </div>
                  </div>
      `;
  }

  html += `
              </div>
              <div class="row mt-4">
                  <div class="col placeholder-glow">
                      <span class="placeholder col-6"></span>
                      <span class="placeholder col-3"></span>
                      <span class="placeholder col-2"></span>
                  </div>
              </div>
          </div>
      </div>
      <div class="selected-inventory-holder">
        <nav class="fixed-bottom bg-secondary pb-0 pt-2">
          <div class="container-fluid">
            <div class="row">
              <div class="col-10">
                <ul class="row my-0 px-0 gx-2 selected-inventory-item-holder">
                </ul>
              </div>
              <div class="col-2">
                <ul class="navbar-nav ms-auto h-100 pb-2">
                  <button class="btn btn-primary w-100 h-100 confirm-inventory" type="submit">
                    <div class="d-flex flex-row justify-content-center">
                      <i class="bi bi-plus-circle-fill"></i>
                      <span class="text-start ps-3">
                        List <span class="count">0</span> mods<br/>
                        <i class="price">0 ISK</i>
                      </span>
                    </div>
                  </button>
                </ul>
              </div>
            </div>
            
          </div>
        </nav>
  
      </div>
      `;
  document.querySelector('.content').innerHTML = html;
};
const renderAvailableInventory = (availableInventory, cacheExpires, lastModified) => {
  let html = '';

  if (availableInventory.length === 0) {
    html = `
          <div class="row mt-4">
              <div class="col">
                  <div class="alert alert-info" role="alert">
                      <p class="m-0">No abyss mods found in your hanger or cargo</p>
                  </div>
              </div>
          </div>
          `;
  } else {
    html += `
    <div class="row row-cols-lg-auto g-3 align-items-center flex-row-reverse px-2">
      <div class="col-12">
        <input class="form-control ms-2 data-search" type="search" placeholder="Search inventory">
      </div>
      <div class="col-12">
        <div class="form-check form-switch">
          <input class="form-check-input toggle-show-all" type="checkbox" role="switch" id="toggle-show-all">
          <label class="form-check-label" for="toggle-show-all">Show already listed</label>
        </div>
      </div>
      <div class="col-12">
        <div class="form-check form-switch">
          <input class="form-check-input toggle-select-all" type="checkbox" role="switch" id="toggle-select-all">
          <label class="form-check-label" for="toggle-select-all">Select / deselect all</label>
        </div>
      </div>
    </div>
`;
    html += '<div class="row">';
    for (const item of availableInventory) {
      html += '<div class="col-3 mt-4">';
      html += renderInventoryCard(item);
      html += '</div>';
    }
    html += '</div>';
  }
  document.querySelector('.inner-content').innerHTML = html;
};

const filterCards = () => {
  const searchQuery = document.querySelector('.data-search').value.toLowerCase();
  const hideListed = !document.querySelector('.toggle-show-all').checked;

  document.querySelectorAll('.inventory-item').forEach((element) => {
    const text = element.querySelector('.type-name').textContent.toLowerCase();
    const isListed = element.classList.contains('listed');

    // Filter based on search query and hide/show based on hideListed
    const shouldHide = (searchQuery && !text.includes(searchQuery)) || (hideListed && isListed);
    // element.style.display = shouldHide ? 'none' : 'block'
    element.parentElement.style.display = shouldHide ? 'none' : 'block';
  });
};
const bindInventoryActions = (availableInventory, cacheExpires, lastModified) => {
  triggerRefreshTime('.refresh-time-inventory', 'Inventory data', cacheExpires, lastModified);

  document.querySelector('.toggle-show-all').addEventListener('click', function () {
    filterCards();
  });
  document.querySelector('.data-search').addEventListener('input', function () {
    filterCards();
  });
  filterCards();
  document.querySelector('.toggle-select-all').addEventListener('change', function () {
    const selectAll = this.checked;
    document.querySelectorAll('.inventory-item').forEach(element => {
      const isListed = element.classList.contains('listed');
      const isSelected = element.classList.contains('selected');
      // console.log('e', element, isListed, '-', selectAll, isSelected)
      if (isListed) return
      if (selectAll && !isSelected) element.click();
      if (!selectAll && isSelected) element.click();
    });
  });
  // Bind add and remove inventory
  for (const inventoryItemEle of [...document.querySelectorAll('.inventory-item')]) {
    inventoryItemEle.addEventListener('click', async function (event) {
      if (event.target.classList.contains('no-click-close')) return
      const itemID = parseInt(inventoryItemEle.getAttribute('data-item-id'));
      const item = availableInventory.find(i => i.itemID === itemID);
      console.log('inventoryItemEle', inventoryItemEle, itemID, availableInventory, item);
      const isListed = inventoryItemEle.classList.contains('listed');
      if (isListed) {
        console.log('Item already listed');
        return
      }
      const isSelected = inventoryItemEle.classList.contains('selected');
      if (isSelected) {
        console.log('Item already selected, remove from list');
        inventoryItemEle.classList.remove('selected');
        inventoryItemEle.querySelector('.interaction-button').innerHTML = '<button class="btn btn-primary btn-sm"><i class="bi bi-plus-circle-fill"></i></button>';
        const selectedItemEle = document.querySelector(`.selected-inventory-item-holder [data-item-id="${itemID}"]`);
        selectedItemEle.remove();
        inventoryItemEle.querySelector('.listing-price-holder').style.display = 'none';
        inventoryItemEle.querySelector('.listing-price-holder .listing-price').focus();
      } else {
        console.log('Item not selected, add to list');
        inventoryItemEle.classList.add('selected');
        inventoryItemEle.querySelector('.interaction-button').innerHTML = '<button class="btn btn-danger btn-sm"><i class="bi bi-x-circle-fill"></i></button>';

        let html = '';
        html += `
            <div class="col-2" data-item-id="${itemID}">
              <span class="selected-inventory-item">
                <button class="btn btn-success btn-sm w-100 mb-2" type="submit">
                  <img src="https://images.evetech.net/types/${item.typeID}/icon?size=32">
                  <span class="title">${item.typeName}</span>
                </button>
                <span class="interaction-button">
                  <button class="btn btn-danger btn-sm">
                    <i class="bi bi-x-circle-fill"></i>
                  </button>
                </span>
              </span>
            </div>`;
        document.querySelector('.selected-inventory-item-holder').insertAdjacentHTML('beforeend', html);
        inventoryItemEle.querySelector('.listing-price-holder').style.display = 'block';

        const selectedInventoryItems = document.querySelectorAll('.selected-inventory-item-holder [data-item-id]');
        if (selectedInventoryItems.length > 0) {
          const lastSelectedInventoryItem = selectedInventoryItems[selectedInventoryItems.length - 1];
          lastSelectedInventoryItem.addEventListener('click', () => {
            document.querySelector(`.inventory-item[data-item-id="${itemID}"]`).click();
          });
        }
      }
      const selectedCount = document.querySelectorAll('.inventory-item.selected').length;
      const listingPrice = (await getAppConfig()).listingPrice * selectedCount;
      console.log('listingPrice', selectedCount, listingPrice);
      document.querySelector('.confirm-inventory .count').textContent = selectedCount;
      document.querySelector('.confirm-inventory .price').textContent = formatToISKString(listingPrice);

      const selectedInventoryHolderEle = document.querySelector('.selected-inventory-holder');
      if (selectedCount > 0) {
        selectedInventoryHolderEle.style.opacity = '1';
      } else {
        selectedInventoryHolderEle.style.opacity = '0';
      }
    });
  }
  for (const listingPriceEle of [...document.querySelectorAll('.listing-price')]) {
    listingPriceEle.addEventListener('blur', () => {
      listingPriceEle.value = validateListingPrice(listingPriceEle.value);
    });
  }
  document.querySelector('.confirm-inventory').addEventListener('click', async () => {
    const selectedInventoryToList = [...document.querySelectorAll('.inventory-item.selected[data-item-id]')].map(a => {
      const inventory = availableInventory.find(i => i.itemID === parseInt(a.getAttribute('data-item-id')));

      const data = deepCopy(inventory.data);
      // data.listingPriceString = a.querySelector('.listing-price').value
      data.listingPrice = listingPriceStringToInt(a.querySelector('.listing-price').value);
      data.appraisal = { type: 'AUTO', value: a.querySelector('.appraisal p').textContent.replace('Value: ', '') };
      // TODO - Appraisal value seems to have floating point issues
      return data
    });

    for (const item of selectedInventoryToList) {
      if (item.listingPrice === 0) {
        await showModalAlert('Error', '<p>Please ensure the listing prices are above zero</p>');
        return
      }
    }
    console.log('selectedInventoryToList', selectedInventoryToList);
    document.querySelector('.confirm-inventory').setAttribute('disabled', 'disabled');

    const paymentDetails = await initiateListingFlow(selectedInventoryToList);
    console.log('paymentDetails', paymentDetails);
    await showModalAlert('Listing Payment Details', `
        <p class="mb-3">You will receive an ingame mail containing the payment information. It will also be available no your <a href="/sell">seller</a> page<p>
        <p class="mb-3">In game, search for and right click on the <code>${paymentDetails.corpName}</code> corporation, then click 'Gigve Money'. Fill in the details as follows</p>
        <p class="ps-3 mb-0"><b>Account:</b> <code>${paymentDetails.account}</code></p>
        <p class="ps-3 mb-0"><b>Amount:</b> <code>${paymentDetails.amount}</code></p>
        <p class="ps-3 mb-3"><b>Reason:</b> <code>${paymentDetails.reason}</code></p>
        <p>Please be careful to fill this information in carefully.</p>
        <p>It may take up to 1 hour for the transation to be registered and your items listed.</p>
        `);
    window.location.assign('/sell');
  });
};
const updateAppraisals = async () => {
  // console.log('start')
  await Promise.all([...document.querySelectorAll('.appraisal:not(.appraisal-complete)')].map(async appraisalEle => {
    const itemID = appraisalEle.getAttribute('data-item-id');
    const appraisal = await getAppraisalForItemId(itemID);
    // console.log('appraisalEle', appraisalEle, itemID, appraisal)
    appraisalEle.innerHTML = `<p>Value: ${appraisal.value} <i>(Confidence: ${appraisal.confidence})</></p>`;
    appraisalEle.parentNode.querySelector('.listing-price').value = validateListingPrice(appraisal.value);
    return appraisalEle
  }));
  // console.log('end')
};
const validateListingPrice = (inputValue) => {
  const digitsString = inputValue.match(/[\d.]+/g);
  const value = parseFloat(digitsString ? digitsString.join('') : '');
  // console.log('validateListingPrice', inputValue, value)
  if (isNaN(value)) return 0

  const inputValueLower = inputValue.toLowerCase().replace('isk', '');
  let unit = '';
  if (inputValueLower.includes('k') || inputValueLower.includes('thou')) unit = 'k';
  else if (inputValueLower.includes('m') || inputValueLower.includes('mil')) unit = 'm';
  else if (inputValueLower.includes('b') || inputValueLower.includes('bil')) unit = 'b';
  else if (inputValueLower.includes('t') || inputValueLower.includes('tril')) unit = 't';
  return value + unit
};
const initListModInventory = async () => {
  if (doesCurrentCharacterHaveSellerScope()) {
    getCurrentUserDetails();
    renderInventoryPlaceholder();
    console.log('Seller logged in, show available mods');
    const { inventory, cacheExpires, lastModified } = await getCurrentUserModInventory();
    renderAvailableInventory(inventory);
    if (inventory.length > 0) {
      bindInventoryActions(inventory, cacheExpires, lastModified);
    }

    await updateAppraisals();
  } else {
    window.location.assign('/sell');
  }
};

const renderAdminJournal = (journal, lastModified) => {
  console.log('renderAdminJournal', journal, lastModified);

  let html = '';
  html += `
  <div class="container pt-3">
    <div class="row">
      <div class="col">
        ${renderAdminHeader()}
      </div>
    </div>
    <div class="row">
      <div class="col">
        <p class="lead">Journal cached from: <code>${lastModified.toLocaleString()}</code> <i>(Your local time)</i></p>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <div class="journal-grid"></div>
      </div>
    </div>
  </div>`;
  document.querySelector('.content').innerHTML = html;

  const journalCol = journal.map((p, i) => [
    i,
    p.id,
    p.date,

    p.ref_type,

    p.second_party_id,
    p.first_party_id,

    p.description,
    p.reason,
    p.amount,
    p.balance
  ]);
  console.log('journalCol', journalCol);
  new In({
    columns: [
      { name: 'i', hidden: true },
      { name: 'ID', sort: true },
      { name: 'Date (EVE time)', sort: true },
      { name: 'Ref Type', sort: true },
      { name: 'To', sort: true },
      { name: 'From', sort: true },
      { name: 'Description', sort: true },
      { name: 'Reason', sort: true },
      { name: 'Amount', sort: true, formatter: (cell) => cell.toLocaleString() },
      { name: 'Balance', sort: true, formatter: (cell) => cell.toLocaleString() }
    ],
    data: journalCol,
    search: true
  }).render(document.querySelector('.journal-grid'));
};

const initAdminJournal = async () => {
  console.log('initAdminJournal');
  //   clearData('admin-password')
  if (isLoginPasswordSet()) {
    console.log('initAdmin - LOGGED IN');
    const appAuth = await getAppAuth();
    console.log('appAuth', appAuth);
    if (appAuth.error) {
      console.log('BAD LOGIN', appAuth);
      clearData('admin-password');
      initAdmin();
    } else {
      // const appConfig = await getAppConfigAdmin()
      console.log('LOGGED IN!!! ADMIN PAYMENTS', appAuth);
      const { journal, lastModified } = await getJournalAdmin();
      renderAdminJournal(journal, lastModified);
    }
    // TODO is null, password is bad, clear password and reload page
  } else {
    console.log('initAdmin - NOT LOGGED IN');
    // triggerAdminLoginFlow()
    window.location.assign('/admin');
  }
};

const tempRender = (text) => {
  let html = '';
  html += `
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="alert alert-info my-5" role="alert">
                    <h3>${text} - This page is still under construction</h3>
                </div>
            </div>
        </div>
    </div>
    `;
  document.querySelector('.content').innerHTML = html;
};
const renderError = () => {
  let html = '';
  html += `
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="alert alert-danger my-5" role="alert">
                    <h3>Error!</h3>
                    <p>Something went wrong! Please contact us and let us know!</p>
                </div>
            </div>
        </div>
    </div>
    `;
  document.querySelector('.content').innerHTML = html;
};
const render404 = () => {
  let html = '';
  html += `
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="alert alert-danger my-5" role="alert">
                    <h3>404 - Page not found!</h3>
                    <p>We don't think anything should be here, if you do, please contact us and let us know!</p>
                </div>
            </div>
        </div>
    </div>
    `;
  document.querySelector('.content').innerHTML = html;
};
const updateContent = (route) => {
  switch (route) {
    case '': case '/': case 'home':
      tempRender('home');
      break
    case '/login':
      triggerLoginFlow();
      break
    case '/login/return': case '/login/return/':
      triggerLoginReturnFlow();
      break
    case '/sell':
      initSellFlow();
      break
    case '/sell/inventory':
      initListModInventory();
      break
    case '/buy':
      tempRender('buy');
      break
    case '/error':
      renderError();
      break

    case '/admin':
      initAdmin();
      break
    case '/admin/payments-pending':
      initAdminPendingPayments();
      break
    case '/admin/payments-complete':
      initAdminCompletePayments();
      break
    case '/admin/journal':
      initAdminJournal();
      break

    default:
      render404();
  }
};

const handleRouteChange = () => {
  console.log('handleRouteChange');
  let route = window.location.pathname;
  if (route[0] === '#') route = route.substring(1);
  console.log('handleRouteChange', route);
  updateContent(route);
};
// window.addEventListener('hashchange', handleRouteChange)

const init = () => {
  console.log('data', loadData());
  handleRouteChange();
  initNav();
};
init();
